{
  "name": "mbpp_299_max_aggregate",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val stdata1 = stdata.filter(_.isRight)\n        if (stdata1.isEmpty) Left(\"No data\")\n        else Right(stdata1.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy4gg24_n.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy4gg24_n.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy4gg24_n.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (s, l) = stdata.partition(_.isLeft)\n        if (s.isEmpty) {\n            val agg = l.map(_.right.get).sum\n            Right(agg)\n        } else {\n            Left(s.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps5ecrau3.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps5ecrau3.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps5ecrau3.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val lst = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lst2 = lst.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lst2.length == 0) {\n            Left(\"No data\")\n        } else {\n            Right(lst2.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jdqxtdb.scala:24:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jdqxtdb.scala:24:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jdqxtdb.scala:24:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.length > 0) return lefts(0)\n        val rights = data.filter(x => x.isRight)\n        val sum = rights.map(x => x match {\n            case Right(l) => l\n        }).sum\n        Right(sum)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp86m8wh25.scala:19:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp86m8wh25.scala:19:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp86m8wh25.scala:19:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var max_string = \"\"\n        var max_count = 0L\n        var max_count_string = \"\"\n        var count = 0L\n        var count_string = \"\"\n        for (i <- stdata) {\n            i match {\n                case Left(s) => {\n                    if (count > max_count) {\n                        max_count = count\n                        max_count_string = count_string\n                    }\n                    count = 0\n                    count_string = s\n                }\n                case Right(n) => {\n                    count += n\n                }\n            }\n        }\n        if (count > max_count) {\n            max_count = count\n            max_count_string = count_string\n        }\n        if (max_count > max) {\n            max = max_count\n            max_string = max_count_string\n        }\n        if (max == 0) Left(\"No data\") else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn8n0dk4k.scala:38:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn8n0dk4k.scala:38:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn8n0dk4k.scala:38:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var err = \"\"\n        stdata.foreach(x => x match {\n            case Left(s) => err = s\n            case Right(n) => max = max.max(n)\n        })\n        if (err == \"\") Right(max)\n        else Left(err)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510638,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdm8tqpi.scala:16:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdm8tqpi.scala:16:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdm8tqpi.scala:16:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val ldata = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (ldata.isEmpty) {\n            Left(\"No data\")\n        } else {\n            val max = ldata.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnxduspjd.scala:25:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnxduspjd.scala:25:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnxduspjd.scala:25:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).sum)\n        } else {\n            Left(strs.map(_.left.get).mkString(\"\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk4rj7hrz.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk4rj7hrz.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk4rj7hrz.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val longs = stdata.filter(_.isRight).map(_.right.get)\n        if (longs.isEmpty) Left(\"No longs\")\n        else Right(longs.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1bxyaqsm.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1bxyaqsm.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1bxyaqsm.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(\"Error\")\n        else Right(nums.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1toob4yl.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1toob4yl.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1toob4yl.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (left, right) = stdata.partition(_.isLeft)\n        if (left.isEmpty) {\n            val max = right.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(left.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123568,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptxdnlj93.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptxdnlj93.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptxdnlj93.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            val max = nums.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(\"Error: List contains strings\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123568,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyw7y6q3g.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyw7y6q3g.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyw7y6q3g.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            lefts.head\n        } else {\n            Right(rights.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123568,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmw66ajsa.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmw66ajsa.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmw66ajsa.scala:28:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val max = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        val min = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).min\n        val maxStr = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        }).map(x => x match {\n            case Left(s) => s\n            case Right(l) => \"\"\n        }).max\n        val minStr = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        }).map(x => x match {\n            case Left(s) => s\n            case Right(l) => \"\"\n        }).min\n        if (maxStr.length > minStr.length) {\n            Left(maxStr)\n        } else {\n            Right(max - min)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzrqkrze9.scala:45:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzrqkrze9.scala:45:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzrqkrze9.scala:45:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x.isRight)\n        val rights2 = rights.map(x => x match {\n            case Right(l) => l\n        })\n        val max = rights2.max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123568,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppqcz9iu2.scala:22:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppqcz9iu2.scala:22:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppqcz9iu2.scala:22:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        else {\n            return Right(rights.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).reduceLeft(_ + _))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphnnodqic.scala:29:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphnnodqic.scala:29:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphnnodqic.scala:29:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max : Long = 0\n        var max_index : Int = 0\n        var count : Int = 0\n        for (data <- stdata) {\n            data match {\n                case Left(s) => {\n                    if (s.length > max) {\n                        max = s.length\n                        max_index = count\n                    }\n                }\n                case Right(l) => {\n                    if (l > max) {\n                        max = l\n                        max_index = count\n                    }\n                }\n            }\n            count += 1\n        }\n        return stdata(max_index)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe63_w1y1.scala:29:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe63_w1y1.scala:29:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe63_w1y1.scala:29:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\") else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphvk4pm2z.scala:10:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphvk4pm2z.scala:10:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphvk4pm2z.scala:10:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val l = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val s = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        }).map(x => x match {\n            case Left(s) => s\n            case Right(l) => \"0\"\n        })\n        if (s.length > 0) Left(s.mkString(\",\"))\n        else Right(l.sum)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvynx0kl2.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvynx0kl2.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvynx0kl2.scala:28:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\"\\n\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaxw_ycza.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaxw_ycza.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaxw_ycza.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val sum = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).sum\n        return Right(sum)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7icmaz4h.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7icmaz4h.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7icmaz4h.scala:28:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(\"No numbers\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123568,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp10etujmm.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp10etujmm.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp10etujmm.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(n) => Right(n)\n        })\n        val ndata = data.filter(x => x match {\n            case Left(s) => false\n            case Right(n) => true\n        })\n        if (ndata.length == 0) {\n            Left(\"No data\")\n        } else {\n            val max = ndata.reduce((x, y) => x match {\n                case Left(s) => x\n                case Right(n) => y match {\n                    case Left(s) => y\n                    case Right(m) => Right(max(n, m))\n                }\n            })\n            max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123568,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpscsxl9dq.scala:21:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    \u001b[33mcase\u001b[0m Right(m) => Right(max(n, m))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpscsxl9dq.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpscsxl9dq.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val r = l.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (r.isEmpty) {\n            Left(\"No data\")\n        } else {\n            Right(r.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123568,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf4ok9a47.scala:24:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf4ok9a47.scala:24:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf4ok9a47.scala:24:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.foldLeft(0L)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => x + l\n        })\n        val count = data.foldLeft(0)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => x + 1\n        })\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123568,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxnddyyrn.scala:22:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxnddyyrn.scala:22:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxnddyyrn.scala:22:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val longs = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (longs.isEmpty) {\n            return Left(\"No Longs\")\n        }\n        val max = longs.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8y0l44ef.scala:24:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8y0l44ef.scala:24:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8y0l44ef.scala:24:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_9vezlv.scala:30:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_9vezlv.scala:30:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_9vezlv.scala:30:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val max = stdata.filter(x => x.isRight).map(x => x.right.get).max\n        val min = stdata.filter(x => x.isRight).map(x => x.right.get).min\n        val maxAggregate = max - min\n        if (maxAggregate < 0) Left(\"Error\") else Right(maxAggregate)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123568,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpavs25i94.scala:12:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpavs25i94.scala:12:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpavs25i94.scala:12:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val stdata_ = stdata.filter(_.isRight).map(_.right.get)\n        if (stdata_.length == 0) Left(\"No data\")\n        else Right(stdata_.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jutsnm9.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jutsnm9.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jutsnm9.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val sum = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).reduceLeft((x, y) => x + y)\n        return Right(sum)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_x_w643n.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_x_w643n.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_x_w643n.scala:28:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val l = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (l.isEmpty) Left(\"No Data\")\n        else Right(l.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmsg0pr30.scala:21:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmsg0pr30.scala:21:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmsg0pr30.scala:21:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (l.length == 0) {\n            Left(\"No numeric data\")\n        } else {\n            Right(l.max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6iuotv_1.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6iuotv_1.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6iuotv_1.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) return lefts(0)\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123586,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88gny1ha.scala:26:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88gny1ha.scala:26:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88gny1ha.scala:26:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            Left(lefts.head.left.get)\n        } else {\n            Right(data.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).reduceLeft((x, y) => x + y))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123586,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg9ihz2yr.scala:24:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg9ihz2yr.scala:24:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg9ihz2yr.scala:24:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp37ae904l.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp37ae904l.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp37ae904l.scala:28:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (s, t) = stdata.partition(_.isLeft)\n        if (s.isEmpty) Right(t.map(_.right.get).max)\n        else Left(s.map(_.left.get).mkString(\"\\n\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxeojlgqi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxeojlgqi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxeojlgqi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.foldLeft(0L)((a, b) => b match {\n            case Left(s) => a\n            case Right(l) => a + l\n        })\n        val count = data.foldLeft(0)((a, b) => b match {\n            case Left(s) => a\n            case Right(l) => a + 1\n        })\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps8en6r84.scala:22:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps8en6r84.scala:22:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps8en6r84.scala:22:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_9vezlv.scala:30:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_9vezlv.scala:30:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_9vezlv.scala:30:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = Long.MinValue\n        var min = Long.MaxValue\n        var count = 0\n        var sum = 0L\n        var avg = 0L\n        for (i <- stdata) {\n            i match {\n                case Left(s) => return Left(s)\n                case Right(l) => {\n                    if (l > max) max = l\n                    if (l < min) min = l\n                    count += 1\n                    sum += l\n                }\n            }\n        }\n        avg = sum / count\n        Right(max + min + avg)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0xahcbt.scala:26:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0xahcbt.scala:26:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0xahcbt.scala:26:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(longs.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl40fjq61.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl40fjq61.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl40fjq61.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map {\n            case Left(x) => Left(x)\n            case Right(x) => Right(x)\n        }\n        val sum = data.filter(_.isRight).map(_.right.get).sum\n        val count = data.filter(_.isRight).length\n        val avg = sum / count\n        val max = data.filter(_.isRight).map(_.right.get).max\n        val min = data.filter(_.isRight).map(_.right.get).min\n        val maxAggregate = max(max, max(avg, min))\n        Right(maxAggregate)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpl0hvgbcl.scala:15:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxAggregate\u001b[0m = max(max, max(avg, min))\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpl0hvgbcl.scala:15:36 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxAggregate\u001b[0m = max(max, max(avg, min))\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl0hvgbcl.scala:19:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl0hvgbcl.scala:19:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strings, longs) = stdata.partition(_.isLeft)\n        if (strings.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strings.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zc6ogoy.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zc6ogoy.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zc6ogoy.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val lst = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(n) => Right(n)\n        })\n        val lst2 = lst.filter(x => x match {\n            case Left(s) => false\n            case Right(n) => true\n        })\n        val lst3 = lst2.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(n) => Right(n)\n        })\n        if (lst3.length == 0) Left(\"No numbers in list\")\n        else Right(lst3.map(x => x match {\n            case Left(s) => 0\n            case Right(n) => n\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmputimdqc3.scala:25:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmputimdqc3.scala:25:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmputimdqc3.scala:25:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get).sorted\n        if (l.length == 0) Left(\"No data\")\n        else Right(l.last)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7exu_w61.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7exu_w61.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7exu_w61.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val max = stdata.filter(_.isRight).map(_.right.get).max\n        val min = stdata.filter(_.isRight).map(_.right.get).min\n        val sum = stdata.filter(_.isRight).map(_.right.get).sum\n        val avg = sum / stdata.filter(_.isRight).map(_.right.get).size\n        val maxAggregate = max + min + sum + avg\n        Right(maxAggregate)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp48lzuuex.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp48lzuuex.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp48lzuuex.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\") else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphvk4pm2z.scala:10:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphvk4pm2z.scala:10:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphvk4pm2z.scala:10:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val stdata2 = stdata.filter(_.isRight).map(_.right.get)\n        if (stdata2.isEmpty) Left(\"No data\")\n        else Right(stdata2.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmped3fq386.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmped3fq386.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmped3fq386.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val agg = max + min + sum + avg\n        Right(agg)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt3l94t8r.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt3l94t8r.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt3l94t8r.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val max = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        val maxIndex = data.indexOf(Right(max))\n        data(maxIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8h7x81v.scala:21:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8h7x81v.scala:21:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8h7x81v.scala:21:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strings, longs) = stdata.partition(_.isLeft)\n        if (strings.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strings.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zc6ogoy.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zc6ogoy.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zc6ogoy.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.size == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9xxfzwhs.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9xxfzwhs.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9xxfzwhs.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.size > 0) {\n            Left(lefts.head.left.get)\n        } else {\n            Right(rights.map(x => x.right.get).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdjouu1x.scala:25:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdjouu1x.scala:25:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppdjouu1x.scala:25:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        // Write your code here\n        val result = stdata.foldLeft(0L)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => x + l\n        })\n        if (result > 0) Right(result) else Left(\"Invalid Input\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqg8asws1.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqg8asws1.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqg8asws1.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppx3z65rn.scala:30:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppx3z65rn.scala:30:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppx3z65rn.scala:30:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val stdata2 = stdata.filter(_.isRight).map(_.right.get)\n        if (stdata2.isEmpty) Left(\"No data\")\n        else Right(stdata2.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmped3fq386.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmped3fq386.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmped3fq386.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            Right(rights.map(_.right.get).max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\"\\n\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2w9_fon0.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2w9_fon0.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2w9_fon0.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            val errors = lefts.map(_.left.get)\n            Left(errors.mkString(\"\\n\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxhg6w5tg.scala:16:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxhg6w5tg.scala:16:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxhg6w5tg.scala:16:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val l = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (l.length == 0) {\n            Left(\"No data\")\n        } else {\n            val l2 = l.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            })\n            val l3 = l2.map(x => x match {\n                case 0 => 0\n                case _ => 1\n            })\n            val l4 = l3.reduceLeft(_ + _)\n            if (l4 == 0) {\n                Left(\"No data\")\n            } else {\n                val l5 = l2.reduceLeft(_ + _)\n                val l6 = l5 / l4\n                Right(l6)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphd8l8eb2.scala:36:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphd8l8eb2.scala:36:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphd8l8eb2.scala:36:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.size == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9xxfzwhs.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9xxfzwhs.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9xxfzwhs.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val max = rights.max(new Ordering[Either[String, Long]] {\n            def compare(x: Either[String, Long], y: Either[String, Long]) = x match {\n                case Left(s) => y match {\n                    case Left(t) => s.compare(t)\n                    case Right(l) => -1\n                }\n                case Right(l) => y match {\n                    case Left(t) => 1\n                    case Right(m) => l.compare(m)\n                }\n            }\n        })\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzi4ara3t.scala:36:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzi4ara3t.scala:36:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzi4ara3t.scala:36:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var error = \"\"\n        for (i <- stdata) {\n            i match {\n                case Left(s) => error = s\n                case Right(l) => max = max + l\n            }\n        }\n        if (error != \"\") Left(error) else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptn0kq5ri.scala:17:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptn0kq5ri.scala:17:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptn0kq5ri.scala:17:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppx3z65rn.scala:30:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppx3z65rn.scala:30:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppx3z65rn.scala:30:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val r = l.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rr = r.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val rrr = rr.foldLeft(0L)((x, y) => x + y)\n        Right(rrr)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptpkktxwj.scala:22:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptpkktxwj.scala:22:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptpkktxwj.scala:22:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data found\")\n        else Right(lst.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpml80y9rm.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpml80y9rm.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpml80y9rm.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfvmjzkr.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfvmjzkr.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfvmjzkr.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        // Write your code here\n        var max = 0L\n        var max_str = \"\"\n        for (e <- stdata) {\n            e match {\n                case Left(str) => {\n                    if (str.length > max_str.length) {\n                        max_str = str\n                    }\n                }\n                case Right(num) => {\n                    if (num > max) {\n                        max = num\n                    }\n                }\n            }\n        }\n        if (max_str.length > 0) {\n            Left(max_str)\n        } else {\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpylmzx5jg.scala:30:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpylmzx5jg.scala:30:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpylmzx5jg.scala:30:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var maxAggregate = 0L\n        var error : String = \"\"\n        for (i <- 0 until stdata.length) {\n            stdata(i) match {\n                case Left(s) => error = s\n                case Right(l) => maxAggregate = max(maxAggregate, l)\n            }\n        }\n        if (error != \"\") Left(error) else Right(maxAggregate)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu9e2yxo5.scala:17:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu9e2yxo5.scala:17:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu9e2yxo5.scala:17:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            val leftsStr = lefts.map(_.left.get).mkString(\", \")\n            Left(leftsStr)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpit6r9xq6.scala:16:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpit6r9xq6.scala:16:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpit6r9xq6.scala:16:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val agg = data.foldLeft(Right(0L))((acc, x) => acc match {\n            case Left(s) => Left(s)\n            case Right(l) => x match {\n                case Left(s) => Left(s)\n                case Right(l) => Right(l + acc.right.get)\n            }\n        })\n        agg\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbebfc9ns.scala:11:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mcase\u001b[0m Left(s) => Left(s)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    Left[Any, Nothing]\n\u001b[31m   |\u001b[0m                            Required: Right[Nothing, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbebfc9ns.scala:13:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                \u001b[33mcase\u001b[0m Left(s) => Left(s)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Left[(s : String), Nothing]\n\u001b[31m   |\u001b[0m                                Required: Right[Nothing, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbebfc9ns.scala:20:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbebfc9ns.scala:20:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val max = stdata.filter(_.isRight).map(_.right.get).max\n        val min = stdata.filter(_.isRight).map(_.right.get).min\n        val sum = stdata.filter(_.isRight).map(_.right.get).sum\n        val avg = sum / stdata.filter(_.isRight).size\n        val maxAggregate = max + min + sum + avg\n        if (maxAggregate > Int.MaxValue) Left(\"Overflow\") else Right(maxAggregate)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwiaujf_.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwiaujf_.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwiaujf_.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (left, right) = stdata.partition(_.isLeft)\n        if (left.length > 0) {\n            Left(left.map(_.left.get).mkString(\",\"))\n        } else {\n            Right(right.map(_.right.get).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v_ab1ob.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v_ab1ob.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v_ab1ob.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(_.right.getOrElse(0))\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val maxAggregate = max(max(max, min), avg)\n        Right(maxAggregate)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp317c87dy.scala:7:26 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = data.max\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for B\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mwhere:    B is a type variable with constraint >: AnyVal\n\u001b[31m  |\u001b[0m..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mB\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[B]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[B].\n\u001b[31m\u001b[31m-- Error: /tmp/tmp317c87dy.scala:8:26 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = data.min\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for B\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mwhere:    B is a type variable with constraint >: AnyVal\n\u001b[31m  |\u001b[0m..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mB\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[B]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[B].\n\u001b[31m\u001b[31m-- Error: /tmp/tmp317c87dy.scala:9:26 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msum\u001b[0m = data.sum\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                  No implicit Ordering defined for B\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m                  where:    B is a type variable with constraint >: AnyVal\n\u001b[31m  |\u001b[0m                  .\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp317c87dy.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        for (x <- stdata) {\n            x match {\n                case Left(s) => return Left(s)\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajzx039v.scala:18:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajzx039v.scala:18:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajzx039v.scala:18:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.flatMap(x => x match {\n            case Left(s) => None\n            case Right(l) => Some(l)\n        })\n        if (data.isEmpty) Left(\"Empty list\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr2fx9pt9.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr2fx9pt9.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr2fx9pt9.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Right(l) => l\n        }).sum\n        val count = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Right(l) => l\n        }).length\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu5p0bab1.scala:26:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu5p0bab1.scala:26:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu5p0bab1.scala:26:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).sum\n        val count = data.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => 1\n        }).sum\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6eguw1u.scala:22:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6eguw1u.scala:22:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6eguw1u.scala:22:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) Right(num.map(_.right.get).max)\n        else Left(\"Error: String found\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val sum = stdata.foldLeft(0L)((acc, x) => x match {\n            case Left(s) => acc\n            case Right(l) => acc + l\n        })\n        if (sum > 0) Right(sum) else Left(\"No positive numbers\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxmh4h8jf.scala:13:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxmh4h8jf.scala:13:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxmh4h8jf.scala:13:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val stdata_ = stdata.filter(_.isRight).map(_.right.get)\n        if (stdata_.isEmpty) Left(\"No data\")\n        else Right(stdata_.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6mu80y7.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6mu80y7.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6mu80y7.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        if (stdata.isEmpty)\n            Left(\"Empty list\")\n        else {\n            val agg = stdata.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).reduceLeft(_ + _)\n            Right(agg)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplnfczvbj.scala:17:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplnfczvbj.scala:17:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplnfczvbj.scala:17:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = Long.MinValue\n        var max_index = -1\n        var max_count = 0\n        var count = 0\n        var index = 0\n        for (i <- stdata) {\n            i match {\n                case Left(s) => {\n                    if (count > max_count) {\n                        max_count = count\n                        max_index = index\n                    }\n                    count = 0\n                    index += 1\n                }\n                case Right(l) => {\n                    count += l\n                }\n            }\n        }\n        if (count > max_count) {\n            max_count = count\n            max_index = index\n        }\n        if (max_index == -1) Left(\"No data\") else Right(max_count)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpg_b7j5c0.scala:22:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    count += l\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg_b7j5c0.scala:33:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg_b7j5c0.scala:33:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Typ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var max_string = \"\"\n        var max_long = 0L\n        for (i <- stdata) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max_string.length) max_string = s\n                }\n                case Right(l) => {\n                    if (l > max_long) max_long = l\n                }\n            }\n        }\n        if (max_string.length > max_long) Left(max_string) else Right(max_long)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123608,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau35108h.scala:22:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau35108h.scala:22:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau35108h.scala:22:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (data.length == 0) {\n            Left(\"No data\")\n        } else {\n            Right(data.max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwvkhiqw3.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwvkhiqw3.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwvkhiqw3.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1pnpxvna.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1pnpxvna.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1pnpxvna.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        // Write your code here\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevp6xb1k.scala:12:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevp6xb1k.scala:12:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevp6xb1k.scala:12:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rights2 = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val max = rights2.max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgfx4rxx.scala:29:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgfx4rxx.scala:29:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgfx4rxx.scala:29:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1pnpxvna.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1pnpxvna.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1pnpxvna.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        stdata.foldLeft(Right(0L))((acc, x) => {\n            (acc, x) match {\n                case (Right(a), Right(b)) => Right(max(a, b))\n                case (Left(a), Right(b)) => Left(a)\n                case (Right(a), Left(b)) => Left(b)\n                case (Left(a), Left(b)) => Left(a)\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6qhoevp.scala:9:48 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mcase\u001b[0m (Left(a), Right(b)) => Left(a)\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    Left[Any, Nothing]\n\u001b[31m  |\u001b[0m                                            Required: Right[Nothing, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6qhoevp.scala:10:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mcase\u001b[0m (Right(a), Left(b)) => Left(b)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Left[(b : String), Nothing]\n\u001b[31m   |\u001b[0m                                   Required: Right[Nothing, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6qhoevp.scala:11:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mcase\u001b[0m (Left(a), Left(b)) => Left(a)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Left[(a : Any), Nothing]\n\u001b[31m   |\u001b[0m                                      Required: Right[Nothing, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6qhoevp.scala:16:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(_.right.getOrElse(0L))\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val agg = max + min + sum + avg\n        Right(agg)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkca8d3ai.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkca8d3ai.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkca8d3ai.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rights2 = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val rights3 = rights2.map(x => x.toLong)\n        val rights4 = rights3.map(x => x.toDouble)\n        val rights5 = rights4.map(x => log(x))\n        val rights6 = rights5.map(x => exp(x))\n        val rights7 = rights6.map(x => x.toLong)\n        val rights8 = rights7.map(x => x.toInt)\n        val rights9 = rights8.map(x => x.toLong)\n        val rights10 = rights9.map(x => x.toDouble)\n        val rights11 = rights10.map(x => log(x))\n        val rights12 = rights11.map(x => exp(x))\n        val rights13 = rights12.map(x => x.toLong)\n        val rights14 = rights13.map(x => x.toInt)\n        val rights15 = rights14.map(x => x.toLong)\n        val rights16 = rights15.map(x => x.toDouble)\n        val rights17 = rights16.map(x => log(x))\n        val rights18 = rights17.map(x => exp(x))\n        val rights19 = rights18.map(x => x.toLong)\n        val rights20 = rights19.map(x => x.toInt)\n        val rights21 = rights20.map(x => x.toLong)\n        val rights22\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0srxhh3u.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0srxhh3u.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0srxhh3u.scala:47:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0srxhh3u.scala:47:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val stdata2 = stdata.filter(_.isRight).map(_.right.get)\n        if (stdata2.isEmpty) Left(\"No numeric data\")\n        else Right(stdata2.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9ougv6r.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9ougv6r.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj9ougv6r.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            lefts(0)\n        } else {\n            val rights = data.filter(x => x match {\n                case Left(s) => false\n                case Right(l) => true\n            })\n            Right(rights.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).sum)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo4seoh7k.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo4seoh7k.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo4seoh7k.scala:28:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(\"Error\")\n        else Right(nums.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1toob4yl.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1toob4yl.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1toob4yl.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) {\n            Right(num.map(_.right.get).max)\n        } else {\n            Left(str.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetn13mxs.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetn13mxs.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetn13mxs.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(x => x.isRight)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.map(x => x.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnu0jd2b6.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnu0jd2b6.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnu0jd2b6.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var maxIndex = -1\n        var min = 0L\n        var minIndex = -1\n        for (i <- 0 until stdata.length) {\n            stdata(i) match {\n                case Left(s) => {\n                    if (maxIndex != -1) {\n                        val aggregate = max - min\n                        if (aggregate > stdata(maxIndex).right.get) {\n                            maxIndex = i\n                        }\n                    }\n                    max = 0L\n                    min = 0L\n                    maxIndex = -1\n                    minIndex = -1\n                }\n                case Right(l) => {\n                    if (maxIndex == -1 || l > max) {\n                        max = l\n                        maxIndex = i\n                    }\n                    if (minIndex == -1 || l < min) {\n                        min = l\n                        minIndex = i\n                    }\n                }\n            }\n        }\n        if (maxIndex != -1) {\n            Right(max - min)\n        } else {\n            Left(\"No aggregate found\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxnimki3l.scala:43:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxnimki3l.scala:43:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxnimki3l.scala:43:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.length == 0) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl3qgwmm0.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl3qgwmm0.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl3qgwmm0.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val sum = l.sum\n        val max = l.max\n        if (sum > max) Right(sum) else Left(\"sum is less than max\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm3xgokao.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm3xgokao.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm3xgokao.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) {\n            Right(num.map(_.right.get).max)\n        } else {\n            Left(str.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetn13mxs.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetn13mxs.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetn13mxs.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val lst = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lst2 = lst.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val lst3 = lst2.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val lst4 = lst3.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst5 = lst4.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst6 = lst5.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst7 = lst6.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst8 = lst7.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst9 = lst8.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst10 = lst9.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst11 = lst10.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst12 = lst11.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst13 = lst12.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst14 = lst13.map(x => x match {\n            case 0 => 0\n            case l => l\n        })\n        val lst15 = lst14.map(x => x match {\n            case 0 => 0\n            case l =>\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdyu2kq_s.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdyu2kq_s.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdyu2kq_s.scala:72:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        else {\n            return Right(rights.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnfar11ja.scala:29:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnfar11ja.scala:29:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnfar11ja.scala:29:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        // Write your code here\n        if (stdata.isEmpty) {\n            Left(\"Empty List\")\n        } else {\n            val lst = stdata.filter(_.isRight).map(_.right.get)\n            if (lst.isEmpty) {\n                Left(\"No Longs\")\n            } else {\n                Right(lst.max)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp315h105r.scala:19:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp315h105r.scala:19:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp315h105r.scala:19:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        // Write your code here\n        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg17754u3.scala:12:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg17754u3.scala:12:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg17754u3.scala:12:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\", \"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sp5xu5w.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sp5xu5w.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sp5xu5w.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val stdata_filtered = stdata.filter(_.isRight)\n        if (stdata_filtered.isEmpty) Left(\"No data\")\n        else Right(stdata_filtered.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfhm9ssam.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfhm9ssam.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfhm9ssam.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptwy5007j.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptwy5007j.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptwy5007j.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val lst = stdata.map(x => x match {\n            case Left(str) => Left(str)\n            case Right(num) => Right(num)\n        })\n        val lst2 = lst.filter(x => x match {\n            case Left(str) => false\n            case Right(num) => true\n        })\n        if (lst2.length == 0) {\n            Left(\"No data\")\n        } else {\n            val lst3 = lst2.map(x => x match {\n                case Left(str) => 0\n                case Right(num) => num\n            })\n            val lst4 = lst3.map(x => x.toDouble)\n            val lst5 = lst4.map(x => log(x))\n            val lst6 = lst5.map(x => exp(x))\n            val lst7 = lst6.map(x => x.toLong)\n            Right(lst7.max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4c97djen.scala:29:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4c97djen.scala:29:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4c97djen.scala:29:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val maxAggregate = max(max(max, min), avg)\n        if (maxAggregate == 0) Left(\"No data\")\n        else Right(maxAggregate)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpieu8qcwz.scala:14:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxAggregate\u001b[0m = max(max(max, min), avg)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpieu8qcwz.scala:14:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxAggregate\u001b[0m = max(max(max, min), avg)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpieu8qcwz.scala:19:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpieu8qcwz.scala:19:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1pnpxvna.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1pnpxvna.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1pnpxvna.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.size > 0) {\n            return lefts(0)\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123629,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfg6yzhkt.scala:27:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfg6yzhkt.scala:27:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfg6yzhkt.scala:27:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            Right(rights.map(_.right.get).max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123630,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0yy9f3x.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0yy9f3x.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0yy9f3x.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(strs.map(_.left.get).mkString(\",\"))\n        else Right(nums.map(_.right.get).sum)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123630,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7lp4g2d.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7lp4g2d.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7lp4g2d.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        stdata.foldLeft(Right(0L))((acc, x) => {\n            acc match {\n                case Left(s) => Left(s)\n                case Right(y) => x match {\n                    case Left(s) => Left(s)\n                    case Right(z) => Right(max(y, z))\n                }\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123630,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5dttuao4.scala:8:36 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m                \u001b[33mcase\u001b[0m Left(s) => Left(s)\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    Left[Any, Nothing]\n\u001b[31m  |\u001b[0m                                Required: Right[Nothing, Long]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5dttuao4.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                    \u001b[33mcase\u001b[0m Left(s) => Left(s)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Left[(s : String), Nothing]\n\u001b[31m   |\u001b[0m                                   Required: Right[Nothing, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5dttuao4.scala:17:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5dttuao4.scala:17:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Coll",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc664qacv.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}