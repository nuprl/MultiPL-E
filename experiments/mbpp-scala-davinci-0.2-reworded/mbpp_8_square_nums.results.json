{
  "name": "mbpp_8_square_nums",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums.map(x => x * x)\n    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}