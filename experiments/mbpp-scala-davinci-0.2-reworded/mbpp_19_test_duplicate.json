{
  "name": "mbpp_19_test_duplicate",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    def testDuplicate(arraynums : List[Long]) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(testDuplicate((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(testDuplicate((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(testDuplicate((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var hashset = HashSet[Long]()\n        for (i <- 0 until arraynums.length) {\n            if (hashset.contains(arraynums(i))) {\n                return true\n            }\n            hashset += arraynums(i)\n        }\n        return false",
    "        val setnums = arraynums.toSet\n        if (setnums.size == arraynums.size) false else true",
    "        val arraynumsSet = arraynums.toSet\n        if (arraynumsSet.size == arraynums.size) false else true",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val arraynums_sorted = arraynums.sorted\n        for (i <- 0 until arraynums_sorted.length - 1) {\n            if (arraynums_sorted(i) == arraynums_sorted(i + 1)) return true\n        }\n        return false",
    "        var hash = new HashSet[Long]()\n        for (i <- arraynums) {\n            if (hash.contains(i)) return true\n            hash.add(i)\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        var set = Set[Long]()\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set += i\n        }\n        return false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums.length == arraynums_set.size) false else true",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        var hashmap = new HashMap[Long, Boolean]\n        for (num <- arraynums) {\n            if (hashmap.contains(num)) {\n                return true\n            }\n            else {\n                hashmap += (num -> true)\n            }\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) false else true",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false"
  ]
}