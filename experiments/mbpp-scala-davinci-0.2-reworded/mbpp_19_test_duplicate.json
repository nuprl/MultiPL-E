{
  "name": "mbpp_19_test_duplicate",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    def testDuplicate(arraynums : List[Long]) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(testDuplicate((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(testDuplicate((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(testDuplicate((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var hashset = HashSet[Long]()\n        for (i <- 0 until arraynums.length) {\n            if (hashset.contains(arraynums(i))) {\n                return true\n            }\n            hashset += arraynums(i)\n        }\n        return false",
    "        val setnums = arraynums.toSet\n        if (setnums.size == arraynums.size) false else true",
    "        val arraynumsSet = arraynums.toSet\n        if (arraynumsSet.size == arraynums.size) false else true",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val arraynums_sorted = arraynums.sorted\n        for (i <- 0 until arraynums_sorted.length - 1) {\n            if (arraynums_sorted(i) == arraynums_sorted(i + 1)) return true\n        }\n        return false",
    "        var hash = new HashSet[Long]()\n        for (i <- arraynums) {\n            if (hash.contains(i)) return true\n            hash.add(i)\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        var set = Set[Long]()\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set += i\n        }\n        return false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums.length == arraynums_set.size) false else true",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        var hashmap = new HashMap[Long, Boolean]\n        for (num <- arraynums) {\n            if (hashmap.contains(num)) {\n                return true\n            }\n            else {\n                hashmap += (num -> true)\n            }\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) false else true",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false",
    "        var hash = new HashSet[Long]\n        for(i <- arraynums) {\n            if(hash.contains(i)) return true\n            hash += i\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        false",
    "        val setnums = arraynums.toSet\n        if (setnums.size == arraynums.size) false else true",
    "        val hashmap = HashMap[Long, Boolean]()\n        for (i <- arraynums) {\n            if (hashmap.contains(i)) {\n                return true\n            }\n            hashmap += (i -> true)\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false",
    "        val set = HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val hashset = HashSet[Long]()\n        for (num <- arraynums) {\n            if (hashset.contains(num)) return true\n            hashset += num\n        }\n        return false",
    "        val hash = HashSet[Long]()\n        for (i <- arraynums) {\n            if (hash.contains(i)) return true\n            else hash += i\n        }\n        false",
    "        val hashset = HashSet[Long]()\n        for (i <- arraynums) {\n            if (hashset.contains(i)) return true\n            hashset += i\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) false else true",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size != arraynums.size) true else false",
    "        val set = new HashSet[Long]\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            else set.add(i)\n        }\n        return false",
    "        val set = Set[Long]()\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set += i\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        return arraynums_set.size != arraynums.size",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            else setnums.add(num)\n        }\n        return false",
    "        val setnums = new HashSet[Long]\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val hashmap = new HashMap[Long, Int]\n        for (num <- arraynums) {\n            if (hashmap.contains(num)) return true\n            hashmap += (num -> 1)\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set += num\n        }\n        return false",
    "        val arraynums2 = arraynums.toSet\n        arraynums2.size != arraynums.size",
    "        var hash = HashSet[Long]()\n        for (i <- arraynums) {\n            if (hash.contains(i)) return true\n            hash += i\n        }\n        return false",
    "        val set = new HashSet[Long]\n        arraynums.foreach(x => if (set.contains(x)) return true else set.add(x))\n        false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val hashmap = HashMap[Long, Int]()\n        for (num <- arraynums) {\n            if (hashmap.contains(num)) return true\n            hashmap(num) = 1\n        }\n        false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums.length == arraynums_set.size) {\n            false\n        } else {\n            true\n        }",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false",
    "        var hashmap = new HashMap[Long, Int]\n        for (i <- arraynums) {\n            if (hashmap.contains(i)) {\n                return true\n            }\n            hashmap += (i -> 1)\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums.length == arraynums_set.size) false else true",
    "        var hashmap = HashMap[Long, Int]()\n        for (num <- arraynums) {\n            if (hashmap.contains(num)) return true\n            hashmap += (num -> 1)\n        }\n        false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        var set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        var hashmap = new HashMap[Long, Boolean]()\n        for (num <- arraynums) {\n            if (hashmap.contains(num)) {\n                return true\n            }\n            hashmap += (num -> true)\n        }\n        return false",
    "        val nums = arraynums.toSet\n        if (nums.size == arraynums.size) false else true",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        false",
    "        var setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val hash = new HashSet[Long]\n        for (num <- arraynums) {\n            if (hash.contains(num)) return true\n            hash.add(num)\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set.add(i)\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set.add(i)\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        val arraynums_set_size = arraynums_set.size\n        val arraynums_size = arraynums.size\n        if (arraynums_set_size != arraynums_size) true else false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        var array = arraynums.toArray\n        var map = new HashMap[Long, Int]\n        for (i <- 0 until array.length) {\n            if (map.contains(array(i))) {\n                return true\n            } else {\n                map.put(array(i), 1)\n            }\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set += num\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) false else true",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        false",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        false",
    "        var hash = new HashSet[Long]()\n        for (i <- arraynums) {\n            if (hash.contains(i)) return true\n            hash += i\n        }\n        return false",
    "        val set = Set[Long]()\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set += i\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) false else true",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]()\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            else set.add(i)\n        }\n        return false",
    "        val set = new HashSet[Long]()\n        arraynums.foreach(num => {\n            if (set.contains(num)) return true\n            set += num\n        })\n        false",
    "        var setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val arraynums_sorted = arraynums.sorted\n        for (i <- 0 until arraynums_sorted.length - 1) {\n            if (arraynums_sorted(i) == arraynums_sorted(i + 1)) return true\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        false",
    "        var set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set += num\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        return arraynums.length != arraynums_set.size",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        var hashset = HashSet[Long]()\n        for (num <- arraynums) {\n            if (hashset.contains(num)) return true\n            hashset += num\n        }\n        return false",
    "        var hash = new HashSet[Long]()\n        for (i <- arraynums) {\n            if (hash.contains(i)) return true\n            hash.add(i)\n        }\n        return false",
    "        var hashmap = new HashMap[Long, Boolean]()\n        for (num <- arraynums) {\n            if (hashmap.contains(num)) {\n                return true\n            }\n            hashmap += (num -> true)\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        false",
    "        val set = new HashSet[Long]\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set += i\n        }\n        false",
    "        val set = new HashSet[Long]\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            else set.add(i)\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        var hashmap = new HashMap[Long, Boolean]\n        for (i <- arraynums) {\n            if (hashmap.contains(i)) return true\n            else hashmap += (i -> true)\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set += i\n        }\n        false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        false",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) false else true",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val hashset = HashSet[Long]()\n        for (num <- arraynums) {\n            if (hashset.contains(num)) return true\n            hashset += num\n        }\n        return false",
    "        var hash = HashMap[Long, Int]()\n        for (num <- arraynums) {\n            if (hash.contains(num)) {\n                return true\n            }\n            else {\n                hash += (num -> 1)\n            }\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set += num\n        }\n        false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val hashmap = HashMap[Long, Int]()\n        for (num <- arraynums) {\n            if (hashmap.contains(num)) {\n                return true\n            }\n            else {\n                hashmap += (num -> 1)\n            }\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        return arraynums.length != arraynums_set.size",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) {\n            false\n        } else {\n            true\n        }",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val setnums = arraynums.toSet\n        return setnums.size != arraynums.size",
    "        val setnums = arraynums.toSet\n        return setnums.size != arraynums.size",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val setnums = arraynums.toSet\n        setnums.size != arraynums.size",
    "        val hashmap = new HashMap[Long, Int]\n        for (num <- arraynums) {\n            if (hashmap.contains(num)) {\n                return true\n            }\n            hashmap.put(num, 1)\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) return false\n        else return true",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) return false\n        else return true",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        var set = Set[Long]()\n        for(num <- arraynums) {\n            if(set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) false else true",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) {\n            return false\n        } else {\n            return true\n        }",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            else setnums += num\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set += num\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        false",
    "        var hash = HashSet[Long]()\n        for (i <- arraynums) {\n            if (hash.contains(i)) return true\n            hash += i\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) false else true",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) false else true",
    "        val arraynums_sorted = arraynums.sorted\n        for (i <- 0 until arraynums_sorted.length - 1) {\n            if (arraynums_sorted(i) == arraynums_sorted(i + 1)) return true\n        }\n        return false",
    "        var hashmap = HashMap[Long, Int]()\n        for (i <- 0 until arraynums.length) {\n            if (hashmap.contains(arraynums(i))) {\n                return true\n            } else {\n                hashmap += (arraynums(i) -> 1)\n            }\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set += num\n        }\n        false",
    "        var hash : HashSet[Long] = new HashSet[Long]\n        for (num <- arraynums) {\n            if (hash.contains(num)) return true\n            hash.add(num)\n        }\n        return false",
    "        val arraynumsSet = arraynums.toSet\n        arraynumsSet.size != arraynums.size",
    "        val set = new HashSet[Long]\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            else set.add(i)\n        }\n        false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val setnums = arraynums.toSet\n        if (setnums.size == arraynums.size) false else true",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums.add(num)\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            else set.add(i)\n        }\n        return false",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums.add(num)\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) return false\n        else return true",
    "        val setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val setnums = Set(arraynums : _*)\n        return arraynums.size != setnums.size",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val arraynumsSet = arraynums.toSet\n        if (arraynumsSet.size == arraynums.size) false else true",
    "        val arraynumsSet = arraynums.toSet\n        if (arraynumsSet.size == arraynums.size) {\n            return false\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set += num\n        }\n        false",
    "        val setnums = arraynums.toSet\n        return setnums.size != arraynums.size",
    "        val set = HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set += num\n        }\n        false",
    "        var array = arraynums.toArray\n        var hash = new HashMap[Long, Int]\n        for (i <- 0 until array.length) {\n            if (hash.contains(array(i))) return true\n            hash += (array(i) -> 1)\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set += num\n        }\n        return false",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums.length == arraynums_set.size) {\n            return false\n        }\n        else {\n            return true\n        }",
    "        var set = Set[Long]()\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set += i\n        }\n        return false",
    "        val arraynums2 = arraynums.toSet\n        if (arraynums.length == arraynums2.size) return false\n        else return true",
    "        val set = new HashSet[Long]\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set += i\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        var setnums = Set[Long]()\n        for (num <- arraynums) {\n            if (setnums.contains(num)) return true\n            setnums += num\n        }\n        return false",
    "        val set = new HashSet[Long]\n        arraynums.foreach(num => {\n            if (set.contains(num)) return true\n            else set.add(num)\n        })\n        return false",
    "        var set = Set[Long]()\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set += i\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val arraynumsSet = arraynums.toSet\n        if (arraynumsSet.size == arraynums.size) false else true",
    "        val arraynums2 = arraynums.sorted\n        for (i <- 0 until arraynums2.length - 1) {\n            if (arraynums2(i) == arraynums2(i + 1)) return true\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums_set.size == arraynums.size) false\n        else true",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false",
    "        val setnums = arraynums.toSet\n        if (setnums.size == arraynums.size) false else true",
    "        val arraynumsSet = arraynums.toSet\n        if (arraynums.length == arraynumsSet.size) false else true",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val arraynums_set = arraynums.toSet\n        if (arraynums.length == arraynums_set.size) false else true",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set.add(num)\n        }\n        return false",
    "        val set = new HashSet[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set.add(num)\n        }\n        return false",
    "        val arraynums_sorted = arraynums.sorted\n        for (i <- 0 until arraynums_sorted.length - 1) {\n            if (arraynums_sorted(i) == arraynums_sorted(i + 1)) return true\n        }\n        false",
    "        val set = Set[Long]()\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            set += i\n        }\n        return false",
    "        val arraynums2 = arraynums.toSet\n        if (arraynums2.size == arraynums.size) false else true",
    "        val hash = HashMap[Long, Int]()\n        for (num <- arraynums) {\n            if (hash.contains(num)) {\n                return true\n            } else {\n                hash += (num -> 1)\n            }\n        }\n        return false",
    "        val set = new HashSet[Long]\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            else set += num\n        }\n        false",
    "        val hashset = new HashSet[Long]\n        for (num <- arraynums) {\n            if (hashset.contains(num)) return true\n            hashset += num\n        }\n        return false",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val set = Set[Long]()\n        for (i <- arraynums) {\n            if (set.contains(i)) return true\n            else set += i\n        }\n        false",
    "        var array = arraynums.toArray\n        var array2 = arraynums.toArray\n        var result = false\n        for (i <- 0 to array.length - 1) {\n            for (j <- 0 to array2.length - 1) {\n                if (array(i) == array2(j) && i != j) {\n                    result = true\n                }\n            }\n        }\n        return result",
    "        val set = Set[Long]()\n        for (num <- arraynums) {\n            if (set.contains(num)) return true\n            set += num\n        }\n        return false",
    "        val hashset = new HashSet[Long]\n        for (num <- arraynums) {\n            if (hashset.contains(num)) return true\n            else hashset += num\n        }\n        false",
    "        var hashmap = new HashMap[Long, Int]()\n        for (i <- arraynums) {\n            if (hashmap.contains(i)) {\n                return true\n            }\n            else {\n                hashmap += (i -> 1)\n            }\n        }\n        return false"
  ]
}