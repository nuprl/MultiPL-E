{
  "name": "mbpp_161_remove_elements",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) {\n                result = i :: result\n            }\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (!list2.contains(list1(i))) result = result :+ list1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filterNot(list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filterNot(list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filterNot(list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9f3976w5.scala:13)\n\tat Problem.main(tmp9f3976w5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var list = list1\n        for (i <- list2) {\n            list = list.filter(_ != i)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8esjc2p4.scala:15)\n\tat Problem.main(tmp8esjc2p4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        val set = HashSet[Long]()\n        list2.foreach(set += _)\n        list1.filter(!set.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        val map = new HashMap[Long, Boolean]\n        for (i <- list2) map(i) = true\n        list1.filter(x => !map.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) {\n                result = i :: result\n            }\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) {\n                result = i :: result\n            }\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9f3976w5.scala:13)\n\tat Problem.main(tmp9f3976w5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8esjc2p4.scala:15)\n\tat Problem.main(tmp8esjc2p4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var newList = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) newList = i :: newList\n        }\n        newList.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        val set = HashSet[Long]()\n        for (x <- list2) set += x\n        val result = ListBuffer[Long]()\n        for (x <- list1) if (!set.contains(x)) result += x\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        def remove(list1 : List[Long], list2 : List[Long], result : List[Long]) : List[Long] = {\n            if (list1.isEmpty) result\n            else if (list2.contains(list1.head)) remove(list1.tail, list2, result)\n            else remove(list1.tail, list2, result :+ list1.head)\n        }\n        remove(list1, list2, List())\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9f3976w5.scala:13)\n\tat Problem.main(tmp9f3976w5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        val set = Set[Long]() ++ list2\n        list1.filter(!set.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        val set = new HashSet[Long]\n        list2.foreach(x => set += x)\n        list1.filter(x => !set.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (x <- list1) {\n            if (!list2.contains(x)) result = x :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt11uu3ze.scala:13)\n\tat Problem.main(tmpt11uu3ze.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(e => !list2.contains(e))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(!list2.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.filter(x => !list2.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}