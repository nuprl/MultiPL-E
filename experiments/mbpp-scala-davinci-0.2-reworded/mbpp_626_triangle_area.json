{
  "name": "mbpp_626_triangle_area",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    def triangleArea(r : Long) : Option[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((-1l)).equals(None));\n    assert(triangleArea((0l)).equals(0l));\n    assert(triangleArea((2l)).equals(4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val a = r * r * sqrt(3) / 4\n        if (a.isWhole) Some(a.toLong) else None",
    "        val h = r / 2\n        val a = h * h\n        val b = r * r\n        val c = sqrt(a + b).toLong\n        val s = (r + c + r) / 2\n        val area = sqrt(s * (s - r) * (s - c) * (s - r)).toLong\n        Some(area)",
    "        val a = r * r * sqrt(3) / 4\n        if (a.isWhole()) Some(a.toLong) else None",
    "        val a = r * r * sqrt(3) / 4\n        if (a.isValidLong) Some(a.toLong) else None",
    "        val a = r * r * sqrt(3) / 4\n        if (a > 0) Some(a.toLong) else None",
    "        val a = r * 2\n        val b = a / 2\n        val c = sqrt(a * a + b * b)\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area.isNaN) None else Some(area.toLong)",
    "        val s = r * 2\n        val h = sqrt(s * (s - r) * (s - r) * (s - r)).toLong\n        if (h == 0) None else Some(h)",
    "        val a = r.toDouble\n        val b = a / 2\n        val c = sqrt(a * a - b * b)\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area.isNaN) None else Some(area.toLong)",
    "        // The area of the largest triangle inscribed in a semicircle with radius r is given by the formula A = r^2 * sqrt(3) / 4.\n        val area = r * r * sqrt(3) / 4\n        if (area > 0) Some(area.toLong) else None",
    "        val h = r * sqrt(3) / 2\n        val a = r * r * sqrt(3) / 4\n        if (a > Long.MaxValue) None else Some(a.toLong)",
    "        val x = r.toDouble\n        val y = x / 2\n        val z = sqrt(x * x - y * y)\n        val area = (x * y * z) / 2\n        if (area.isNaN) None else Some(area.toLong)",
    "        val a = r.toDouble\n        val b = a / 2\n        val c = sqrt(a * a - b * b)\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area.isNaN) None else Some(area.toLong)",
    "        val a = r * r * sqrt(3) / 4\n        val b = r * r * sqrt(3) / 2\n        val c = r * r * sqrt(3)\n        val d = r * r * sqrt(3) * 2\n        val e = r * r * sqrt(3) * 4\n        val f = r * r * sqrt(3) * 8\n        val g = r * r * sqrt(3) * 16\n        val h = r * r * sqrt(3) * 32\n        val i = r * r * sqrt(3) * 64\n        val j = r * r * sqrt(3) * 128\n        val k = r * r * sqrt(3) * 256\n        val l = r * r * sqrt(3) * 512\n        val m = r * r * sqrt(3) * 1024\n        val n = r * r * sqrt(3) * 2048\n        val o = r * r * sqrt(3) * 4096\n        val p = r * r * sqrt(3) * 8192\n        val q = r * r * sqrt(3) * 16384\n        val s = r * r * sqrt(3) * 32768\n        val t = r * r * sqrt(3) * 65536\n        val u = r * r * sqrt(3) * 131072\n        val v = r * r * sqrt(3) * 262144\n        val w = r * r * sqrt(3) * 524288\n        val x = r * r * sqrt(3) * 1048576\n        val y = r * r * sqrt(3) * 2097152\n        val z = r * r * sqrt(3) * 4194304\n        val aa = r * r * sqrt(3) * 8388608\n        val ab = r * r * sqrt(3) * 16777216\n        val ac = r * r * sqrt(3) * 33554432\n        val ad = r * r * sqrt(3) * 67108864\n        val ae = r * r * sqrt(3) * 134217728\n        val",
    "        val a = r / 2\n        val b = r - a\n        val c = r\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area.isNaN) None else Some(area.toLong)",
    "        val a = r * r * sqrt(3) / 4\n        if (a.isValidLong) Some(a.toLong) else None",
    "        val a = r.toDouble\n        val b = r.toDouble\n        val c = 2 * r.toDouble\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area.isNaN) None else Some(area.toLong)",
    "        val a = r * r * sqrt(3) / 4\n        if (a.isValidLong) Some(a.toLong) else None",
    "        val a = r.toDouble\n        val b = a / 2\n        val c = sqrt(a * a - b * b)\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area.isNaN) None else Some(area.toLong)",
    "        val r2 = r * r\n        val r3 = r2 * r\n        val r4 = r3 * r\n        val r5 = r4 * r\n        val r6 = r5 * r\n        val r7 = r6 * r\n        val r8 = r7 * r\n        val r9 = r8 * r\n        val r10 = r9 * r\n        val r11 = r10 * r\n        val r12 = r11 * r\n        val r13 = r12 * r\n        val r14 = r13 * r\n        val r15 = r14 * r\n        val r16 = r15 * r\n        val r17 = r16 * r\n        val r18 = r17 * r\n        val r19 = r18 * r\n        val r20 = r19 * r\n        val r21 = r20 * r\n        val r22 = r21 * r\n        val r23 = r22 * r\n        val r24 = r23 * r\n        val r25 = r24 * r\n        val r26 = r25 * r\n        val r27 = r26 * r\n        val r28 = r27 * r\n        val r29 = r28 * r\n        val r30 = r29 * r\n        val r31 = r30 * r\n        val r32 = r31 * r\n        val r33 = r32 * r\n        val r34 = r33 * r\n        val r35 = r34 * r\n        val r36 = r35 * r\n        val r37 = r36 * r\n        val r38 = r37 * r\n        val r39 = r38 * r\n        val r40 = r39 * r\n        val r41 = r40 * r\n        val r42 = r41 * r\n        val r43 = r42 * r\n        val r44 = r43 * r\n        val r45 = r44 * r\n        val r46 = r45 * r\n        val r47 = r46 * r\n        val r48 = r47 * r\n        val r49 = r48 * r\n        val r50 = r49 * r\n        val r51 = r50 * r\n        val r52 = r51 * r\n        val",
    "        val a = r * r * sqrt(3) / 4\n        if (a.isValidLong) Some(a.toLong) else None"
  ]
}