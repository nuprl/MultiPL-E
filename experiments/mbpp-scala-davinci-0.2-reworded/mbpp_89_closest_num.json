{
  "name": "mbpp_89_closest_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the closest smaller number than n.\n    def closestNum(N : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(closestNum((11l)) == (10l));\n    assert(closestNum((7l)) == (6l));\n    assert(closestNum((12l)) == (11l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = N.toString.toList\n        val n1 = n.map(x => if (x == '0') '9' else (x - 1).toChar)\n        val n2 = n.map(x => if (x == '9') '0' else (x + 1).toChar)\n        val d1 = (n1.mkString.toLong - N).abs\n        val d2 = (n2.mkString.toLong - N).abs\n        if (d1 < d2) n1.mkString.toLong else n2.mkString.toLong",
    "        val s = N.toString\n        val n = s.length\n        val sb = new StringBuilder\n        var i = 0\n        while (i < n - 1) {\n            if (s(i) > s(i + 1)) {\n                sb.append(s.substring(0, i) + s(i + 1))\n                var j = i + 1\n                while (j < n) {\n                    sb.append(s(i))\n                    j += 1\n                }\n                return sb.toString.toLong\n            }\n            i += 1\n        }\n        return N",
    "        val digits = N.toString.toList.map(_.asDigit)\n        val n = digits.length\n        val (i, j) = (0 until n).find(i => digits(i) > digits((i + 1) % n)).getOrElse(-1, -1)\n        if (i == -1) return -1\n        val temp = digits(i)\n        digits(i) = digits(j)\n        digits(j) = temp\n        digits.mkString.toLong",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        N - (1 << count)",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            n >>= 1\n        }\n        N - (1 << i)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        else return N - (1 << (i + j - 1))",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                i += 1\n                break\n            }\n        }\n        return N - (1 << i)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        return N - (1 << (i + j - 1))",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        val k = i + j\n        var result = 0L\n        for (i <- 0 until k) {\n            if (i < j) result = result * 2 + 1\n            else result = result * 2\n        }\n        result",
    "        val n = N.toString\n        val len = n.length\n        val sb = new StringBuilder\n        var i = 0\n        while (i < len - 1) {\n            if (n(i) > n(i + 1)) {\n                sb.append(n.substring(0, i))\n                sb.append(n(i + 1))\n                sb.append(n(i))\n                sb.append(n.substring(i + 2))\n                return sb.toString.toLong\n            }\n            i += 1\n        }\n        return -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        if (i == 0) return -1\n        var res = N\n        res &= ~(1 << (i + j))\n        res |= (1 << (i + j - 1))\n        res |= ((1 << (i - 1)) - 1)\n        return res",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        (1L << (i + j)) - 1",
    "        val s = N.toString\n        val l = s.length\n        val m = s.substring(0, l - 1)\n        val n = s.substring(l - 1, l)\n        val d = n.toInt\n        if (d == 0) {\n            val x = m.toLong\n            return x - 1\n        }\n        val x = m + (d - 1).toString\n        return x.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        return pow(2, i + j - 1).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        val res = N - (1 << (i + j - 1))\n        res",
    "        val n = N.toString\n        val n_len = n.length\n        val n_arr = n.toCharArray\n        var i = n_len - 1\n        while (i > 0) {\n            if (n_arr(i) < n_arr(i - 1)) {\n                val temp = n_arr(i)\n                n_arr(i) = n_arr(i - 1)\n                n_arr(i - 1) = temp\n                return n_arr.mkString.toLong\n            }\n            i -= 1\n        }\n        return -1",
    "        var n = N\n        var count = 0\n        while (n % 2 == 0) {\n            count += 1\n            n /= 2\n        }\n        if (count == 0) return N - 1\n        var result = N\n        for (i <- 1 to count) {\n            result /= 2\n            result *= 2\n            result += 1\n        }\n        return result",
    "        var n = N\n        var result = 0L\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                result |= (1 << count)\n            }\n            n >>= 1\n            count += 1\n        }\n        result",
    "        val s = N.toString\n        val n = s.length\n        val l = s.last\n        val ld = l.toString.toInt\n        if (ld == 0) return -1\n        val p = s.substring(0, n - 1)\n        val pd = p.toInt\n        val pd1 = pd - 1\n        val pd1s = pd1.toString\n        val pd1sl = pd1s.length\n        val pd1sld = pd1s.last\n        val pd1sldd = pd1sld.toString.toInt\n        val pd1sldd1 = pd1sldd - 1\n        val pd1sldd1s = pd1sldd1.toString\n        val pd1sldd1sl = pd1sldd1s.length\n        val pd1sldd1sl1 = pd1sldd1sl + 1\n        val pd1sldd1sl1s = \"9\" * pd1sldd1sl1\n        val pd1sldd1sl1sl = pd1sldd1sl1s.length\n        val pd1sldd1sl1sll = pd1sldd1sl1s.last\n        val pd1sldd1sl1slld = pd1sldd1sl1sll.toString.toInt\n        val pd1sldd1sl1slld1 = pd1sldd1sl1slld + 1\n        val pd1sldd1sl1slld1s = pd1sldd1sl1slld1.toString\n        val pd1sldd1sl1slld1sl = pd1sldd1sl1slld1s.length\n        val pd1sldd1sl1slld1sll = pd1sldd1sl1slld1s.last\n        val pd1sldd1sl1slld1slld = pd1sldd1sl1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        var result = N\n        result &= ~(1 << (i + j))\n        result |= (1 << (i + j - 1))\n        result -= 1\n        result |= ((1 << (j - 1)) - 1)\n        return result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        else return N - (1 << (i - 1)) - (1 << j) + 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                if (i == 0) {\n                    i = k\n                } else {\n                    j = k\n                }\n            }\n            n >>= 1\n            k += 1\n        }\n        var result = N\n        result ^= (1 << i)\n        result ^= (1 << j)\n        result",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0 && a(i) >= a(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val temp = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = temp\n        j = n - 1\n        while (i < j) {\n            val temp = a(i)\n            a(i) = a(j)\n            a(j) = temp\n            i += 1\n            j -= 1\n        }\n        a.mkString.toLong",
    "        val s = N.toString\n        val l = s.length\n        val lst = s.toList\n        val lst2 = lst.zipWithIndex\n        val lst3 = lst2.filter(x => x._1 != '0')\n        val lst4 = lst3.map(x => (x._1, x._2, x._1.toString.toInt - '0'.toInt))\n        val lst5 = lst4.sortBy(x => x._3)\n        val lst6 = lst5.filter(x => x._3 < lst5(0)._3)\n        val lst7 = lst6.sortBy(x => x._2)\n        val lst8 = lst7.map(x => x._1)\n        val lst9 = lst8.mkString\n        val lst10 = lst9.toLong\n        val lst11 = lst10.toString\n        val lst12 = lst11.toList\n        val lst13 = lst12.zipWithIndex\n        val lst14 = lst13.filter(x => x._2 != lst5(0)._2)\n        val lst15 = lst14.map(x => x._1)\n        val lst16 = lst15.mkString\n        val lst17 = lst16.toLong\n        val lst18 = lst17.toString\n        val lst19 = lst18.toList\n        val lst20 = lst19.zipWithIndex\n        val lst21 = lst20.filter(x => x._2 != lst5(0)._2)\n        val lst22 = lst21.map(x => x._1)\n        val lst23 = lst22.mkString\n        val lst24 = lst23.toLong\n        val lst25 = lst24.toString\n        val lst26 = lst25.toList\n        val lst27 = lst26.zipWithIndex\n        val lst28 = lst27.filter(x => x._2 != lst5(0)._2)\n        val",
    "        val s = N.toString\n        val n = s.length\n        var i = n - 1\n        while (i > 0) {\n            if (s(i) > s(i - 1)) {\n                val t = s.substring(0, i - 1) + s(i) + s.substring(i + 1, n)\n                return t.toLong\n            }\n            i -= 1\n        }\n        return -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var result = N\n        result &= ~((1 << i) - 1)\n        result |= (1 << (i - 1)) - 1\n        result",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        var result = N\n        while (result > 0) {\n            if ((result & 1) == 1) {\n                if (count == 1) return result\n                count -= 1\n            }\n            result >>= 1\n        }\n        return -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        val m = (1L << (i + j)) - 1\n        m ^ ((1L << j) - 1)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                j = i\n            }\n            i += 1\n            n >>= 1\n        }\n        return N & ~(1 << j)",
    "        var n = N\n        var count = 0\n        while (n != 0) {\n            if ((n & 1) == 1) count += 1\n            n = n >> 1\n        }\n        if (count == 1) return N - 1\n        var i = 0\n        while ((N & (1 << i)) == 0) i += 1\n        var j = i + 1\n        while ((N & (1 << j)) != 0) j += 1\n        return N - (1 << j) + (1 << i)",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if (n % 10 == 0) count += 1\n            n /= 10\n        }\n        N - pow(10, count).toLong",
    "        val s = N.toString\n        val l = s.length\n        val m = s.substring(0, l - 1).toLong\n        val r = s.substring(l - 1, l).toLong\n        if (r == 0) m\n        else if (r == 1) m - 1\n        else m + 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n != 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        var k = i + j\n        var res = 0L\n        while (k != 0) {\n            res <<= 1\n            if (k > i) {\n                res |= 1\n                k -= 1\n            } else {\n                k -= 1\n            }\n        }\n        res",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return ((1L << (i + j)) - 1) ^ ((1L << j) - 1)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        val s = N.toString\n        val n = s.length\n        val l = s.last\n        val p = s.init\n        if (l == '0') {\n            if (p.length == 0) return -1\n            val q = p.init\n            val r = p.last\n            if (r == '1') return -1\n            val t = (q + (r.toInt - 1).toChar).toLong\n            return t * pow(10, n - 2).toLong\n        }\n        val t = (p + (l.toInt - 1).toChar).toLong\n        return t * pow(10, n - 1).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (i > j) return N - pow(2, i).toLong\n        else return N - pow(2, j).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        val n = N.toString\n        val l = n.length\n        val s = n.toCharArray\n        var i = l - 1\n        while (i > 0 && s(i) >= s(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = l - 1\n        while (s(j) >= s(i - 1)) j -= 1\n        val t = s(i - 1)\n        s(i - 1) = s(j)\n        s(j) = t\n        j = l - 1\n        while (i < j) {\n            val t = s(i)\n            s(i) = s(j)\n            s(j) = t\n            i += 1\n            j -= 1\n        }\n        s.mkString.toLong",
    "        val s = N.toString\n        val n = s.length\n        val l = s.last\n        if (l == '0') {\n            val m = s.substring(0, n - 1)\n            return m.toLong\n        }\n        val m = s.substring(0, n - 1) + (l.toInt - 1).toChar\n        return m.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        else return N - (1 << (i + j - 1))",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        val s = N.toString\n        val n = s.length\n        if (n == 1) return -1\n        val l = s.substring(0, n - 1)\n        val r = s.substring(n - 1, n)\n        val ln = l.toLong\n        val rn = r.toLong\n        if (rn == 0) return closestNum(ln)\n        if (rn == 1) return ln\n        if (rn == 5) return ln * 10 + 4\n        return ln * 10 + rn - 1",
    "        val s = N.toString\n        val n = s.length\n        val m = s.toCharArray\n        var i = n - 1\n        while (i > 0 && m(i - 1) <= m(i)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (m(j) >= m(i - 1)) j -= 1\n        val t = m(i - 1)\n        m(i - 1) = m(j)\n        m(j) = t\n        j = n - 1\n        while (i < j) {\n            val t = m(i)\n            m(i) = m(j)\n            m(j) = t\n            i += 1\n            j -= 1\n        }\n        return m.mkString.toLong",
    "        var n = N\n        var c0 = 0\n        var c1 = 0\n        while (n > 0) {\n            if (n % 2 == 0) c0 += 1\n            else c1 += 1\n            n /= 2\n        }\n        if (c1 == 0) return -1\n        if (c0 == 0) return N - 1\n        var result = N\n        var i = 0\n        while (i < c0) {\n            result = result & ~(1 << i)\n            i += 1\n        }\n        i = 0\n        while (i < c1) {\n            result = result | (1 << i)\n            i += 1\n        }\n        return result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var result = N\n        result &= ~((1 << i) - 1)\n        result |= (1 << (i - 1)) - 1\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (pow(2, i) * pow(2, j - 1) - 1).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n != 0) {\n            if ((n & 1) == 1) {\n                j = i\n            }\n            i += 1\n            n >>= 1\n        }\n        N & ~(1 << j)",
    "        val str = N.toString\n        val len = str.length\n        val sb = new StringBuilder\n        var i = 0\n        while (i < len) {\n            if (i == len - 1) sb.append(str(i))\n            else {\n                if (str(i) > str(i + 1)) {\n                    sb.append(str(i) - 1)\n                    for (j <- i + 1 until len) sb.append(\"9\")\n                    return sb.toString.toLong\n                } else sb.append(str(i))\n            }\n            i += 1\n        }\n        sb.toString.toLong",
    "        val s = N.toString\n        val n = s.length\n        var i = 0\n        while (i < n - 1 && s(i) <= s(i + 1)) i += 1\n        if (i == n - 1) return -1\n        var j = i + 1\n        while (j < n && s(j) < s(i)) j += 1\n        j -= 1\n        val sb = new StringBuilder(s)\n        sb.setCharAt(i, s(j))\n        sb.setCharAt(j, s(i))\n        return sb.toString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var m = 1L\n        for (k <- 0 until i + j) {\n            if (k == i) m <<= 1\n            else m = (m << 1) + 1\n        }\n        m",
    "        var n = N\n        var i = 0\n        while (n % 2 == 0) {\n            n /= 2\n            i += 1\n        }\n        if (i == 0) return n / 2\n        else return N / pow(2, i + 1).toLong",
    "        var n = N\n        var result = 0L\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                result += pow(10, count).toLong\n            }\n            n >>= 1\n            count += 1\n        }\n        result",
    "        var n = N\n        var c = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                c += 1\n            }\n            n >>= 1\n        }\n        var m = N\n        while (m > 0) {\n            if ((m & 1) == 1) {\n                c -= 1\n            }\n            if (c == 0) return m\n            m >>= 1\n        }\n        return 0",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return ((1L << (i + j)) - 1) ^ ((1L << j) - 1)",
    "        var n = N\n        var cnt = 0\n        while (n % 2 == 0) {\n            n /= 2\n            cnt += 1\n        }\n        if (cnt == 0) return N - 1\n        else return N - pow(2, cnt).toLong",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                return (N & ((1 << i) - 1))\n            }\n        }\n        0",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if (n % 10 == 0) {\n                n -= 1\n                i += 1\n            }\n            else n /= 10\n        }\n        N - i",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        if (count == 1) return N\n        var i = 0\n        while (i < 64) {\n            if (((N >> i) & 1) == 1) {\n                var j = i + 1\n                while (j < 64) {\n                    if (((N >> j) & 1) == 0) {\n                        var result = N\n                        result ^= (1L << i)\n                        result ^= (1L << j)\n                        return result\n                    }\n                    j += 1\n                }\n            }\n            i += 1\n        }\n        -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << i) + (1L << (j - 1)) - 1",
    "        val s = N.toString\n        val n = s.length\n        val sb = new StringBuilder\n        for (i <- 0 until n) {\n            if (s(i) != '0') {\n                sb.append(s(i))\n                for (j <- 0 until n - i - 1) sb.append('9')\n                return sb.toString.toLong\n            }\n        }\n        return 0",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n -= 1\n                n >>= 1\n                i += 1\n            } else {\n                n >>= 1\n                i += 1\n            }\n        }\n        return N - (1 << i)",
    "        var n = N\n        var c = 0\n        while (n > 0) {\n            if ((n & 1) == 1) c += 1\n            n >>= 1\n        }\n        if (c == 1) return N\n        var i = 0\n        while ((N & (1 << i)) == 0) i += 1\n        var j = i + 1\n        while ((N & (1 << j)) != 0) j += 1\n        N ^= ((1 << i) | (1 << j))\n        N",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return ((1 << (i + j)) - 1) ^ ((1 << j) - 1)",
    "        val s = N.toString\n        val l = s.length\n        val m = s.substring(0, l - 1) + (s.charAt(l - 1).asDigit - 1).toString\n        val r = s.substring(0, l - 1) + (s.charAt(l - 1).asDigit + 1).toString\n        val ml = m.toLong\n        val rl = r.toLong\n        if (ml < 0) return rl\n        if (abs(N - ml) < abs(N - rl)) ml else rl",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var m = 1L\n        for (k <- 0 until i) m = (m << 1) + 1\n        m << j",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        var result = N\n        result &= ~(1 << (i + j))\n        result |= (1 << (i + j - 1))\n        result |= ((1 << (i - 1)) - 1)\n        return result",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        var result = N\n        var i = 0\n        while (i < count) {\n            result |= (1 << i)\n            i += 1\n        }\n        while (i < 64) {\n            result &= ~(1 << i)\n            i += 1\n        }\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var k = i + j\n        var res = (1L << k) - 1\n        res ^= (1L << (k - j)) - 1\n        res",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var res = 0L\n        for (k <- 0 until i) res = (res << 1) + 1\n        res <<= j\n        res",
    "        var n = N\n        var c = 0\n        while (n > 0) {\n            if ((n & 1) == 1) c += 1\n            n >>= 1\n        }\n        var m = N\n        while (m > 0) {\n            if ((m & 1) == 1) {\n                if (c == 1) return m\n                c -= 1\n            }\n            m >>= 1\n        }\n        -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var result = N\n        result &= ~((1 << i) - 1)\n        result |= (1 << (i - 1)) - 1\n        result",
    "        val s = N.toString\n        val l = s.length\n        val a = s.toCharArray\n        var i = l - 1\n        while (i > 0 && a(i) >= a(i - 1)) {\n            i -= 1\n        }\n        if (i == 0) return -1\n        var j = l - 1\n        while (a(j) >= a(i - 1)) {\n            j -= 1\n        }\n        val t = a(j)\n        a(j) = a(i - 1)\n        a(i - 1) = t\n        j = l - 1\n        while (i < j) {\n            val t = a(i)\n            a(i) = a(j)\n            a(j) = t\n            i += 1\n            j -= 1\n        }\n        return a.mkString.toLong",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0 && a(i) >= a(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val tmp = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = tmp\n        j = n - 1\n        while (i < j) {\n            val tmp = a(i)\n            a(i) = a(j)\n            a(j) = tmp\n            i += 1\n            j -= 1\n        }\n        a.mkString.toLong",
    "        var n = N\n        var i = 0\n        while (n != 0) {\n            if ((n & 1) == 1) {\n                if ((n & 2) == 0) {\n                    return N - (1 << i)\n                } else {\n                    return N - (1 << (i + 1))\n                }\n            }\n            i += 1\n            n >>= 1\n        }\n        return -1",
    "        val n = N.toString\n        val len = n.length\n        val a = n.toCharArray\n        var i = len - 1\n        while (i > 0 && a(i - 1) <= a(i)) i -= 1\n        if (i == 0) return -1\n        var j = len - 1\n        while (j > 0 && a(j) >= a(i - 1)) j -= 1\n        val temp = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = temp\n        j = len - 1\n        while (i < j) {\n            val temp = a(i)\n            a(i) = a(j)\n            a(j) = temp\n            i += 1\n            j -= 1\n        }\n        a.mkString.toLong",
    "        val Nstr = N.toString\n        var i = Nstr.length - 1\n        while (i > 0 && Nstr(i) >= Nstr(i - 1)) i -= 1\n        if (i == 0) return -1\n        val j = Nstr.length - 1\n        while (Nstr(j) >= Nstr(i - 1)) j -= 1\n        val Nstr2 = Nstr.substring(0, i - 1) + Nstr(j) + Nstr.substring(i, j) + Nstr(i - 1) + Nstr.substring(j + 1)\n        Nstr2.toLong",
    "        val s = N.toString\n        val l = s.length\n        val a = s.toCharArray\n        var i = l - 1\n        while (i > 0 && a(i) >= a(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = l - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val t = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = t\n        val b = a.slice(i, l).sorted\n        val c = a.slice(0, i) ++ b\n        c.mkString.toLong",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0 && a(i) >= a(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val t = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = t\n        j = n - 1\n        while (i < j) {\n            val t = a(i)\n            a(i) = a(j)\n            a(j) = t\n            i += 1\n            j -= 1\n        }\n        a.mkString(\"\").toLong",
    "        val n = N.toString\n        val n1 = n.substring(0, n.length - 1)\n        val n2 = n.substring(0, n.length - 2) + n(n.length - 1)\n        val n3 = n.substring(0, n.length - 2) + (n(n.length - 1) - 1)\n        val n4 = n.substring(0, n.length - 2) + (n(n.length - 1) - 2)\n        val n5 = n.substring(0, n.length - 2) + (n(n.length - 1) - 3)\n        val n6 = n.substring(0, n.length - 2) + (n(n.length - 1) - 4)\n        val n7 = n.substring(0, n.length - 2) + (n(n.length - 1) - 5)\n        val n8 = n.substring(0, n.length - 2) + (n(n.length - 1) - 6)\n        val n9 = n.substring(0, n.length - 2) + (n(n.length - 1) - 7)\n        val n10 = n.substring(0, n.length - 2) + (n(n.length - 1) - 8)\n        val n11 = n.substring(0, n.length - 2) + (n(n.length - 1) - 9)\n        val n12 = n.substring(0, n.length - 2) + (n(n.length - 1) - 10)\n        val n13 = n.substring(0, n.length - 2) + (n(n.length - 1) - 11)\n        val n14 = n.substring(0, n.length - 2) + (n(n.length - 1) - 12)\n        val n15 = n.substring(0, n.length - 2) + (n(n.length - 1) - 13)\n        val n16 = n.substring(0, n.length - 2) + (n(n.length - 1) - 14)\n        val n17 = n.",
    "        var n = N\n        var count = 0\n        while (n % 2 == 0) {\n            n /= 2\n            count += 1\n        }\n        if (count == 0) return N - 1\n        var m = 1\n        for (i <- 1 to count) m *= 2\n        return N - m",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        val s = N.toString\n        val l = s.length\n        val m = s.substring(0, l - 1)\n        val r = s.substring(l - 1, l)\n        val k = r.toInt\n        if (k == 0) {\n            return (m + (k + 1).toString).toLong\n        }\n        else if (k == 1) {\n            return (m + (k - 1).toString).toLong\n        }\n        else {\n            val a = (m + (k - 1).toString).toLong\n            val b = (m + (k + 1).toString).toLong\n            if (abs(a - N) < abs(b - N)) return a\n            else return b\n        }",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (i > j) {\n            var k = 0\n            var m = N\n            while (m > 0) {\n                if (m % 2 == 0) k += 1\n                else {\n                    if (k > 0) {\n                        var p = 1L\n                        for (l <- 0 until k) p *= 2\n                        return N - p\n                    }\n                }\n                m /= 2\n            }\n        } else {\n            var k = 0\n            var m = N\n            while (m > 0) {\n                if (m % 2 == 1) k += 1\n                else {\n                    if (k > 0) {\n                        var p = 1L\n                        for (l <- 0 until k) p *= 2\n                        return N - p\n                    }\n                }\n                m /= 2\n            }\n        }\n        return -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var res = 0L\n        for (k <- 0 until i) res = res * 2 + 1\n        for (k <- 0 until j - 1) res = res * 2 + 0\n        res",
    "        val digits = N.toString.toCharArray.map(_.asDigit)\n        var i = digits.length - 1\n        while (i > 0 && digits(i) >= digits(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = digits.length - 1\n        while (digits(j) >= digits(i - 1)) j -= 1\n        val temp = digits(i - 1)\n        digits(i - 1) = digits(j)\n        digits(j) = temp\n        j = digits.length - 1\n        while (i < j) {\n            val temp = digits(i)\n            digits(i) = digits(j)\n            digits(j) = temp\n            i += 1\n            j -= 1\n        }\n        digits.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        var result = N\n        result &= ~(1 << i)\n        result |= (1 << (i - 1))\n        result |= (1 << (j - 1))\n        result",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if (n % 10 == 0) {\n                n = n / 10\n                i += 1\n            }\n            else {\n                n = n - 1\n                i += 1\n            }\n        }\n        N - i",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        var res = N\n        res &= ~((1 << i) - 1)\n        res |= (1 << (i - 1)) - 1\n        res",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var result = (1L << (i + j)) - 1\n        result ^= (1L << j) - 1\n        result",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            n /= 2\n        }\n        return pow(2, i).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        return pow(2, i + j - 1).toLong",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if (n % 10 == 0) count += 1\n            n /= 10\n        }\n        N - count",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        (1L << i) + (1L << (j - 1)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        var k = 0\n        var m = 0\n        while (k < i || m < j) {\n            if (k < i) {\n                k += 1\n                print(0)\n            }\n            if (m < j) {\n                m += 1\n                print(1)\n            }\n        }\n        println\n        return 0",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var c = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                c += 1\n            }\n            n >>= 1\n        }\n        if (c == 1) {\n            return N\n        }\n        var i = 0\n        while (i < 63) {\n            if (((N >> i) & 1) == 1) {\n                return N - (1L << i)\n            }\n            i += 1\n        }\n        return -1",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                count += 1\n            }\n            n >>= 1\n        }\n        if (count == 1) {\n            return -1\n        }\n        var result = N\n        var i = 0\n        while (i < 64) {\n            if (((N >> i) & 1) == 1) {\n                result = N ^ (1L << i)\n                break\n            }\n            i += 1\n        }\n        i += 1\n        while (i < 64) {\n            if (((N >> i) & 1) == 0) {\n                result = result | (1L << i)\n                break\n            }\n            i += 1\n        }\n        return result",
    "        val s = N.toString\n        val n = s.length\n        val sb = new StringBuilder\n        var i = 0\n        while (i < n - 1) {\n            if (s(i) > s(i + 1)) {\n                sb.append(s.substring(0, i))\n                sb.append(s(i) - 1)\n                for (j <- i + 1 until n) sb.append(9)\n                return sb.toString.toLong\n            }\n            i += 1\n        }\n        N",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            n >>= 1\n        }\n        return N & ((1 << i) - 1)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n            k += 1\n        }\n        var m = 1L << (k - 1)\n        m += 1L << (i + j - 1)\n        m -= 1\n        return m",
    "        val s = N.toString\n        val n = s.length\n        val p = pow(10, n - 1).toLong\n        val d = s(0).asDigit\n        if (d == 1) {\n            val t = s.substring(1).toLong\n            val t1 = t + p - 1\n            if (t1 < N) t1 else t\n        } else {\n            val t = s.substring(1).toLong\n            val t1 = t + p - 1\n            val t2 = t + p - (d - 1) * p\n            if (t1 < N) t1 else t2\n        }",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        (N - pow(2, count).toLong)",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                i += 1\n                break\n            }\n        }\n        return N - (1 << i)",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            }\n            else {\n                break\n            }\n            n >>= 1\n        }\n        return N & ((~0) << i)",
    "        val s = N.toString\n        var i = s.length - 1\n        while (i > 0 && s(i) <= s(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = s.length - 1\n        while (s(j) >= s(i - 1)) j -= 1\n        val sb = new StringBuilder(s)\n        sb.setCharAt(i - 1, s(j))\n        sb.setCharAt(j, s(i - 1))\n        var k = i\n        while (k < s.length - 1) {\n            k += 1\n            var l = s.length - 1\n            while (l > k && s(l) >= s(k)) l -= 1\n            if (l > k) {\n                sb.setCharAt(k, s(l))\n                sb.setCharAt(l, s(k))\n                return sb.toString.toLong\n            }\n        }\n        return sb.toString.toLong",
    "        val s = N.toString\n        val l = s.length\n        val a = s.toCharArray\n        for (i <- l - 1 to 1 by -1) {\n            if (a(i) < a(i - 1)) {\n                val t = a(i)\n                a(i) = a(i - 1)\n                a(i - 1) = t\n                return a.mkString.toLong\n            }\n        }\n        return -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        val n = N.toBinaryString\n        val n1 = n.substring(0, n.length - 1) + \"1\"\n        val n2 = n.substring(0, n.length - 1) + \"0\"\n        val n1Num = BigInt(n1, 2).toLong\n        val n2Num = BigInt(n2, 2).toLong\n        if (abs(N - n1Num) < abs(N - n2Num)) n1Num else n2Num",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (i > j) {\n            var k = 0\n            while (k < i - j) {\n                N += (1 << k)\n                k += 1\n            }\n        } else {\n            var k = 0\n            while (k < j - i) {\n                N -= (1 << k)\n                k += 1\n            }\n        }\n        N",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var k = i + j\n        var m = 1L << k\n        m -= 1\n        m ^ ((1L << j) - 1)",
    "        val s = N.toString\n        val l = s.length\n        val d = s(l - 1).asDigit\n        if (d == 0) N - 1\n        else {\n            val sb = new StringBuilder\n            for (i <- 0 until l - 1) sb.append(s(i))\n            sb.append(d - 1)\n            sb.toString.toLong\n        }",
    "        var n = N\n        var count = 0\n        while (n != 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        return N - (1 << count)",
    "        var n = N\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n       ",
    "        val n = N.toString.toList\n        val l = n.length\n        val m = n.map(_.toString.toInt).toArray\n        var i = l - 1\n        while (i > 0 && m(i) <= m(i - 1)) i -= 1\n        if (i == 0) -1\n        else {\n            var j = l - 1\n            while (m(j) >= m(i - 1)) j -= 1\n            val t = m(j)\n            m(j) = m(i - 1)\n            m(i - 1) = t\n            val r = m.slice(0, i).mkString.toLong\n            val s = m.slice(i, l).sorted.mkString.toLong\n            r * pow(10, l - i).toLong + s\n        }",
    "        val s = N.toString\n        val n = s.length\n        val m = (0 until n).map(i => s(i) - '0').toArray\n        var i = n - 2\n        while (i >= 0 && m(i) >= m(i + 1)) i -= 1\n        if (i == -1) return -1\n        var j = n - 1\n        while (m(j) >= m(i)) j -= 1\n        val t = m(i)\n        m(i) = m(j)\n        m(j) = t\n        val r = m.slice(0, i + 1) ++ m.slice(i + 1, n).reverse\n        r.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        val s = N.toString\n        val l = s.length\n        val lst = s.toList\n        val lst2 = lst.map(x => x.toString.toInt)\n        val lst3 = lst2.zipWithIndex\n        val lst4 = lst3.sortBy(x => x._1)\n        val lst5 = lst4.map(x => x._2)\n        val lst6 = lst5.map(x => lst2(x))\n        val lst7 = lst6.mkString\n        val lst8 = lst7.toLong\n        return lst8",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        val binary = N.toBinaryString\n        val index = binary.lastIndexOf(\"10\")\n        if (index == -1) return -1\n        val result = binary.substring(0, index) + \"01\" + binary.substring(index + 2)\n        return Integer.parseInt(result, 2).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1 << (i + j)) - 1",
    "        val s = N.toString\n        val n = s.length\n        val c = s.toCharArray\n        var i = n - 1\n        while (i >= 0 && c(i) == '0') i -= 1\n        if (i == -1) return -1\n        var j = i - 1\n        while (j >= 0 && c(j) == '1') j -= 1\n        if (j == -1) return -1\n        c(j) = '1'\n        c(i) = '0'\n        return c.mkString.toLong",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                break\n            }\n        }\n        return N - (1 << i)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (i > j) {\n            var k = 0\n            while (k < i) {\n                N |= (1L << k)\n                k += 1\n            }\n            k = i\n            while (k < j) {\n                N &= ~(1L << k)\n                k += 1\n            }\n        } else {\n            var k = 0\n            while (k < j) {\n                N &= ~(1L << k)\n                k += 1\n            }\n            k = j\n            while (k < i) {\n                N |= (1L << k)\n                k += 1\n            }\n        }\n        N",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        return N - pow(2, count).toLong",
    "        val n = N.toString\n        val nlen = n.length\n        val nl = n.toList\n        val nlrev = nl.reverse\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var nn = 0\n        var nnrev = 0\n        var nnrevstr = \"\"\n        var nnstr = \"\"\n        var nnstrrev = \"\"\n        var nnstrrevrev = \"\"\n        var nnstrrevrevstr = \"\"\n        var nnstrrevstr = \"\"\n        var nnstrrevstrrev = \"\"\n        var nnstrrevstrrevstr = \"\"\n        var nnstrstr = \"\"\n        var nnstrstrrev = \"\"\n        var nnstrstrrevstr = \"\"\n        var nnstrstrstr = \"\"\n        var nnstrstrstrrev = \"\"\n        var nnstrstrstrrevstr = \"\"\n        var nnstrstrstrstr = \"\"\n        var nnstrstrstrstrrev = \"\"\n        var nnstrstrstrstrrevstr = \"\"\n        var nnstrstrstrstrstr = \"\"\n        var nnstrstrstrstrstrrev = \"\"\n        var nnstrstrstrstrstrrevstr = \"\"\n        var nnstrstrstrstrstrstr = \"\"\n        var nnstrstrstrstrstrstrrev = \"\"\n        var nnstrstrstrstrstrstrrevstr = \"\"\n        var nnstrstrstrstrstrstrstr = \"\"\n        var nnstrstrstrstrstrstrstrrev = \"\"\n        var nnstrstrstrstrstrstrstrrevstr = \"\"\n        var nnstrstrstrstrstrstrstrstr = \"\"\n        var nnstrstrstrstrstrstrstrstrrev = \"\"\n        var nnstrstrstrstrstrstrstrstrrevstr = \"\"\n        var nnstrstrstrstrstrstrstrstrstr = \"\"\n        var nnstrstrstrstrstrstrstrstrstrrev = \"\"\n        var nnstrstrstrstrstrstrstrstrstrrevstr = \"\"\n        var nnstrstrstrstrstrstrstrstrstrstr = \"\"\n        var nnstrstr",
    "        val Nstr = N.toString\n        val Nstrlen = Nstr.length\n        val Nstrarr = Nstr.toCharArray\n        var i = Nstrlen - 1\n        while (i > 0 && Nstrarr(i) >= Nstrarr(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = Nstrlen - 1\n        while (Nstrarr(j) >= Nstrarr(i - 1)) j -= 1\n        val temp = Nstrarr(i - 1)\n        Nstrarr(i - 1) = Nstrarr(j)\n        Nstrarr(j) = temp\n        j = Nstrlen - 1\n        while (i < j) {\n            val temp = Nstrarr(i)\n            Nstrarr(i) = Nstrarr(j)\n            Nstrarr(j) = temp\n            i += 1\n            j -= 1\n        }\n        return Nstrarr.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return ((1L << (i + j)) - 1) ^ ((1L << j) - 1)",
    "        var n = N\n        var i = 0\n        while(n > 0) {\n            if((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                i += 1\n                break\n            }\n        }\n        return (N & ((1 << i) - 1))",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                return (N & ((1 << i) - 1))\n            }\n        }\n        return 0",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1 << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            n >>= 1\n        }\n        N - (1 << i)",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        N - pow(2, count).toLong",
    "        val digits = N.toString.toList.map(_.asDigit)\n        val len = digits.length\n        var i = len - 1\n        while (i > 0 && digits(i) >= digits(i - 1)) i -= 1\n        if (i == 0) return -1\n        val j = i - 1\n        var k = i\n        while (k < len && digits(k) < digits(j)) k += 1\n        k -= 1\n        val temp = digits(j)\n        digits(j) = digits(k)\n        digits(k) = temp\n        val sorted = digits.slice(i, len).sorted\n        (digits.slice(0, i) ::: sorted).mkString.toLong",
    "        val binary = N.toBinaryString\n        val len = binary.length\n        var i = len - 1\n        while (i >= 0 && binary(i) == '1') {\n            i -= 1\n        }\n        if (i == -1) return -1\n        val result = binary.substring(0, i) + \"1\" + binary.substring(i + 1, len).map(x => if (x == '1') '0' else '1')\n        return BigInt(result, 2).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        return N - (1 << (i + j - 1))",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) count += 1\n            n >>= 1\n        }\n        var result = N\n        var i = 0\n        while (i < count) {\n            result = result & ~(1 << i)\n            i += 1\n        }\n        result",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0 && a(i) <= a(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (a(j) >= a(i - 1)) j -= 1\n        val t = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = t\n        j = n - 1\n        while (i < j) {\n            val t = a(i)\n            a(i) = a(j)\n            a(j) = t\n            i += 1\n            j -= 1\n        }\n        a.mkString.toLong",
    "        var n = N\n        var count = 0\n        while (n != 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        return N - (1 << count)",
    "        val digits = N.toString.map(_.asDigit).toList\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val leftNum = left.mkString.toLong\n        val rightNum = right.mkString.toLong\n        val leftNum1 = (leftNum - 1).toString\n        val rightNum1 = rightNum - 1\n        val rightNum2 = rightNum + 1\n        val rightNum3 = rightNum + 2\n        val rightNum4 = rightNum + 3\n        val rightNum5 = rightNum + 4\n        val rightNum6 = rightNum + 5\n        val rightNum7 = rightNum + 6\n        val rightNum8 = rightNum + 7\n        val rightNum9 = rightNum + 8\n        val rightNum10 = rightNum + 9\n        val rightNum11 = rightNum + 10\n        val rightNum12 = rightNum + 11\n        val rightNum13 = rightNum + 12\n        val rightNum14 = rightNum + 13\n        val rightNum15 = rightNum + 14\n        val rightNum16 = rightNum + 15\n        val rightNum17 = rightNum + 16\n        val rightNum18 = rightNum + 17\n        val rightNum19 = rightNum + 18\n        val rightNum20 = rightNum + 19\n        val rightNum21 = rightNum + 20\n        val rightNum22 = rightNum + 21\n        val rightNum23 = rightNum + 22\n        val rightNum24 = rightNum + 23\n        val rightNum25 = rightNum + 24\n        val rightNum26 = rightNum + 25\n        val rightNum27 = rightNum + 26\n        val rightNum28 = rightNum + 27\n        val rightNum29 = rightNum + 28\n        val rightNum30 = rightNum + 29\n        val rightNum31 = rightNum + 30\n        val rightNum32 = rightNum + 31\n        val rightNum33 = rightNum + 32\n        val rightNum34 = rightNum + 33\n        val rightNum35 = rightNum + 34\n        val rightNum36 = rightNum + 35\n        val rightNum37 = rightNum + 36\n        val rightNum38 = rightNum + 37\n        val rightNum39 = rightNum + 38\n       ",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                i = j\n            }\n            j += 1\n            n >>= 1\n        }\n        N & ~(1 << i)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        var result = N\n        result &= ~(1 << i)\n        result |= (1 << (i - 1))\n        result |= (1 << (j - 1)) - 1\n        return result",
    "        val s = N.toString\n        val l = s.length\n        val a = s.toCharArray\n        var i = l - 1\n        while (i > 0 && a(i) <= a(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = l - 1\n        while (j > i && a(j) >= a(i - 1)) j -= 1\n        val temp = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = temp\n        j = l - 1\n        while (i < j) {\n            val temp = a(i)\n            a(i) = a(j)\n            a(j) = temp\n            i += 1\n            j -= 1\n        }\n        a.mkString.toLong",
    "        val n = N.toBinaryString\n        val n1 = n.substring(0, n.length - 1) + \"1\"\n        val n2 = n.substring(0, n.length - 1) + \"0\"\n        val n1num = BigInt(n1, 2).toLong\n        val n2num = BigInt(n2, 2).toLong\n        if (abs(n1num - N) < abs(n2num - N)) n1num else n2num",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                i += 1\n                break\n            }\n        }\n        return N - (1 << i)",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            }\n            else {\n                n = n >> 1\n                i += 1\n                break\n            }\n        }\n        return N - (1 << i)",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (i == 0) return 0\n        if (j == 0) return N - 1\n        var res = 0L\n        for (k <- 0 until i) res = res * 2 + 1\n        for (k <- 0 until j - 1) res = res * 2\n        return res",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << i) + (1L << (j - 1)) - 1",
    "        val s = N.toString\n        val l = s.length\n        val a = s.toCharArray\n        var i = l - 1\n        while (i > 0 && a(i) <= a(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = i\n        while (j < l && a(j) < a(i - 1)) j += 1\n        val t = a(i - 1)\n        a(i - 1) = a(j - 1)\n        a(j - 1) = t\n        val b = a.slice(i, l).sorted\n        val c = a.slice(0, i) ++ b\n        c.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        var n = N\n        var count = 0\n        while (n % 2 == 0) {\n            n /= 2\n            count += 1\n        }\n        if (count == 0) return N - 1\n        else return N - pow(2, count).toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return 0\n        var res = 1L\n        for (k <- 0 until i) res = res * 2 + 1\n        for (k <- 0 until j) res *= 2\n        return res",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        return N - (1 << count)",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        return N - (1 << count)",
    "        val n = N.toString\n        val nl = n.length\n        var i = 0\n        while (i < nl - 1 && n(i) <= n(i + 1)) i += 1\n        if (i == 0) return -1\n        var j = i + 1\n        while (j < nl && n(j) < n(i - 1)) j += 1\n        val sb = new StringBuilder(n)\n        sb.setCharAt(i - 1, n(j - 1))\n        sb.setCharAt(j - 1, n(i - 1))\n        val s = sb.toString.substring(0, i) + sb.toString.substring(i, nl).sorted\n        s.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i = k\n            } else {\n                j = k\n            }\n            n >>= 1\n            k += 1\n        }\n        var result = N\n        result &= ~(1 << j)\n        result |= (1 << i)\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n != 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var res = 0L\n        for (k <- 0 until i) res = (res << 1) + 1\n        res <<= j\n        res",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if (n % 10 == 0) {\n                n -= 1\n                i += 1\n            }\n            else n /= 10\n        }\n        N - i",
    "        val s = N.toString\n        val l = s.length\n        var i = 0\n        while (i < l - 1 && s(i) <= s(i + 1)) i += 1\n        if (i == 0) return -1\n        val sb = new StringBuilder(s)\n        sb.setCharAt(i, s(i - 1))\n        sb.setCharAt(i - 1, s(i))\n        sb.toString.toLong",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                count += 1\n            }\n            n >>= 1\n        }\n        var m = N\n        while (m > 0) {\n            if ((m & 1) == 1) {\n                count -= 1\n            }\n            if (count == 0) {\n                return m\n            }\n            m >>= 1\n        }\n        return -1",
    "        val s = N.toString\n        val l = s.length\n        var i = 0\n        while (i < l - 1 && s(i) <= s(i + 1)) i += 1\n        if (i == l - 1) return -1\n        var j = i + 1\n        while (j < l && s(j) <= s(i)) j += 1\n        j -= 1\n        val s1 = s.substring(0, i) + s(j) + s.substring(i + 1, j) + s(i) + s.substring(j + 1)\n        s1.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        if (i == 0) return -1\n        return (1L << (i + j)) - 1",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0) {\n            if (a(i) < a(i - 1)) {\n                val t = a(i - 1)\n                a(i - 1) = a(i)\n                a(i) = t\n                return a.mkString.toLong\n            }\n            i -= 1\n        }\n        -1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (i == 0) return 0\n        var k = 0\n        var m = 0\n        while (k < i) {\n            m = m * 2 + 1\n            k += 1\n        }\n        while (j > 0) {\n            m = m * 2\n            j -= 1\n        }\n        return m",
    "        val s = N.toString\n        val l = s.length\n        val d = s(l - 1).toString.toInt\n        if (d == 0) return N - 1\n        if (d == 1) return N - 2\n        if (d == 2) return N - 3\n        if (d == 3) return N - 4\n        if (d == 4) return N - 5\n        if (d == 5) return N - 6\n        if (d == 6) return N - 7\n        if (d == 7) return N - 8\n        if (d == 8) return N - 9\n        if (d == 9) return N - 10\n        return 0",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        var result = N\n        result &= ~((1 << i) - 1)\n        result |= (1 << (i - 1)) - 1\n        result",
    "        val s = N.toString\n        val n = s.length\n        val m = s.toCharArray\n        var i = n - 1\n        while (i > 0 && m(i) >= m(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (m(j) >= m(i - 1)) j -= 1\n        val temp = m(i - 1)\n        m(i - 1) = m(j)\n        m(j) = temp\n        j = n - 1\n        while (i < j) {\n            val temp = m(i)\n            m(i) = m(j)\n            m(j) = temp\n            i += 1\n            j -= 1\n        }\n        return m.mkString.toLong",
    "        val s = N.toString\n        val l = s.length\n        var i = 0\n        while (i < l - 1 && s(i) <= s(i + 1)) i += 1\n        if (i == 0) return -1\n        val s1 = s.substring(0, i) + s(i + 1) + s(i) + s.substring(i + 2)\n        val s2 = s.substring(0, i) + s(i) + s(i + 1) + s.substring(i + 2)\n        val n1 = s1.toLong\n        val n2 = s2.toLong\n        if (abs(n1 - N) < abs(n2 - N)) n1 else n2",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        return N - (1 << count)",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i = k\n            } else {\n                j = k\n            }\n            n >>= 1\n            k += 1\n        }\n        return N - (1L << i) + (1L << j)",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n        var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n        var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp = 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n        var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n        var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n        var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n        var bbbb = 0\n        var cccc = 0\n        var dddd = 0\n        var eeee = 0\n        var ffff = 0\n        var ggg",
    "        var n = N\n        var x = 0\n        var y = 0\n        var z = 0\n        var i = 0\n        while (n > 0) {\n            if (n % 2 == 0) {\n                x += pow(10, i).toInt\n            }\n            else {\n                y += pow(10, i).toInt\n                z += pow(10, i).toInt\n            }\n            n /= 2\n            i += 1\n        }\n        x + y - z",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if (n % 2 == 0) i += 1\n            else j += 1\n            n /= 2\n        }\n        if (j == 0) return 0\n        var result = 1L\n        for (k <- 0 until i) result *= 2\n        for (k <- 0 until j - 1) result *= 2\n        return result",
    "        var n = N\n        var count = 0\n        while (n > 0) {\n            if ((n & 1) == 0) count += 1\n            n >>= 1\n        }\n        if (count == 0) return -1\n        N - (1 << (count - 1))",
    "        val s = N.toString\n        val l = s.length\n        val n = s.toList\n        val m = n.map(_.toString.toInt)\n        val k = m.toArray\n        var i = l - 1\n        while (i > 0 && k(i - 1) <= k(i)) i -= 1\n        if (i == 0) return -1\n        var j = l - 1\n        while (k(j) >= k(i - 1)) j -= 1\n        val t = k(i - 1)\n        k(i - 1) = k(j)\n        k(j) = t\n        j = l - 1\n        while (i < j) {\n            val t = k(i)\n            k(i) = k(j)\n            k(j) = t\n            i += 1\n            j -= 1\n        }\n        k.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        var res = N\n        res &= ~((1 << (i + 1)) - 1)\n        res |= (1 << i)\n        res |= ((1 << (j - 1)) - 1)\n        res",
    "        val s = N.toString\n        val n = s.length\n        val a = s.toCharArray\n        var i = n - 1\n        while (i > 0 && a(i - 1) <= a(i)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (j > i && a(j) >= a(i - 1)) j -= 1\n        val temp = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = temp\n        j = n - 1\n        while (i < j) {\n            val temp = a(i)\n            a(i) = a(j)\n            a(j) = temp\n            i += 1\n            j -= 1\n        }\n        return a.mkString.toLong",
    "        val s = N.toString\n        val n = s.length\n        val m = s.toCharArray\n        var i = n - 1\n        while (i > 0 && m(i) <= m(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (j > i && m(j) >= m(i - 1)) j -= 1\n        val temp = m(i - 1)\n        m(i - 1) = m(j)\n        m(j) = temp\n        j = n - 1\n        while (i < j) {\n            val temp = m(i)\n            m(i) = m(j)\n            m(j) = temp\n            i += 1\n            j -= 1\n        }\n        return m.mkString.toLong",
    "        val n = N.toString\n        val n1 = n.substring(0, n.length - 1)\n        val n2 = n.substring(0, n.length - 2) + n(n.length - 1)\n        val n3 = n.substring(0, n.length - 2) + (n(n.length - 1) - 1).toString\n        val n4 = n.substring(0, n.length - 2) + (n(n.length - 1) - 2).toString\n        val n5 = n.substring(0, n.length - 2) + (n(n.length - 1) - 3).toString\n        val n6 = n.substring(0, n.length - 2) + (n(n.length - 1) - 4).toString\n        val n7 = n.substring(0, n.length - 2) + (n(n.length - 1) - 5).toString\n        val n8 = n.substring(0, n.length - 2) + (n(n.length - 1) - 6).toString\n        val n9 = n.substring(0, n.length - 2) + (n(n.length - 1) - 7).toString\n        val n10 = n.substring(0, n.length - 2) + (n(n.length - 1) - 8).toString\n        val n11 = n.substring(0, n.length - 2) + (n(n.length - 1) - 9).toString\n        val n12 = n.substring(0, n.length - 2) + (n(n.length - 1) - 10).toString\n        val n13 = n.substring(0, n.length - 2) + (n(n.length - 1) - 11).toString\n        val n14 = n.substring(0, n.length - 2) + (n(n.length - 1) - 12).toString\n        val n15 = n.substring(0, n.length - 2) + (n(n.length - 1) - 13).toString\n        val n16 = n.substring(0, n",
    "        val n = N.toString\n        val n1 = n.substring(0, n.length - 1)\n        val n2 = n.substring(0, n.length - 2) + n(n.length - 1)\n        val n3 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt - 1).toString\n        val n4 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt + 1).toString\n        val n5 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt - 2).toString\n        val n6 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt + 2).toString\n        val n7 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt - 3).toString\n        val n8 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt + 3).toString\n        val n9 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt - 4).toString\n        val n10 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt + 4).toString\n        val n11 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt - 5).toString\n        val n12 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt + 5).toString\n        val n13 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt - 6).toString\n        val n14 = n.substring(0, n.length - 2) + (n(n.length - 1).toInt + 6).toString\n        val n15 = n.substring(0, n.length - 2) + (n(n",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                n = n >> 1\n                i += 1\n            } else {\n                n = n >> 1\n                i += 1\n                break\n            }\n        }\n        return N - (1 << i)",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else {\n                j = i\n                k = 1\n            }\n            n >>= 1\n        }\n        N - (1 << j) + (1 << (j - k))",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i = k\n            } else {\n                j = k\n            }\n            n >>= 1\n            k += 1\n        }\n        var result = N\n        result &= ~(1 << j)\n        result |= (1 << i)\n        result",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        val s = N.toString\n        val n = s.length\n        val m = s.map(_.toString.toInt).toArray\n        var i = n - 1\n        while (i > 0 && m(i - 1) <= m(i)) i -= 1\n        if (i == 0) return -1\n        var j = n - 1\n        while (j >= i && m(j) >= m(i - 1)) j -= 1\n        val t = m(i - 1)\n        m(i - 1) = m(j)\n        m(j) = t\n        j = n - 1\n        while (i < j) {\n            val t = m(i)\n            m(i) = m(j)\n            m(j) = t\n            i += 1\n            j -= 1\n        }\n        return m.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        while (n > 0) {\n            if (n % 2 == 0) {\n                i += 1\n            }\n            else {\n                j += 1\n            }\n            n /= 2\n        }\n        if (i == 0) {\n            return 0\n        }\n        var result = 0L\n        for (k <- 0 until i) {\n            result = result * 2 + 1\n        }\n        for (l <- 0 until j - 1) {\n            result = result * 2\n        }\n        return result",
    "        val n = N.toString\n        val l = n.length\n        val s = n.toCharArray\n        var i = l - 1\n        while (i > 0 && s(i) <= s(i - 1)) i -= 1\n        if (i == 0) return -1\n        var j = l - 1\n        while (s(j) >= s(i - 1)) j -= 1\n        val t = s(i - 1)\n        s(i - 1) = s(j)\n        s(j) = t\n        j = l - 1\n        while (i < j) {\n            val t = s(i)\n            s(i) = s(j)\n            s(j) = t\n            i += 1\n            j -= 1\n        }\n        s.mkString.toLong",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) i += 1\n            else j += 1\n            n >>= 1\n        }\n        return (1L << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        var j = 0\n        while (n > 0) {\n            if ((n & 1) == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            n = n >> 1\n        }\n        return (1 << (i + j)) - 1",
    "        var n = N\n        var i = 0\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                if ((n & 2) == 2) {\n                    n += 1\n                }\n                else {\n                    n -= 1\n                }\n                return n\n            }\n            n >>= 1\n        }\n        return 0"
  ]
}