{
  "name": "mbpp_305_start_withp",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(word => word.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val result = words.filter(x => x.startsWith(\"p\"))\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp2ql8_j93.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp2ql8_j93.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var ret = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                ret += word + \" \"\n            }\n        }\n        ret\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpzwkxe4dj.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpzwkxe4dj.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val filtered = words.filter(word => word.startsWith(\"p\"))\n        if (filtered.length < 2) {\n            return \"Not enough words\"\n        }\n        return filtered(0) + \" \" + filtered(1)\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmppa806esx.scala:13:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmppa806esx.scala:14:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val result = words.filter(word => word.startsWith(\"p\")).take(2)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpco3uzr_9.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpco3uzr_9.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(word => word.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6xz6spq9.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp6xz6spq9.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(_.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpqkm8o4u8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpqkm8o4u8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(word => word.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(word => word.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val pwords = words.filter(w => w.startsWith(\"p\"))\n        if (pwords.length >= 2) pwords(0) + \" \" + pwords(1) else \"No words start with p\"\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpgvlp0u16.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpgvlp0u16.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val pwords = words.filter(word => word.startsWith(\"p\"))\n        val pwords2 = pwords.map(word => word.toUpperCase)\n        pwords2.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpg7drnt1l.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpg7drnt1l.scala:12:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).take(2).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4haq687l.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4haq687l.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val pwords = words.filter(word => word.startsWith(\"p\"))\n        pwords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuzs0lh2e.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuzs0lh2e.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val pwords = words.filter(word => word.startsWith(\"p\"))\n        pwords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuzs0lh2e.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuzs0lh2e.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        return words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp0vagchou.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp0vagchou.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.head == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpyg8inj04.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpyg8inj04.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result : String = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp3obuiezk.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp3obuiezk.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val pwords = words.filter(word => word.startsWith(\"p\"))\n        pwords.mkString(\", \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp69dq_k6_.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp69dq_k6_.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for(word <- words) {\n            if(word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu5eu9z4m.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu5eu9z4m.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val wordsWithP = words.filter(word => word.startsWith(\"p\"))\n        wordsWithP.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpgaxf_o91.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpgaxf_o91.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + \" \" + word\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuqnpcamd.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuqnpcamd.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val pwords = words.filter(word => word.startsWith(\"p\"))\n        pwords.mkString(\", \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp69dq_k6_.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp69dq_k6_.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val result = words.filter(_.startsWith(\"p\"))\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxk0ilb3w.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpxk0ilb3w.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(word => word.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val result = words.filter(word => word.startsWith(\"p\"))\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpz9vu16hw.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpz9vu16hw.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val pwords = words.filter(word => word.startsWith(\"p\"))\n        pwords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuzs0lh2e.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpuzs0lh2e.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for(word <- words) {\n            if(word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu5eu9z4m.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu5eu9z4m.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for(word <- words) {\n            if(word.charAt(0) == 'p') {\n                result = result + word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplryempzz.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplryempzz.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val result = words.filter(x => x.charAt(0) == 'p')\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmppcov1alu.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmppcov1alu.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(word => word.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(word => word.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(word => word.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcq8_c6on.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val pwords = words.filter(x => x.startsWith(\"p\"))\n        pwords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpeldr2z8o.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpeldr2z8o.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result = result + word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu97b49ug.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for(word <- words) {\n            if(word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu5eu9z4m.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpu5eu9z4m.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        words.filter(x => x.startsWith(\"p\")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:9:88 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m  |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m  |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m  |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m  |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m  |\u001b[0m (x$0: String): String\n\u001b[31m  |\u001b[0m (): String\n\u001b[31m  |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4gnqwbm8.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        val pwords = words.filter(x => x.startsWith(\"p\"))\n        pwords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1666123266,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpeldr2z8o.scala:10:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpeldr2z8o.scala:11:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.charAt(0) == 'p') {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp4v6ztfn4.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : String = {\n        var result = \"\"\n        for (word <- words) {\n            if (word.startsWith(\"p\")) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals((String((\"Python\", \"PHP\")))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals((String((\"Python\", \"Programming\")))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals((String((\"Pqrst\", \"Pqr\")))));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:15:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python PHP\"\u001b[0m, \u001b[31m\"Java JavaScript\"\u001b[0m, \u001b[31m\"c c++\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"PHP\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Byte): String\n\u001b[31m   |\u001b[0m (x$0: AbstractStringBuilder, x$1: Void): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int, x$3: Void): String\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Int], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[Char]): String\n\u001b[31m   |\u001b[0m (x$0: String): String\n\u001b[31m   |\u001b[0m (): String\n\u001b[31m   |\u001b[0mmatch arguments ((String, String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwf41tm0e.scala:16:88 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(startWithp((List[\u001b[35mString\u001b[0m](\u001b[31m\"Python Programming\"\u001b[0m, \u001b[31m\"Java Programming\"\u001b[0m))).equals((String((\u001b[31m\"Python\"\u001b[0m, \u001b[31m\"Programming\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmet",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}