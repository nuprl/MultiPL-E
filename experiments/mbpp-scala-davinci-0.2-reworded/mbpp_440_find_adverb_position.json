{
  "name": "mbpp_440_find_adverb_position",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val wordList = text.split(\" \")\n        val adverbList = wordList.filter(x => x.endsWith(\"ly\"))\n        if (adverbList.length == 0) Left(\"No adverb found\")\n        else Right(wordList.indexOf(adverbList(0)))",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"beautifully\", \"carefully\", \"happily\", \"sadly\", \"angrily\", \"lazily\", \"sleepily\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(word => adverbs.contains(word))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs.head\n            val position = words.indexOf(adverb)\n            Right(position)\n        }",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = text.split(\" \").zipWithIndex.filter(x => x._1.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbs.head._2)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val adverbRegex = adverbs.map(_.r).mkString(\"|\")\n        val adverbRegexPattern = adverbRegex.r\n        val adverbMatches = adverbRegexPattern.findAllMatchIn(text)\n        if (adverbMatches.isEmpty)\n            Left(\"No adverbs found\")\n        else\n            Right(adverbMatches.next.start)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(m) => Right(m.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))"
  ]
}