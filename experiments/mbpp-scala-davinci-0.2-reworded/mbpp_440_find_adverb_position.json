{
  "name": "mbpp_440_find_adverb_position",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Either[String, Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((0l, 7l, \"clearly\")));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((0l, 9l, \"seriously\")));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((0l, 13l, \"unfortunately\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val wordList = text.split(\" \")\n        val adverbList = wordList.filter(x => x.endsWith(\"ly\"))\n        if (adverbList.length == 0) Left(\"No adverb found\")\n        else Right(wordList.indexOf(adverbList(0)))",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"beautifully\", \"carefully\", \"happily\", \"sadly\", \"angrily\", \"lazily\", \"sleepily\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(word => adverbs.contains(word))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs.head\n            val position = words.indexOf(adverb)\n            Right(position)\n        }",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = text.split(\" \").zipWithIndex.filter(x => x._1.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbs.head._2)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val adverbRegex = adverbs.map(_.r).mkString(\"|\")\n        val adverbRegexPattern = adverbRegex.r\n        val adverbMatches = adverbRegexPattern.findAllMatchIn(text)\n        if (adverbMatches.isEmpty)\n            Left(\"No adverbs found\")\n        else\n            Right(adverbMatches.next.start)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(m) => Right(m.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"quietly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(a) => Right(words.indexOf(a))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            Right(adverbPositions.head)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val adverb = adverbs.find(text.contains(_))\n        adverb match {\n            case Some(adverb) => Right(text.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbsWithPositions = adverbs.map(adverb => (adverb, text.indexOf(adverb)))\n        val adverbWithPosition = adverbsWithPositions.find(tuple => tuple._2 != -1)\n        adverbWithPosition match {\n            case Some(tuple) => Right(tuple._2)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition.head)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverb = adverbs.find(text.contains(_))\n        adverb match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(word => adverbs.contains(word._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.length == 0)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverb(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(text.split(\" \").indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"rudely\", \"happily\", \"sadly\", \"angrily\", \"foolishly\", \"merrily\", \"jovially\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"carefully\", \"happily\", \"sadly\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.find(position => position != -1)\n        adverbPosition match {\n            case Some(position) => Right(position)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbsPositions = adverbs.map(adverb => (adverb, text.indexOf(adverb)))\n        val adverbPosition = adverbsPositions.filter(_._2 != -1).headOption\n        adverbPosition match {\n            case Some(adverb) => Right(adverb._2)\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"loudly\", \"quietly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(x) => Right(words.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }",
    "        val pattern = \"\\\\w+ly\".r\n        val adverb = pattern.findFirstIn(text)\n        adverb match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"awkwardly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition(0))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val position = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2).headOption\n        position match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.zipWithIndex.filter(x => x._1.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(adverbs(0)._2)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.filter(_ != -1).head\n        if (adverbPosition == -1) Left(\"No adverb found\") else Right(adverbPosition)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            Right(words.indexOf(adverbs(0)))\n        }",
    "        val pattern = \"\\\\w+ly\".r\n        val result = pattern.findFirstIn(text)\n        result match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) Right(words.indexOf(adverbs(0)))\n        else Left(\"No adverb found\")",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        adverbPositions.find(_ != -1) match {\n            case Some(position) => Right(position)\n            case None => Left(\"No adverb found\")\n        }",
    "        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(m) => Right(m.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"lazily\", \"loudly\", \"quietly\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty)\n            Left(\"No adverb found\")\n        else\n            Right(adverbPositions.head)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(x) => Right(words.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(a) => Right(words.indexOf(a))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val adverbPosition = adverbs.map(adverb => text.indexOf(adverb)).filter(_ != -1)\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition.head)",
    "        val words = text.split(\" \")\n        val adverb = words.find(word => word.endsWith(\"ly\"))\n        adverb match {\n            case Some(adv) => Right(words.indexOf(adv))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }",
    "        val pattern = \"\\\\w+ly\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(x) => Right(x.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val adverbPosition = text.split(\" \").zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2).headOption\n        adverbPosition match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"lazily\", \"loudly\", \"quietly\", \"humbly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val adverb = words.filter(adverbs.contains(_))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\")\n        val adverb = adverbs.find(text.contains(_))\n        adverb match {\n            case None => Left(\"No adverb found\")\n            case Some(x) => Right(text.indexOf(x))\n        }",
    "        val pattern = \".*(ly|ally|like|wise).*\".r\n        val result = pattern.findFirstIn(text)\n        result match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val pattern = \"\\\\w+ly\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(x) => Right(x.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"foolishly\", \"carefully\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\") else Right(adverbPositions.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\", \"calmly\", \"carefully\", \"cautiously\", \"cheerfully\", \"clearly\", \"closely\", \"coolly\", \"curiously\", \"eagerly\", \"elegantly\", \"enormously\", \"evenly\", \"eventually\", \"exactly\", \"faithfully\", \"finally\", \"fondly\", \"foolishly\", \"fortunately\", \"frankly\", \"frantically\", \"frequently\", \"frightfully\", \"fully\", \"furiously\", \"generally\", \"generously\", \"gently\", \"gladly\", \"gracefully\", \"greedily\", \"happily\", \"hastily\", \"honestly\", \"hopelessly\", \"hourly\", \"hungrily\", \"innocently\", \"inquisitively\", \"irritably\", \"jealously\", \"justly\", \"kindly\", \"lazily\", \"loosely\", \"madly\", \"merrily\", \"mortally\", \"mysteriously\", \"naturally\", \"nervously\", \"never\", \"nicely\", \"noisily\", \"obediently\", \"obnoxiously\", \"occasionally\", \"often\", \"only\", \"openly\", \"painfully\", \"patiently\", \"perfectly\", \"politely\", \"poorly\", \"powerfully\", \"promptly\", \"quickly\", \"quietly\", \"rapidly\", \"rarely\", \"readily\", \"really\", \"reassuringly\", \"recklessly\", \"regularly\", \"reluctantly\", \"repeatedly\", \"reproachfully\", \"restlessly\", \"roughly\", \"rudely\", \"sadly\", \"safely\", \"seldom\", \"selfishly\", \"seriously\", \"shakily\", \"sharply\", \"sheepishly\", \"silently\", \"sleepily\", \"slowly\", \"smoothly\", \"softly\", \"solemnly\", \"solidly\", \"sometimes\", \"soon\", \"speedily\", \"stealthily\", \"sternly\", \"strictly\", \"strongly\", \"stupidly\", \"successfully\", \"suddenly\",",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(a) => Right(words.indexOf(a))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.filter(position => position != -1).head\n        if (adverbPosition == -1) Left(\"No adverb found\")\n        else Right(adverbPosition)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) Right(words.indexOf(adverbs(0)))\n        else Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length > 0)\n            Right(words.indexOf(adverbs(0)))\n        else\n            Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            return Right(index)\n        }\n        Left(\"No adverb found\")",
    "        val adverbs = List(\"quickly\", \"slowly\", \"quietly\", \"loudly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\") else Right(index)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"carefully\", \"lazily\", \"loudly\", \"quietly\")\n        val textArray = text.split(\" \")\n        val adverbPosition = textArray.zipWithIndex.filter(x => adverbs.contains(x._1)).headOption\n        adverbPosition match {\n            case Some(x) => Right(x._2)\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs.head\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(word => adverbs.contains(word._1)).map(word => word._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\") else Right(adverbPositions.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0)\n            Left(\"No adverb found\")\n        else\n            Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (adverbPosition.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPosition.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbIndex = words.indexWhere(adverbs.contains(_))\n        if (adverbIndex == -1) Left(\"No adverb found\")\n        else Right(adverbIndex)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val pattern = \"\"\"(\\w+ly)\"\"\".r\n        val result = pattern.findFirstMatchIn(text)\n        if (result.isEmpty) Left(\"No adverb found\")\n        else Right(result.get.start)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(word => adverbs.contains(word._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            Right(words.indexOf(adverbs.head))\n        }",
    "        val adverbs = Array(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbPositions = adverbs.map(adverb => text.indexOf(adverb))\n        val adverbPosition = adverbPositions.filter(position => position != -1)(0)\n        if (adverbPosition == -1) Left(\"No adverb found\")\n        else Right(adverbPosition)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        val adverb = words.filter(adverbs.contains(_))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbPosition = text.split(\" \").zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2).headOption\n        adverbPosition match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\")\n        val words = text.split(\" \")\n        val adverb = words.find(adverbs.contains(_))\n        adverb match {\n            case Some(adverb) => Right(words.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val positions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (positions.isEmpty) Left(\"No adverbs found\")\n        else Right(positions.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.zipWithIndex.filter(x => x._1.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(adverbs.head._2)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverbs found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val adverbPosition = text.split(\" \").zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2).headOption\n        adverbPosition match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head._2)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val positions = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (positions.isEmpty) Left(\"No adverbs found\")\n        else Right(positions.head._2)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbIndex = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbIndex.isEmpty) Left(\"No adverb found\")\n        else Right(adverbIndex.head)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val adverbs = Map(\"quickly\" -> 1, \"slowly\" -> 2, \"eagerly\" -> 3)\n        val words = text.split(\" \")\n        val adverb = words.filter(adverbs.contains(_))\n        if (adverb.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            Right(adverbs(adverb(0)))\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val adverbs = List(\"quickly\", \"slowly\", \"carefully\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(_._2)\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition.head)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"carefully\", \"lazily\", \"sleepily\", \"noisily\", \"hungrily\", \"thirstily\", \"cheerfully\", \"loudly\", \"quietly\", \"merrily\", \"bravely\", \"foolishly\", \"slyly\", \"bashfully\", \"greedily\", \"jealously\", \"anxiously\", \"nervously\", \"hastily\", \"loudly\", \"quietly\", \"merrily\", \"bravely\", \"foolishly\", \"slyly\", \"bashfully\", \"greedily\", \"jealously\", \"anxiously\", \"nervously\", \"hastily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        val adverbPosition = words.zipWithIndex.filter(x => adverbs.contains(x._1)).headOption\n        if (adverbPosition.isEmpty) Left(\"No adverb found\")\n        else Right(adverbPosition.get._2)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"joyfully\", \"calmly\", \"passionately\")\n        val words = text.split(\" \")\n        val index = words.indexWhere(adverbs.contains(_))\n        if (index == -1) Left(\"No adverb found\")\n        else Right(index)",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(w => w.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\", \"calmly\", \"carefully\", \"cautiously\", \"cheerfully\", \"eagerly\", \"elegantly\", \"frantically\", \"gracefully\", \"happily\", \"hastily\", \"jovially\", \"joyfully\", \"lazily\", \"loudly\", \"merrily\", \"mysteriously\", \"noisily\", \"obediently\", \"patiently\", \"politely\", \"powerfully\", \"quietly\", \"rapidly\", \"sharply\", \"silently\", \"sleepily\", \"slowly\", \"softly\", \"swiftly\", \"tenderly\", \"vivaciously\", \"warmly\", \"weakly\", \"wearily\", \"wildly\", \"worriedly\", \"zealously\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverb found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) {\n            Left(\"No adverbs found\")\n        } else {\n            val adverb = adverbs(0)\n            val position = words.indexOf(adverb)\n            Right(position)\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            val adverb = adverbs(0)\n            val adverbPosition = words.indexOf(adverb)\n            Right(adverbPosition)\n        }",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(text.split(\" \").indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val adverbs = Array(\"quickly\", \"slowly\", \"carefully\", \"hastily\", \"loudly\", \"quietly\", \"happily\", \"sadly\", \"angrily\", \"merrily\", \"joyfully\", \"jovially\", \"cheerfully\", \"playfully\", \"cautiously\", \"warily\", \"boldly\", \"bravely\", \"fearlessly\", \"courageously\", \"recklessly\", \"foolishly\", \"carelessly\", \"thoughtlessly\", \"gracefully\", \"graciously\", \"elegantly\", \"smoothly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly\", \"clumsily\", \"awkwardly",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val adverb = adverbs(0)\n            val index = words.indexOf(adverb)\n            Right(index)\n        } else {\n            Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"anxiously\")\n        val words = text.split(\" \")\n        val result = words.zipWithIndex.filter(x => adverbs.contains(x._1))\n        if (result.length == 0) Left(\"No adverbs found\")\n        else Right(result(0)._2)",
    "        val pattern = \"\\\\w+ly\".r\n        pattern.findFirstMatchIn(text) match {\n            case Some(x) => Right(x.start)\n            case None => Left(\"No adverb found\")\n        }",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"noisily\", \"excitedly\")\n        val positions = adverbs.map(text.indexOf(_))\n        val firstAdverb = positions.filter(_ != -1).min\n        if (firstAdverb == -1) Left(\"No adverb found\")\n        else Right(firstAdverb)",
    "        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (words(i).endsWith(\"ly\")) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\", \"angrily\")\n        val words = text.split(\" \")\n        val position = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2).headOption\n        position match {\n            case Some(x) => Right(x)\n            case None => Left(\"No adverbs found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs.head))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"eagerly\", \"happily\", \"sadly\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverbs found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\")\n        val words = text.split(\" \")\n        for (i <- 0 until words.length) {\n            if (adverbs.contains(words(i))) {\n                return Right(i)\n            }\n        }\n        Left(\"No adverb found\")",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(_.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) {\n            Left(\"No adverb found\")\n        } else {\n            Right(words.indexOf(adverbs(0)))\n        }",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.length == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val adverbs = text.split(\" \").filter(x => x.endsWith(\"ly\"))\n        if (adverbs.length == 0) Left(\"No adverb found\")\n        else Right(text.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.length > 0) {\n            val firstAdverb = adverbs(0)\n            val index = words.indexOf(firstAdverb)\n            Right(index)\n        } else {\n            Left(\"No adverbs found\")\n        }",
    "        val pattern = \"\\\\w+ly\".r\n        val adverb = pattern.findFirstIn(text)\n        adverb match {\n            case Some(x) => Right(text.indexOf(x))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if(adverbs.length == 0) {\n            Left(\"No adverbs found\")\n        } else {\n            Right(words.indexOf(adverbs(0)))\n        }",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(x => x.endsWith(\"ly\"))\n        if (adverbs.isEmpty)\n            Left(\"No adverbs found\")\n        else\n            Right(words.indexOf(adverbs(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.isEmpty) Left(\"No adverbs found\")\n        else Right(words.indexOf(adverbs(0)))",
    "        val adverbs = List(\"quickly\", \"slowly\", \"elegantly\", \"lazily\", \"noisily\")\n        val words = text.split(\" \")\n        val adverbPositions = words.zipWithIndex.filter(x => adverbs.contains(x._1)).map(x => x._2)\n        if (adverbPositions.isEmpty) Left(\"No adverbs found\")\n        else Right(adverbPositions.head)",
    "        val adverbRegex = \"\"\"(?i)(\\w+ly)\"\"\".r\n        val adverb = adverbRegex.findFirstIn(text)\n        adverb match {\n            case Some(adverb) => Right(text.indexOf(adverb))\n            case None => Left(\"No adverb found\")\n        }",
    "        val words = text.split(\" \")\n        val adverb = words.filter(word => word.endsWith(\"ly\"))\n        if (adverb.isEmpty) Left(\"No adverb found\")\n        else Right(words.indexOf(adverb(0)))",
    "        val words = text.split(\" \")\n        val adverbs = words.filter(word => word.endsWith(\"ly\"))\n        if (adverbs.size == 0) Left(\"No adverb found\")\n        else Right(words.indexOf(adverbs(0)))"
  ]
}