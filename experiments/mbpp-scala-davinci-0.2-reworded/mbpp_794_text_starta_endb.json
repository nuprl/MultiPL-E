{
  "name": "mbpp_794_text_starta_endb",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    def textStartaEndb(text : String) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textStartaEndb((\"aabbbb\")) == (true));\n    assert(textStartaEndb((\"aabAbbbc\")) == (false));\n    assert(textStartaEndb((\"accddbbjjj\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        text.matches(\"a.*b\")",
    "        text.matches(\"^a.*b$\")",
    "        text.matches(\"a.*b\")",
    "        val pattern = \"a.*b\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        text.matches(\"a.*b\")",
    "        return text.matches(\"^a.*b$\")",
    "        text.matches(\"a.*b\")",
    "        text.matches(\"a.*b\")",
    "        text.matches(\"a.*b\")",
    "        val pattern = \"a.*b\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"a.*b\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        text.matches(\"a.*b\")",
    "        text.matches(\"a.*b\")",
    "        val pattern = \"a.*b\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        text.matches(\"a.*b\")",
    "        val pattern = \"a.*b\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"a.*b\".r\n        pattern.findFirstIn(text) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"a.*b\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a.*b\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        text.matches(\"a.*b\")"
  ]
}