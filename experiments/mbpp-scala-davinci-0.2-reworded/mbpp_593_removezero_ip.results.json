{
  "name": "mbpp_593_removezero_ip",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 to s.length - 1) {\n            val num = s(i).toInt\n            if (num == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(num.toString)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                if (i == ipArray.length - 1) result.append(num)\n                else result.append(num + \".\")\n            }\n            else {\n                result.append(num)\n                if (i != ipArray.length - 1) result.append(\".\")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < ip.length) {\n            if (ip(i) == '0') {\n                i += 1\n                while (i < ip.length && ip(i) == '0') i += 1\n            }\n            if (i < ip.length) result += ip(i)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n == 0) {\n                if (sb.length > 0) sb.append(\".\")\n                sb.append(\"0\")\n            } else {\n                sb.append(n)\n                if (i < s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val newIpArr = ipArr.map(x => x.toInt)\n        val newIp = newIpArr.map(x => x.toString).mkString(\".\")\n        newIp\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val newiparr = iparr.map(x => x.toInt.toString)\n        newiparr.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                if (i == 0) result.append(num)\n                else result.append(\".\" + num)\n            }\n            else {\n                if (i == 0) result.append(num)\n                else result.append(\".\" + num)\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n != 0) {\n                sb.append(n)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(n)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        ipArray4\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        return ipArray4\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        ipArray.map(x => x.toInt).mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var result = \"\"\n        var count = 0\n        for (i <- 0 until ip.length) {\n            if (ip(i) == '0') {\n                count += 1\n            } else {\n                result += ip.substring(i)\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq445pcqm.scala:19)\n\tat Problem.main(tmpq445pcqm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ips = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until ips.length) {\n            sb.append(ips(i).toInt)\n            if (i != ips.length - 1) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val arr = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = arr(i).toInt\n            if (num == 0) {\n                res.append(\"0\")\n            } else {\n                res.append(num)\n            }\n            if (i != 3) res.append(\".\")\n        }\n        res.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmpq73r6nfw.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmpq73r6nfw.scala:16)\n\tat Problem$.main(tmpq73r6nfw.scala:21)\n\tat Problem.main(tmpq73r6nfw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < ip.length) {\n            if (ip(i) != '0') {\n                result += ip.substring(i)\n                return result\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy0txyfsj.scala:18)\n\tat Problem.main(tmpy0txyfsj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < ip.length) {\n            if (ip(i) != '0') {\n                result += ip.substring(i)\n                return result\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy0txyfsj.scala:18)\n\tat Problem.main(tmpy0txyfsj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => x.toString)\n        val iparr4 = iparr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val iparr5 = iparr4.mkString(\".\")\n        iparr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i).length > 1 && s(i).charAt(0) == '0') {\n                sb.append(s(i).substring(1))\n            } else {\n                sb.append(s(i))\n            }\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        ip.split(\"\\\\.\").map(x => x.toInt.toString).mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 to ipArray.length - 1) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result += ipArray(i).substring(1)\n            } else {\n                result += ipArray(i)\n            }\n            if (i != ipArray.length - 1) result += \".\"\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val x = s(i).toInt\n            if (x == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(x.toString)\n                if (i != s.length - 1) {\n                    sb.append(\".\")\n                }\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\").toList\n        ipList.map(x => x.toInt).mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => x.toString)\n        val iparr4 = iparr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val iparr5 = iparr4.mkString(\".\")\n        return iparr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val arr = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = arr(i).toInt\n            if (num == 0) {\n                res.append(\"0\")\n            } else {\n                res.append(num)\n            }\n            if (i != 3) res.append(\".\")\n        }\n        res.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmpq73r6nfw.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmpq73r6nfw.scala:16)\n\tat Problem$.main(tmpq73r6nfw.scala:21)\n\tat Problem.main(tmpq73r6nfw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(n)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        var res = \"\"\n        for (i <- 0 until iparr.length) {\n            var temp = iparr(i)\n            while (temp.length > 1 && temp(0) == '0') {\n                temp = temp.substring(1)\n            }\n            res += temp\n            if (i != iparr.length - 1) res += \".\"\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        var ipString = \"\"\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            ipString += num.toString\n            if (i != ipArray.length - 1) ipString += \".\"\n        }\n        ipString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val temp = ipArray(i).toInt\n            if (temp == 0) {\n                result.append(\"0\")\n            } else {\n                result.append(temp)\n            }\n            if (i != ipArray.length - 1) {\n                result.append(\".\")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => if (x == 0) \"\" else x.toString)\n        iparr3.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => x.toString)\n        val ipArr4 = ipArr3.map(x => x.toInt)\n        val ipArr5 = ipArr4.map(x => x.toString)\n        val ipArr6 = ipArr5.map(x => x.toInt)\n        val ipArr7 = ipArr6.map(x => x.toString)\n        val ipArr8 = ipArr7.map(x => x.toInt)\n        val ipArr9 = ipArr8.map(x => x.toString)\n        val ipArr10 = ipArr9.map(x => x.toInt)\n        val ipArr11 = ipArr10.map(x => x.toString)\n        val ipArr12 = ipArr11.map(x => x.toInt)\n        val ipArr13 = ipArr12.map(x => x.toString)\n        val ipArr14 = ipArr13.map(x => x.toInt)\n        val ipArr15 = ipArr14.map(x => x.toString)\n        val ipArr16 = ipArr15.map(x => x.toInt)\n        val ipArr17 = ipArr16.map(x => x.toString)\n        val ipArr18 = ipArr17.map(x => x.toInt)\n        val ipArr19 = ipArr18.map(x => x.toString)\n        val ipArr20 = ipArr19.map(x => x.toInt)\n        val ipArr21 = ipArr20.map(x => x.toString)\n        val ipArr22 = ipArr21.map(x => x.toInt)\n        val ipArr23 = ipArr22.map(x => x.toString)\n        val ipArr24 = ipArr23.map(x\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv86onree.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv86onree.scala:29:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mipArr24\u001b[0m = ipArr23.map(x\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv86onree.scala:30:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = ipArray(i).toInt\n            val str = num.toString\n            result.append(str)\n            if (i != 3) result.append(\".\")\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmp6tsyval5.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmp6tsyval5.scala:13)\n\tat Problem$.main(tmp6tsyval5.scala:18)\n\tat Problem.main(tmp6tsyval5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result += ipArray(i).substring(1)\n            } else {\n                result += ipArray(i)\n            }\n            if (i != ipArray.length - 1) result += \".\"\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val res = parts.map(x => x.toInt.toString).mkString(\".\")\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        ipList5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val split = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until split.length) {\n            val num = split(i).toInt\n            if (num == 0) {\n                if (i == 0) sb.append(\"0\")\n                else sb.append(\".\")\n            }\n            else {\n                sb.append(num)\n                if (i != split.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => x.toString)\n        val iparr4 = iparr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val iparr5 = iparr4.mkString(\".\")\n        return iparr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until parts.length) {\n            if (i > 0) result.append(\".\")\n            result.append(parts(i).toInt.toString)\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 to 3) {\n            val part = parts(i).toInt\n            if (part == 0) {\n                if (result.length > 0) result.append(\".\")\n                result.append(\"0\")\n            } else {\n                if (result.length > 0) result.append(\".\")\n                result.append(part)\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmpc8b3voc0.scala:9)\n\tat Problem$.removezeroIp$$anonfun$adapted$1(tmpc8b3voc0.scala:17)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmpc8b3voc0.scala:17)\n\tat Problem$.main(tmpc8b3voc0.scala:22)\n\tat Problem.main(tmpc8b3voc0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        ipList4.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val newIpList = for (i <- ipList) yield {\n            i.toInt.toString\n        }\n        newIpList.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val newip = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = iparr(i).toInt\n            if (num == 0) {\n                newip.append(\"0\")\n            } else {\n                newip.append(num)\n            }\n            if (i != 3) newip.append(\".\")\n        }\n        newip.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmpg950e1wg.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmpg950e1wg.scala:16)\n\tat Problem$.main(tmpg950e1wg.scala:21)\n\tat Problem.main(tmpg950e1wg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            result.append(num)\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt.toString).mkString(\".\")\n        return newIp\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val arr = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until arr.length) {\n            if (arr(i).length > 1 && arr(i).charAt(0) == '0') sb.append(arr(i).substring(1))\n            else sb.append(arr(i))\n            if (i != arr.length - 1) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ips = ip.split(\"\\\\.\")\n        val res = ips.map(x => x.toInt.toString)\n        res.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipList5 = ipList4.map(x => if (x == \"\") \"0\" else x)\n        val ipList6 = ipList5.mkString(\".\")\n        ipList6\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ip_array = ip.split(\"\\\\.\")\n        val ip_array_nozero = ip_array.map(x => x.toInt.toString)\n        ip_array_nozero.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val splitIp = ip.split(\"\\\\.\")\n        val newIp = splitIp.map(x => x.toInt.toString)\n        newIp.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val newParts = parts.map(x => x.toInt.toString)\n        newParts.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val newparts = parts.map(x => x.toInt.toString)\n        newparts.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until parts.length) {\n            val part = parts(i).toInt\n            if (i == 0) sb.append(part)\n            else sb.append(\".\" + part)\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < ip.length) {\n            if (ip(i) == '0') {\n                i += 1\n            } else {\n                result = ip.substring(i)\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmvxj9nih.scala:19)\n\tat Problem.main(tmpmvxj9nih.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt)\n        val newIp = newIpList.map(x => x.toString).mkString(\".\")\n        return newIp\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        ipList5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt)\n        val newIpList2 = newIpList.map(x => if (x == 0) \"\" else x.toString)\n        val newIp = newIpList2.mkString(\".\")\n        newIp\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt).map(x => x.toString)\n        val ipArr3 = ipArr2.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        ipArr3.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipBuffer = new StringBuffer()\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            val numStr = num.toString\n            ipBuffer.append(numStr)\n            if (i != ipArray.length - 1) ipBuffer.append(\".\")\n        }\n        ipBuffer.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val newparts = parts.map(x => x.toInt.toString)\n        newparts.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val num = s(i).toInt\n            if (num == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(num)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt.toString)\n        newIp.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArrayNoZero = ipArray.map(x => x.toInt.toString)\n        ipArrayNoZero.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.map(x => if (x == \"\") \"0\" else x)\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var result = \"\"\n        var i = 0\n        var j = 0\n        while (i < ip.length) {\n            if (ip(i) == '.') {\n                if (ip(i + 1) == '0') {\n                    j = i + 1\n                    while (j < ip.length && ip(j) == '0') j += 1\n                    result += ip.substring(i, j)\n                    i = j\n                } else {\n                    result += ip.substring(i, i + 1)\n                    i += 1\n                }\n            } else {\n                result += ip.substring(i, i + 1)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkaetckkd.scala:28)\n\tat Problem.main(tmpkaetckkd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        ipArray4.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        ipArray4.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).map(x => x.replaceFirst(\"^0+(?!$)\", \"\")).mkString(\".\")\n        newIp\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        ipList5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.filter(x => x != \"\")\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val newip = iparr.map(x => x.toInt.toString).mkString(\".\")\n        newip\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.toInt)\n        val ipList5 = ipList4.map(x => x.toString)\n        val ipList6 = ipList5.map(x => x.toInt)\n        val ipList7 = ipList6.map(x => x.toString)\n        val ipList8 = ipList7.map(x => x.toInt)\n        val ipList9 = ipList8.map(x => x.toString)\n        val ipList10 = ipList9.map(x => x.toInt)\n        val ipList11 = ipList10.map(x => x.toString)\n        val ipList12 = ipList11.map(x => x.toInt)\n        val ipList13 = ipList12.map(x => x.toString)\n        val ipList14 = ipList13.map(x => x.toInt)\n        val ipList15 = ipList14.map(x => x.toString)\n        val ipList16 = ipList15.map(x => x.toInt)\n        val ipList17 = ipList16.map(x => x.toString)\n        val ipList18 = ipList17.map(x => x.toInt)\n        val ipList19 = ipList18.map(x => x.toString)\n        val ipList20 = ipList19.map(x => x.toInt)\n        val ipList21 = ipList20.map(x => x.toString)\n        val ipList22 = ipList21.map(x => x.toInt)\n        val ipList23 = ipList22.map(x => x.toString)\n        val ipList24 = ipList23.map(x => x.toInt)\n        val ipList25 = ipList24.map(x => x.toString)\n        val ipList26 = ipList25.map(x => x.toInt)\n\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0tg2iatd.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var ipArray = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 to ipArray.length - 1) {\n            var str = ipArray(i)\n            while (str.length > 0 && str.charAt(0) == '0') {\n                str = str.substring(1)\n            }\n            result += str\n            if (i < ipArray.length - 1) result += \".\"\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        ipArray4.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt)\n        val newIp = newIpArray.map(x => x.toString).mkString(\".\")\n        return newIp\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val newarr = iparr.map(x => x.toInt.toString)\n        newarr.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => if (x == 0) \"\" else x.toString)\n        val ipList4 = ipList3.map(x => if (x == \"\") \"0\" else x)\n        val ipList5 = ipList4.mkString(\".\")\n        ipList5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"0\" else x.toString)\n        val ipArray4 = ipArray3.map(x => if (x.size > 1 && x(0) == '0') x.substring(1) else x)\n        ipArray4.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => x.toString)\n        val iparr4 = iparr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val iparr5 = iparr4.mkString(\".\")\n        return iparr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < ip.length) {\n            if (ip(i) == '0' && ip(i + 1) == '.') {\n                i += 2\n            } else {\n                result += ip(i)\n                i += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwglfbfl4.scala:19)\n\tat Problem.main(tmpwglfbfl4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ips = ip.split(\"\\\\.\")\n        val newips = ips.map(x => x.toInt.toString)\n        newips.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var result = ip\n        while (result.length > 0 && result.charAt(0) == '0') {\n            result = result.substring(1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpucxhpm0t.scala:13)\n\tat Problem.main(tmpucxhpm0t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipArray5 = ipArray4.map(x => if (x == \"\") \"0\" else x)\n        val ipArray6 = ipArray5.mkString(\".\")\n        return ipArray6\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i).length > 1 && s(i).charAt(0) == '0') {\n                sb.append(s(i).substring(1))\n            } else {\n                sb.append(s(i))\n            }\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\").toList\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = s(i).toInt\n            sb.append(num)\n            if (i != 3) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmp8wtu8t_b.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmp8wtu8t_b.scala:12)\n\tat Problem$.main(tmp8wtu8t_b.scala:17)\n\tat Problem.main(tmp8wtu8t_b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => if (x == 0) \"0\" else x.toString)\n        val ipArr4 = ipArr3.map(x => if (x.length > 1 && x.charAt(0) == '0') x.substring(1) else x)\n        val ipArr5 = ipArr4.map(x => if (x == \"0\") \"\" else x)\n        val ipArr6 = ipArr5.filter(x => x != \"\")\n        val ipArr7 = ipArr6.mkString(\".\")\n        ipArr7\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        return ipArray4\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).mkString(\".\")\n        return newIp\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => x.toString)\n        val ipArr4 = ipArr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArr5 = ipArr4.mkString(\".\")\n        ipArr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 to 3) {\n            val part = parts(i)\n            if (part.length == 1) result.append(\"00\" + part)\n            else if (part.length == 2) result.append(\"0\" + part)\n            else result.append(part)\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_663zka6.scala:17)\n\tat Problem.main(tmp_663zka6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val split = ip.split(\"\\\\.\")\n        val res = split.map(x => x.toInt.toString)\n        res.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => x.toString)\n        val iparr4 = iparr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val iparr5 = iparr4.reduceLeft(_ + \".\" + _)\n        return iparr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => x.toString)\n        val ipArr4 = ipArr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArr5 = ipArr4.mkString(\".\")\n        ipArr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => x.toString)\n        val iparr4 = iparr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        iparr4.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val newparts = parts.map(x => x.toInt.toString)\n        newparts.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArrayNoZero = ipArray.map(x => x.toInt.toString)\n        ipArrayNoZero.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val newarr = iparr.map(x => x.toInt)\n        val newip = newarr.mkString(\".\")\n        return newip\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result += ipArray(i).substring(1)\n            } else {\n                result += ipArray(i)\n            }\n            if (i != ipArray.length - 1) result += \".\"\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).map(x => x.replaceFirst(\"^0+(?!$)\", \"\")).mkString(\".\")\n        newIp\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.map(x => if (x == \"\") \"0\" else x)\n        val ipArray6 = ipArray5.mkString(\".\")\n        return ipArray6\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i < ipArray.length - 1) result.append(\".\")\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < ip.length && ip(i) == '0') i += 1\n        if (i == ip.length) result = \"0\"\n        else result = ip.substring(i)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123834,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk4q7_e_g.scala:14)\n\tat Problem.main(tmpk4q7_e_g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var ipArray = ip.split(\"\\\\.\")\n        var result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i).length > 1 && s(i).charAt(0) == '0') sb.append(s(i).substring(1))\n            else sb.append(s(i))\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt.toString).mkString(\".\")\n        return newIp\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ips = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until ips.length) {\n            if (ips(i).length > 1 && ips(i).charAt(0) == '0') {\n                sb.append(ips(i).substring(1))\n            } else {\n                sb.append(ips(i))\n            }\n            if (i != ips.length - 1) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\").map(_.toInt)\n        val ipArr2 = ipArr.map(x => if (x == 0) \"\" else x.toString)\n        val ipArr3 = ipArr2.map(x => if (x.length == 0) \"0\" else x)\n        val ipArr4 = ipArr3.map(x => if (x.length == 1) \"00\" + x else x)\n        val ipArr5 = ipArr4.map(x => if (x.length == 2) \"0\" + x else x)\n        val ipArr6 = ipArr5.map(x => if (x.length == 3) x else \"\")\n        val ipArr7 = ipArr6.filter(_.length != 0)\n        ipArr7.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptb21m2cl.scala:16)\n\tat Problem.main(tmptb21m2cl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.filter(x => x != \"\")\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => x.toString).map(x => if (x.length == 1) \"00\" + x else if (x.length == 2) \"0\" + x else x).mkString(\".\")\n        newIp\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9l5for46.scala:11)\n\tat Problem.main(tmp9l5for46.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val newip = iparr.map(x => x.toInt).map(x => x.toString).mkString(\".\")\n        newip\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var result = ip\n        while (result.startsWith(\"0\")) {\n            result = result.substring(1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123834,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpakt8yqli.scala:13)\n\tat Problem.main(tmpakt8yqli.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val num = s(i).toInt\n            if (num == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(num)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArr4 = ipArr3.mkString(\".\")\n        return ipArr4\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => if (x == 0) \"\" else x.toString)\n        val iparr4 = iparr3.mkString(\".\")\n        iparr4\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val newparts = parts.map(x => {\n            val num = x.toInt\n            if (num == 0) {\n                \"0\"\n            } else {\n                num.toString\n            }\n        })\n        newparts.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => x.toString)\n        val ipArr4 = ipArr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArr5 = ipArr4.mkString(\".\")\n        return ipArr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until parts.length) {\n            val part = parts(i)\n            if (part.length > 1 && part.charAt(0) == '0') {\n                sb.append(part.substring(1))\n            } else {\n                sb.append(part)\n            }\n            if (i < parts.length - 1) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result += ipArray(i).substring(1)\n            } else {\n                result += ipArray(i)\n            }\n            if (i != ipArray.length - 1) result += \".\"\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 to ipArray.length - 1) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) result.append(\".\")\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => x.toString)\n        val ipArr4 = ipArr3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipArr5 = ipArr4.mkString(\".\")\n        return ipArr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val iparr2 = iparr.map(x => x.toInt)\n        val iparr3 = iparr2.map(x => x.toString)\n        val iparr4 = iparr3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val iparr5 = iparr4.mkString(\".\")\n        iparr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => x.toString)\n        val ipArr4 = ipArr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArr5 = ipArr4.mkString(\".\")\n        return ipArr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            if (ipArray(i).length > 1 && ipArray(i).charAt(0) == '0') {\n                result.append(ipArray(i).substring(1))\n            } else {\n                result.append(ipArray(i))\n            }\n            if (i != ipArray.length - 1) {\n                result.append(\".\")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123835,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var ipArray = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 to ipArray.length - 1) {\n            result += ipArray(i).toInt.toString\n            if (i != ipArray.length - 1) result += \".\"\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 until iparr.length) {\n            val num = iparr(i).toInt\n            val str = num.toString\n            res.append(str)\n            if (i != iparr.length - 1) res.append(\".\")\n        }\n        res.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val newparts = parts.map(x => x.toInt.toString)\n        newparts.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIp = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val ipPart = ipArray(i)\n            if (ipPart.length > 1 && ipPart.charAt(0) == '0') {\n                newIp.append(ipPart.substring(1))\n            } else {\n                newIp.append(ipPart)\n            }\n            if (i != ipArray.length - 1) {\n                newIp.append(\".\")\n            }\n        }\n        newIp.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val arr = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until arr.length) {\n            sb.append(arr(i).toInt)\n            if (i != arr.length - 1) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => x.toString)\n        val ipArr4 = ipArr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArr5 = ipArr4.mkString(\".\")\n        ipArr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = new Array[String](4)\n        for (i <- 0 to 3) {\n            ipArray2(i) = ipArray(i).toInt.toString\n        }\n        ipArray2.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmp4vdodx1i.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmp4vdodx1i.scala:10)\n\tat Problem$.main(tmp4vdodx1i.scala:15)\n\tat Problem.main(tmp4vdodx1i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArr4 = ipArr3.filter(x => x != \"\")\n        val ipArr5 = ipArr4.mkString(\".\")\n        ipArr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 to 3) {\n            var num = ipArray(i).toInt\n            while (num > 0) {\n                result += num % 10\n                num /= 10\n            }\n            if (i != 3) result += \".\"\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc6bj_203.scala:19)\n\tat Problem.main(tmpc6bj_203.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var s = ip.split(\"\\\\.\")\n        var res = \"\"\n        for (i <- 0 until s.length) {\n            var j = 0\n            while (j < s(i).length && s(i)(j) == '0') j += 1\n            res += s(i).substring(j)\n            if (i != s.length - 1) res += \".\"\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) x.toString else x.toString.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray4 = ipArray3.mkString(\".\")\n        return ipArray4\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 to s.length - 1) {\n            sb.append(s(i).toInt)\n            if (i != s.length - 1) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n == 0) {\n                if (sb.length == 0) sb.append(\"0\")\n            } else {\n                sb.append(n)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < ip.length && ip(i) == '0') i += 1\n        while (i < ip.length && ip(i) != '.') {\n            result += ip(i)\n            i += 1\n        }\n        if (i < ip.length) result += \".\"\n        result += removezeroIp(ip.substring(i + 1))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 4, end 3, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.removezeroIp(tmp4cf1q3bq.scala:14)\n\tat Problem$.removezeroIp(tmp4cf1q3bq.scala:14)\n\tat Problem$.removezeroIp(tmp4cf1q3bq.scala:14)\n\tat Problem$.removezeroIp(tmp4cf1q3bq.scala:14)\n\tat Problem$.main(tmp4cf1q3bq.scala:18)\n\tat Problem.main(tmp4cf1q3bq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArr = ip.split(\"\\\\.\")\n        val ipArr2 = ipArr.map(x => x.toInt)\n        val ipArr3 = ipArr2.map(x => x.toString)\n        val ipArr4 = ipArr3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArr5 = ipArr4.mkString(\".\")\n        ipArr5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val parts = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 until parts.length) {\n            if (i != 0) res.append(\".\")\n            val part = parts(i)\n            var j = 0\n            while (j < part.length && part(j) == '0') j += 1\n            if (j == part.length) res.append(\"0\")\n            else res.append(part.substring(j))\n        }\n        res.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        var result = \"\"\n        for (i <- 0 to 3) {\n            val num = ipList(i).toInt\n            result += num.toString + \".\"\n        }\n        result.substring(0, result.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123846,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmpks8cdjc_.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmpks8cdjc_.scala:11)\n\tat Problem$.main(tmpks8cdjc_.scala:16)\n\tat Problem.main(tmpks8cdjc_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArrayNoZero = ipArray.map(x => x.toInt.toString)\n        ipArrayNoZero.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceAll(\"^0+\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val arr = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = arr(i).toInt\n            if (num == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(num)\n            }\n            if (i != 3) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmppstmbv43.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmppstmbv43.scala:16)\n\tat Problem$.main(tmppstmbv43.scala:21)\n\tat Problem.main(tmppstmbv43.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        ip.split(\"\\\\.\").map(x => x.toInt).mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(num)\n            }\n            if (i != 3) sb.append(\".\")\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmp5_ji0l2a.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmp5_ji0l2a.scala:16)\n\tat Problem$.main(tmp5_ji0l2a.scala:21)\n\tat Problem.main(tmp5_ji0l2a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until iparr.length) {\n            result.append(iparr(i).toInt)\n            if (i != iparr.length - 1) result.append(\".\")\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 to 3) {\n            res.append(iparr(i).toInt.toString)\n            if (i != 3) res.append(\".\")\n        }\n        res.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmpacuz109r.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmpacuz109r.scala:11)\n\tat Problem$.main(tmpacuz109r.scala:16)\n\tat Problem.main(tmpacuz109r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        return ipArray5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val ipList2 = ipList.map(x => x.toInt)\n        val ipList3 = ipList2.map(x => x.toString)\n        val ipList4 = ipList3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipList5 = ipList4.mkString(\".\")\n        return ipList5\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val x = s(i).toInt\n            if (x == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(x)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123845,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n != 0) {\n                sb.append(n)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val iparr = ip.split(\"\\\\.\")\n        val newip = iparr.map(x => x.toInt).map(x => x.toString).map(x => x.replaceFirst(\"^0+(?!$)\", \"\")).mkString(\".\")\n        newip\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArrayNoZero = ipArray.map(x => x.toInt.toString)\n        ipArrayNoZero.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        ip.split(\"\\\\.\").map(x => x.toInt).map(x => x.toString).mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        ipArray.map(x => x.toInt).mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val num = s(i).toInt\n            if (num == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(num)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123814,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        ipArray.map(x => x.toInt).mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                if (i == 0) result.append(\"0\")\n            } else {\n                result.append(num)\n                if (i != 3) result.append(\".\")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123846,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat Problem$.removezeroIp$$anonfun$1(tmpbfi0wvte.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.removezeroIp(tmpbfi0wvte.scala:16)\n\tat Problem$.main(tmpbfi0wvte.scala:21)\n\tat Problem.main(tmpbfi0wvte.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val newIp = ipArray.map(x => x.toInt).map(x => if (x == 0) \"0\" else x.toString).mkString(\".\")\n        newIp\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.toInt)\n        val ipArray5 = ipArray4.map(x => x.toString)\n        val ipArray6 = ipArray5.map(x => x.toInt)\n        val ipArray7 = ipArray6.map(x => x.toString)\n        val ipArray8 = ipArray7.map(x => x.toInt)\n        val ipArray9 = ipArray8.map(x => x.toString)\n        val ipArray10 = ipArray9.map(x => x.toInt)\n        val ipArray11 = ipArray10.map(x => x.toString)\n        val ipArray12 = ipArray11.map(x => x.toInt)\n        val ipArray13 = ipArray12.map(x => x.toString)\n        val ipArray14 = ipArray13.map(x => x.toInt)\n        val ipArray15 = ipArray14.map(x => x.toString)\n        val ipArray16 = ipArray15.map(x => x.toInt)\n        val ipArray17 = ipArray16.map(x => x.toString)\n        val ipArray18 = ipArray17.map(x => x.toInt)\n        val ipArray19 = ipArray18.map(x => x.toString)\n        val ipArray20 = ipArray19.map(x => x.toInt)\n        val ipArray21 = ipArray20.map(x => x.toString)\n        val ipArray22 = ipArray21.map(x => x.toInt)\n        val ipArray23 = ipArray22.map(x => x.toString)\n        val ipArray24 = ipArray23.map(x => x.toInt)\n        val ipArray25 = ipArray24.map(x => x.toString)\n        val ipArray26 = ipArray25.map(x => x.toInt)\n\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123848,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1so6f16q.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n        val ipArray = ip.split(\"\\\\.\")\n        val ipArrayNoZero = ipArray.map(x => x.toInt).map(x => x.toString).map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        ipArrayNoZero.mkString(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
      "timestamp": 1666123848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}