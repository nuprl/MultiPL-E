{
  "name": "mbpp_625_swap_List",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to interchange the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 2l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))).equals((List[Long](4l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val newList1 = newList.drop(1)\n        val newList2 = newList1.dropRight(1)\n        return last :: newList2 ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.drop(1).dropRight(1)\n        return last :: newList2 ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => xs.last :: xs.init :+ x\n        }",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        var temp = newList(0)\n        newList(0) = newList(newList.length - 1)\n        newList(newList.length - 1) = temp\n        return newList",
    "        var temp = newList.head\n        var newList2 = newList.tail\n        var newList3 = newList2.reverse\n        var newList4 = newList3.tail\n        var newList5 = newList4.reverse\n        var newList6 = temp :: newList5\n        return newList6",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        newList match {\n            case x :: xs => xs.reverse.head :: xs.init.reverse ::: List(x)\n            case Nil => Nil\n        }",
    "        val list = newList.toArray\n        val temp = list(0)\n        list(0) = list(list.length - 1)\n        list(list.length - 1) = temp\n        list.toList",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => xs.last :: xs.init.dropRight(1) ::: List(x)\n        }",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.dropRight(1)\n        val newList3 = newList2.drop(1)\n        val newList4 = newList3 :+ last\n        val newList5 = newList4 :+ first\n        return newList5",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val newList = List(1,2,3,4,5)\n        val swappedList = List(newList.last) ::: newList.init.tail ::: List(newList.head)\n        swappedList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)"
  ]
}