{
  "name": "mbpp_459_remove_uppercase",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uppercase substrings from a given string.\n    def removeUppercase(str1 : String) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeUppercase((\"cAstyoUrFavoRitETVshoWs\")).equals((\"cstyoravoitshos\")));\n    assert(removeUppercase((\"wAtchTheinTernEtrAdIo\")).equals((\"wtchheinerntrdo\")));\n    assert(removeUppercase((\"VoicESeaRchAndreComMendaTionS\")).equals((\"oiceachndreomendaion\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => x.isLower)",
    "        var str2 = \"\"\n        for (c <- str1) {\n            if (c.isLower) str2 += c\n        }\n        str2",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => c.isLower)",
    "        return str1.replaceAll(\"[A-Z]\", \"\")",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        val str2 = str1.toList.filter(x => !x.isUpper)\n        str2.mkString",
    "        str1.filter(c => !c.isUpper)",
    "        str1.replaceAll(\"[A-Z]\", \"\")",
    "        str1.filter(c => c.isLower)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        val str2 = str1.toList\n        val str3 = str2.filter(x => x.isLower)\n        str3.mkString",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        return str2",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        return str2",
    "        val str2 = str1.filter(x => !x.isUpper)\n        str2",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        str1.replaceAll(\"[A-Z]\", \"\")",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        return str2",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.replaceAll(\"[A-Z]\", \"\")",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => c.isLower)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => c.isLower)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => x.isLower)",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        val str2 = str1.filter(x => !x.isUpper)\n        str2",
    "        str1.filterNot(_.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        return str2",
    "        val str2 = str1.filter(x => x.isLower)\n        str2",
    "        str1.filter(c => c.isLower)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => x.isLower)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        val str2 = str1.toList.filter(x => !x.isUpper)\n        str2.mkString",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => c.isLower)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) {\n                str2 += str1(i)\n            }\n        }\n        return str2",
    "        str1.filter(!_.isUpper)",
    "        val str2 = str1.toLowerCase\n        str2",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        var str2 = str1\n        for (c <- str1) {\n            if (c.isUpper) {\n                str2 = str2.replace(c.toString, \"\")\n            }\n        }\n        str2",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isUpper) {\n                str2 += str1(i)\n            }\n        }\n        return str2",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.replaceAll(\"[A-Z]\", \"\")",
    "        str1.filter(x => x.isLower)",
    "        str1.filter(c => c.isLower)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        return str2",
    "        str1.filter(x => x.isLower)",
    "        str1.filter(x => x.isLower)",
    "        val str2 = str1.toList.filter(x => !x.isUpper)\n        str2.mkString",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (!str1(i).isUpper) str2 += str1(i)\n        }\n        str2",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        return str2",
    "        str1.replaceAll(\"[A-Z]\", \"\")",
    "        val str2 = str1.toList\n        val str3 = str2.filter(x => x.isLower)\n        str3.mkString",
    "        str1.replaceAll(\"[A-Z]\", \"\")",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        return str2",
    "        str1.replaceAll(\"[A-Z]\", \"\")",
    "        str1.filter(x => x.isLower)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(!_.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (c <- str1) {\n            if (c.isLower) str2 += c\n        }\n        str2",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (!str1(i).isUpper) {\n                str2 += str1(i)\n            }\n        }\n        return str2",
    "        str1.filter(ch => !ch.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        val str2 = str1.filter(x => !x.isUpper)\n        str2",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        return str2",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        val str2 = str1.toList.filter(x => !x.isUpper)\n        str2.mkString",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        val str2 = str1.filter(!_.isUpper)\n        str2",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (c <- str1) {\n            if (c.isLower) str2 += c\n        }\n        str2",
    "        return str1.replaceAll(\"[A-Z]\", \"\")",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (c <- str1) {\n            if (c.isLower) str2 += c\n        }\n        str2",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(!_.isUpper)",
    "        str1.replaceAll(\"[A-Z]\", \"\")",
    "        str1.filter(!_.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => c.isLower)",
    "        str1.filter(c => !c.isUpper)",
    "        str1.filter(c => !c.isUpper)",
    "        var str2 : String = \"\"\n        for (i <- 0 until str1.length) {\n            if (!str1(i).isUpper) {\n                str2 += str1(i)\n            }\n        }\n        str2",
    "        str1.filter(x => !x.isUpper)",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i).isLower) str2 += str1(i)\n        }\n        str2",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(x => !x.isUpper)",
    "        str1.filter(c => !c.isUpper)"
  ]
}