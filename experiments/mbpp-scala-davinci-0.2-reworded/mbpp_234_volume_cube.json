{
  "name": "mbpp_234_volume_cube",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the volume of a cube given its side length.\n    def volumeCube(l : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(volumeCube((3l)) == (27l));\n    assert(volumeCube((2l)) == (8l));\n    assert(volumeCube((5l)) == (125l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        return l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l",
    "        l * l * l"
  ]
}