{
  "name": "mbpp_753_min_k",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        test_list.sortBy(_.right.get).take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:44 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:62 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:78 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list : List[Either[String, Long]] = List()\n        var min_heap : PriorityQueue[Either[String, Long]] = new PriorityQueue[Either[String, Long]]()(Ordering.by(x => x.right.getOrElse(0)))\n        for (i <- test_list) {\n            if (min_heap.size < K) {\n                min_heap.enqueue(i)\n            } else {\n                if (i.right.getOrElse(0) < min_heap.head.right.getOrElse(0)) {\n                    min_heap.dequeue\n                    min_heap.enqueue(i)\n                }\n            }\n        }\n        while (min_heap.nonEmpty) {\n            min_list = min_heap.dequeue :: min_list\n        }\n        min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2abh5fdi.scala:7:141 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmin_heap\u001b[0m : \u001b[35mPriorityQueue\u001b[0m[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]] = \u001b[33mnew\u001b[0m \u001b[35mPriorityQueue\u001b[0m[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]()(Ordering.by(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m)))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                             ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[AnyVal].\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2abh5fdi.scala:12:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (i.right.getOrElse(\u001b[31m0\u001b[0m) < min_heap.head.right.getOrElse(\u001b[31m0\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue < is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2abh5fdi.scala:24:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = List[Either[String, Long]]()\n        var min_list_size = 0\n        for (i <- test_list) {\n            if (min_list_size < K) {\n                min_list = min_list :+ i\n                min_list_size += 1\n            } else {\n                var max_index = 0\n                var max_value = min_list(0).right.get\n                for (j <- 1 until min_list_size) {\n                    if (min_list(j).right.get > max_value) {\n                        max_index = j\n                        max_value = min_list(j).right.get\n                    }\n                }\n                if (i.right.get < max_value) {\n                    min_list = min_list.updated(max_index, i)\n                }\n            }\n        }\n        min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6idisjr2.scala:29:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6idisjr2.scala:29:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6idisjr2.scala:29:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = new ListBuffer[Either[String, Long]]\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        for (i <- 0 to K.toInt - 1) {\n            min_list += sorted_list(i)\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptdp9k2ct.scala:14:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptdp9k2ct.scala:14:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptdp9k2ct.scala:14:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        // sort list by second element in tuple\n        val sorted_list = test_list.sortBy(_.right.get)\n        // return first K elements\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt014wk5p.scala:12:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt014wk5p.scala:12:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt014wk5p.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = List[Either[String, Long]]()\n        var min_heap = new MinHeap[Either[String, Long]](K.toInt)\n        for (i <- test_list) {\n            if (min_heap.size < K) {\n                min_heap.add(i)\n            } else {\n                if (min_heap.peek.right.get < i.right.get) {\n                    min_heap.poll\n                    min_heap.add(i)\n                }\n            }\n        }\n        while (!min_heap.isEmpty) {\n            min_list = min_heap.poll :: min_list\n        }\n        min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq47ehntu.scala:7:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmin_heap\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mMinHeap\u001b[0m[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]](K.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: type MinHeap\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq47ehntu.scala:24:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq47ehntu.scala:24:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          R",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x match {\n            case Left(x) => x.length\n            case Right(x) => x\n        })\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpaykt_qit.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaykt_qit.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaykt_qit.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        // this is a verbatim coscala of test cases\n        def minK_helper(test_list : List[Either[String, Long]], K : Long, min_list : List[Either[String, Long]]) : List[Either[String, Long]] = {\n            if (test_list.isEmpty) min_list\n            else {\n                val min_list_sorted = min_list.sortWith((x, y) => x.right.get < y.right.get)\n                if (min_list_sorted.length < K) minK_helper(test_list.tail, K, min_list_sorted :+ test_list.head)\n                else {\n                    val max_min = min_list_sorted.last\n                    if (test_list.head.right.get < max_min.right.get) minK_helper(test_list.tail, K, (min_list_sorted.init :+ test_list.head).sortWith((x, y) => x.right.get < y.right.get))\n                    else minK_helper(test_list.tail, K, min_list_sorted)\n                }\n            }\n        }\n        minK_helper(test_list, K, List())\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3v3xfl0_.scala:22:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3v3xfl0_.scala:22:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3v3xfl0_.scala:22:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.slice(0, K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpte0a7vg5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpte0a7vg5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpte0a7vg5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val test_list_sorted = test_list.sortBy(_.right.get)\n        test_list_sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfpfpb6de.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfpfpb6de.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfpfpb6de.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = List[Either[String, Long]]()\n        var min_list_size = 0\n        for (test <- test_list) {\n            if (min_list_size < K) {\n                min_list = min_list :+ test\n                min_list_size += 1\n            }\n            else {\n                var max_index = -1\n                var max_value = Long.MinValue\n                for (i <- 0 until min_list_size) {\n                    if (min_list(i).right.get > max_value) {\n                        max_value = min_list(i).right.get\n                        max_index = i\n                    }\n                }\n                if (test.right.get < max_value) {\n                    min_list = min_list.updated(max_index, test)\n                }\n            }\n        }\n        min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ytvy57.scala:30:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ytvy57.scala:30:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3ytvy57.scala:30:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgnbpgzl.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgnbpgzl.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgnbpgzl.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = new ListBuffer[Either[String, Long]]()\n        var min_list_size = 0\n        for (i <- 0 until test_list.length) {\n            if (min_list_size < K) {\n                min_list += test_list(i)\n                min_list_size += 1\n            } else {\n                var max_index = 0\n                var max_value = min_list(0)\n                for (j <- 1 until min_list_size) {\n                    if (min_list(j).right.get > max_value.right.get) {\n                        max_index = j\n                        max_value = min_list(j)\n                    }\n                }\n                if (test_list(i).right.get < max_value.right.get) {\n                    min_list(max_index) = test_list(i)\n                }\n            }\n        }\n        return min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp76ja9n6t.scala:29:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp76ja9n6t.scala:29:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp76ja9n6t.scala:29:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sorted\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpiwq4x8ub.scala:6:42 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sorted\n\u001b[31m\u001b[31m  |\u001b[0m                                          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for B\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mwhere:    B is a type variable with constraint >: Either[String, Long]\n\u001b[31m  |\u001b[0m..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mB\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[B]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[B].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiwq4x8ub.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiwq4x8ub.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list += test_list(i)\n        }\n        for (i <- K.toInt until test_list.length) {\n            val max_value = min_list.maxBy(_.right.get)\n            if (test_list(i).right.get < max_value.right.get) {\n                min_list -= max_value\n                min_list += test_list(i)\n            }\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47e8akfe.scala:20:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47e8akfe.scala:20:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47e8akfe.scala:20:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_k_list = new ListBuffer[Either[String, Long]]()\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        for (i <- 0 until K.toInt) {\n            min_k_list += sorted_list(i)\n        }\n        min_k_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuce2xjh0.scala:14:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuce2xjh0.scala:14:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuce2xjh0.scala:14:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = List[Either[String, Long]]()\n        var min_heap = new scala.collection.mutable.PriorityQueue[Either[String, Long]]()(Ordering.by((_: Either[String, Long]).right.get))\n        for (i <- test_list) {\n            if (min_heap.size < K) {\n                min_heap.enqueue(i)\n            } else {\n                if (i.right.get < min_heap.head.right.get) {\n                    min_heap.dequeue\n                    min_heap.enqueue(i)\n                }\n            }\n        }\n        while (min_heap.nonEmpty) {\n            min_list = min_heap.dequeue :: min_list\n        }\n        min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxltu69z0.scala:24:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxltu69z0.scala:24:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxltu69z0.scala:24:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val test_list_sorted = test_list.sortWith(_.right.get < _.right.get)\n        test_list_sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwsbc5o2.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwsbc5o2.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwsbc5o2.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list += test_list(i)\n        }\n        val min_value = min_list.maxBy(_.right.get)\n        for (i <- K.toInt until test_list.length) {\n            if (test_list(i).right.get < min_value.right.get) {\n                min_list -= min_value\n                min_list += test_list(i)\n                min_value = min_list.maxBy(_.right.get)\n            }\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbofexe21.scala:15:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                min_value = min_list.maxBy(_.right.get)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val min_value\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbofexe21.scala:21:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbofexe21.scala:21:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.slice(0, K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxz4q3wfr.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxz4q3wfr.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxz4q3wfr.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgnbpgzl.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgnbpgzl.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgnbpgzl.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        def minK_helper(test_list : List[Either[String, Long]], K : Long, min_list : List[Either[String, Long]]) : List[Either[String, Long]] = {\n            if (test_list.isEmpty) min_list\n            else {\n                val min_list_size = min_list.size\n                if (min_list_size < K) {\n                    val new_min_list = min_list :+ test_list.head\n                    minK_helper(test_list.tail, K, new_min_list)\n                }\n                else {\n                    val max_min_list = min_list.maxBy(_.right.get)\n                    val max_min_list_value = max_min_list.right.get\n                    val test_list_head = test_list.head\n                    val test_list_head_value = test_list_head.right.get\n                    if (test_list_head_value < max_min_list_value) {\n                        val new_min_list = min_list.filter(_ != max_min_list) :+ test_list_head\n                        minK_helper(test_list.tail, K, new_min_list)\n                    }\n                    else minK_helper(test_list.tail, K, min_list)\n                }\n            }\n        }\n        minK_helper(test_list, K, List())\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6y4kn370.scala:30:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6y4kn370.scala:30:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6y4kn370.scala:30:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp7ri2tp7o.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Matchable..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mMatchable\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Matchable]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Matchable].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ri2tp7o.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ri2tp7o.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted_list.slice(0, K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpdwwy74sm.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Matchable..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mMatchable\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Matchable]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Matchable].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdwwy74sm.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdwwy74sm.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list += test_list(i)\n        }\n        for (i <- K.toInt until test_list.length) {\n            val max = min_list.maxBy(_.right.getOrElse(0))\n            if (test_list(i).right.getOrElse(0) < max.right.getOrElse(0)) {\n                min_list -= max\n                min_list += test_list(i)\n            }\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpcydcbx7s.scala:11:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = min_list.maxBy(_.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[AnyVal]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[AnyVal].\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcydcbx7s.scala:12:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mif\u001b[0m (test_list(i).right.getOrElse(\u001b[31m0\u001b[0m) < max.right.getOrElse(\u001b[31m0\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue < is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcydcbx7s.scala:20:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mStr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x match {\n            case Left(x) => x.length\n            case Right(x) => x\n        })\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpaykt_qit.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaykt_qit.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaykt_qit.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_heap = new scala.collection.mutable.PriorityQueue[Either[String, Long]]()(Ordering.by(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }))\n        for (i <- test_list) {\n            if (min_heap.size < K) {\n                min_heap.enqueue(i)\n            } else {\n                if (i match {\n                    case Left(s) => false\n                    case Right(l) => l < min_heap.head match {\n                        case Left(s) => false\n                        case Right(l) => l\n                    }\n                }) {\n                    min_heap.dequeue()\n                    min_heap.enqueue(i)\n                }\n            }\n        }\n        min_heap.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp3x18j3yo.scala:16:39 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    \u001b[33mcase\u001b[0m Right(l) => l < min_heap.head \u001b[33mmatch\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m<\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Boolean\n\u001b[31m   |\u001b[0m (x: Float): Boolean\n\u001b[31m   |\u001b[0m (x: Long): Boolean\n\u001b[31m   |\u001b[0m (x: Int): Boolean\n\u001b[31m   |\u001b[0m (x: Char): Boolean\n\u001b[31m   |\u001b[0m (x: Short): Boolean\n\u001b[31m   |\u001b[0m (x: Byte): Boolean\n\u001b[31m   |\u001b[0mmatch arguments ((min_heap.head : => Either[String, Long]))\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3x18j3yo.scala:18:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                        \u001b[33mcase\u001b[0m Right(l) => l\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (l : Long)\n\u001b[31m   |\u001b[0m                                         Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3x18j3yo.scala:29:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list += test_list(i)\n        }\n        for (i <- K.toInt until test_list.length) {\n            val max = min_list.maxBy(_.right.getOrElse(0))\n            if (test_list(i).right.getOrElse(0) < max.right.getOrElse(0)) {\n                min_list -= max\n                min_list += test_list(i)\n            }\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpagn7kep6.scala:11:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = min_list.maxBy(_.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[AnyVal]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[AnyVal].\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpagn7kep6.scala:12:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mif\u001b[0m (test_list(i).right.getOrElse(\u001b[31m0\u001b[0m) < max.right.getOrElse(\u001b[31m0\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue < is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpagn7kep6.scala:20:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mStr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            var min = Long.MaxValue\n            var min_index = -1\n            for (j <- 0 until test_list.length) {\n                if (test_list(j).isRight && test_list(j).right.get < min) {\n                    min = test_list(j).right.get\n                    min_index = j\n                }\n            }\n            if (min_index != -1) {\n                min_list += test_list(min_index)\n                test_list(min_index) = Left(\"\")\n            }\n        }\n        return min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppur887ua.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                test_list(min_index) = Left(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Either[String, Long]] - did you mean test_list.updated?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppur887ua.scala:24:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppur887ua.scala:24:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = List[Either[String, Long]]()\n        var min_list_size = 0\n        for (i <- test_list) {\n            if (min_list_size < K) {\n                min_list = i :: min_list\n                min_list_size += 1\n            } else {\n                val max_element = min_list.maxBy(_.right.get)\n                if (i.right.get < max_element.right.get) {\n                    min_list = min_list.filter(_ != max_element)\n                    min_list = i :: min_list\n                }\n            }\n        }\n        min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3wr94nkz.scala:23:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3wr94nkz.scala:23:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3wr94nkz.scala:23:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        if (K == 0) return List()\n        var min_list = List[Either[String, Long]]()\n        var min_value = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight && test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        min_list = min_list :+ test_list(min_index)\n        min_list = min_list ::: minK(test_list.take(min_index) ::: test_list.drop(min_index + 1), K - 1)\n        return min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyl53l17k.scala:21:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyl53l17k.scala:21:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyl53l17k.scala:21:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        test_list.sortBy(x => x.right.get).take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9e7r736_.scala:9:44 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9e7r736_.scala:9:62 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9e7r736_.scala:9:78 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = new ListBuffer[Either[String, Long]]()\n        val max_heap = new MaxHeap[Long](K)\n        for (e <- test_list) {\n            if (e.isRight) {\n                if (max_heap.size < K) {\n                    max_heap.add(e.right.get)\n                } else {\n                    if (e.right.get < max_heap.peek) {\n                        max_heap.poll\n                        max_heap.add(e.right.get)\n                    }\n                }\n            } else {\n                min_list += e\n            }\n        }\n        while (max_heap.size > 0) {\n            min_list += Right(max_heap.poll)\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf1py16t5.scala:7:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax_heap\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mMaxHeap\u001b[0m[\u001b[35mLong\u001b[0m](K)\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: type MaxHeap\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf1py16t5.scala:28:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf1py16t5.scala:28:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val list = test_list.filter(_.isRight).map(_.right.get).sorted\n        val min = list.take(K.toInt)\n        val min_map = min.map(x => (x, 1)).toMap\n        test_list.filter(x => min_map.contains(x.right.get))\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj23wwniw.scala:12:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj23wwniw.scala:12:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj23wwniw.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp5k0of8e0.scala:6:64 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5k0of8e0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5k0of8e0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val list = test_list.filter(_.isRight).map(_.right.get)\n        val min = list.min\n        val max = list.max\n        val min_list = list.filter(_ == min)\n        val max_list = list.filter(_ == max)\n        val min_size = min_list.size\n        val max_size = max_list.size\n        if (min_size + max_size < K) {\n            val min_list_left = min_list.map(x => Left(x.toString))\n            val max_list_left = max_list.map(x => Left(x.toString))\n            min_list_left ++ max_list_left\n        } else if (min_size + max_size == K) {\n            val min_list_left = min_list.map(x => Left(x.toString))\n            val max_list_left = max_list.map(x => Left(x.toString))\n            min_list_left ++ max_list_left\n        } else {\n            val min_list_left = min_list.map(x => Left(x.toString))\n            val max_list_left = max_list.map(x => Left(x.toString))\n            val min_list_left_size = min_list_left.size\n            val max_list_left_size = max_list_left.size\n            if (min_list_left_size + max_list_left_size < K) {\n                val min_list_left = min_list.map(x => Left(x.toString))\n                val max_list_left = max_list.map(x => Left(x.toString))\n                min_list_left ++ max_list_left\n            } else if (min_list_left_size + max_list_left_size == K) {\n                val min_list_left = min_list.map(x => Left(x.toString))\n                val max_list_left = max_list.map(x => Left(x.toString))\n                min_list_left ++ max_list_left\n            } else {\n                val min\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0uqg9mk8.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0uqg9mk8.scala:44:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0uqg9mk8.scala:38:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0uqg9mk8.scala:38:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.slice(0, K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpe7utbn54.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7utbn54.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7utbn54.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = test_list.sortWith(_.right.get < _.right.get)\n        min_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcyd0lm4g.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcyd0lm4g.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcyd0lm4g.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp5k0of8e0.scala:6:64 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5k0of8e0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5k0of8e0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list : List[Either[String, Long]] = List()\n        var min_list_size : Long = 0\n        for (i <- test_list) {\n            if (min_list_size < K) {\n                min_list = i :: min_list\n                min_list_size += 1\n            }\n            else {\n                var max_index : Long = 0\n                var max_value : Long = 0\n                for (j <- min_list.indices) {\n                    if (min_list(j).right.get > max_value) {\n                        max_value = min_list(j).right.get\n                        max_index = j\n                    }\n                }\n                if (i.right.get < max_value) {\n                    min_list = min_list.updated(max_index.toInt, i)\n                }\n            }\n        }\n        return min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbk5vq3_8.scala:30:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbk5vq3_8.scala:30:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbk5vq3_8.scala:30:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp5k0of8e0.scala:6:64 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5k0of8e0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5k0of8e0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp7ri2tp7o.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Matchable..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mMatchable\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Matchable]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Matchable].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ri2tp7o.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ri2tp7o.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            var min_value = Long.MaxValue\n            var min_index = -1\n            for (j <- 0 until test_list.length) {\n                if (test_list(j).isRight && test_list(j).right.get < min_value) {\n                    min_value = test_list(j).right.get\n                    min_index = j\n                }\n            }\n            if (min_index != -1) {\n                min_list += test_list(min_index)\n                test_list(min_index) = Left(\"\")\n            }\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf_qxkx13.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                test_list(min_index) = Left(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Either[String, Long]] - did you mean test_list.updated?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf_qxkx13.scala:24:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf_qxkx13.scala:24:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        })\n        sorted.slice(0, K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvowrzgw_.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvowrzgw_.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvowrzgw_.scala:13:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x match {\n            case Left(x) => x\n            case Right(x) => x\n        })\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpky4w_z40.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Matchable..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mMatchable\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Matchable]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Matchable].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpky4w_z40.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpky4w_z40.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        test_list.sortBy(_.right.get).take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:44 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:62 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:78 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        // Write your code here\n        val test_list_sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        test_list_sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpekhllb4u.scala:7:74 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_sorted\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekhllb4u.scala:11:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekhllb4u.scala:11:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list : List[Either[String, Long]] = List()\n        var min_list_size : Long = 0\n        var min_list_max : Long = 0\n        for (test <- test_list) {\n            if (test.isRight) {\n                if (min_list_size < K) {\n                    min_list = min_list :+ test\n                    min_list_size += 1\n                    min_list_max = max(min_list_max, test.right.get)\n                } else if (test.right.get < min_list_max) {\n                    min_list = min_list.filter(x => x.right.get != min_list_max)\n                    min_list = min_list :+ test\n                    min_list_max = min_list.map(x => x.right.get).max\n                }\n            }\n        }\n        return min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ro35ej_.scala:25:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ro35ej_.scala:25:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ro35ej_.scala:25:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        min_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvrrmhraq.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvrrmhraq.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvrrmhraq.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        val k_list = sorted_list.take(K.toInt)\n        k_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123917,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp1mx9c5bu.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Matchable..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mMatchable\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Matchable]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Matchable].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1mx9c5bu.scala:14:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1mx9c5bu.scala:14:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmd8r_yy_.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmd8r_yy_.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmd8r_yy_.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val list = test_list.filter(_.isRight).map(_.right.get)\n        val min = list.min\n        val max = list.max\n        val min_list = list.filter(_ == min)\n        val max_list = list.filter(_ == max)\n        val min_list_size = min_list.size\n        val max_list_size = max_list.size\n        val min_list_size_diff = K - min_list_size\n        val max_list_size_diff = K - max_list_size\n        if (min_list_size_diff <= 0) {\n            min_list.map(x => Right(x)).take(K.toInt)\n        } else if (max_list_size_diff <= 0) {\n            max_list.map(x => Right(x)).take(K.toInt)\n        } else {\n            val min_list_size_diff_half = min_list_size_diff / 2\n            val max_list_size_diff_half = max_list_size_diff / 2\n            val min_list_size_diff_half_rem = min_list_size_diff % 2\n            val max_list_size_diff_half_rem = max_list_size_diff % 2\n            val min_list_size_diff_half_rem_half = min_list_size_diff_half_rem / 2\n            val max_list_size_diff_half_rem_half = max_list_size_diff_half_rem / 2\n            val min_list_size_diff_half_rem_half_rem = min_list_size_diff_half_rem % 2\n            val max_list_size_diff_half_rem_half_rem = max_list_size_diff_half_rem % 2\n            val min_list_size_diff_half_rem_half_rem_half = min_list_size_diff_half_rem_half_rem / 2\n            val max_list_size_diff_half_rem_half_rem_half = max_list_size_diff_half_rem_half_rem / 2\n            val min_list_size_diff_\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8s7j0bul.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8s7j0bul.scala:39:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8s7j0bul.scala:33:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8s7j0bul.scala:33:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted_list.slice(0, K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpdwwy74sm.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Matchable..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mMatchable\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Matchable]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Matchable].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdwwy74sm.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdwwy74sm.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val list = test_list.filter(_.isRight).map(_.right.get).sorted\n        val min = list.take(K.toInt)\n        val min_map = min.map(x => (x, 1)).toMap\n        test_list.filter(x => min_map.contains(x.right.get))\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj23wwniw.scala:12:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj23wwniw.scala:12:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj23wwniw.scala:12:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgnbpgzl.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgnbpgzl.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgnbpgzl.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bcq7060.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((a, b) => a.right.getOrElse(0L) < b.right.getOrElse(0L))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnkor_b_j.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnkor_b_j.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnkor_b_j.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        test_list.sortBy(_.right.get).take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:44 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:62 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:78 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var result = List[Either[String, Long]]()\n        var min_heap = new MinHeap[Long](K.toInt)\n        for (i <- test_list) {\n            if (i.isRight) {\n                if (min_heap.size < K) {\n                    min_heap.insert(i.right.get)\n                } else {\n                    if (min_heap.peek > i.right.get) {\n                        min_heap.pop\n                        min_heap.insert(i.right.get)\n                    }\n                }\n            } else {\n                result = result :+ i\n            }\n        }\n        while (min_heap.size > 0) {\n            result = result :+ Right(min_heap.pop)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1gm6r83k.scala:7:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmin_heap\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mMinHeap\u001b[0m[\u001b[35mLong\u001b[0m](K.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: type MinHeap\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1gm6r83k.scala:28:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1gm6r83k.scala:28:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(x => x.right.getOrElse(0L))\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprtgf_m38.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprtgf_m38.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprtgf_m38.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = List[Either[String, Long]]()\n        var min_list_size = 0\n        var min_list_sum = 0L\n        var min_list_avg = 0L\n        var min_list_max = 0L\n        var min_list_min = 0L\n        for (test_case <- test_list) {\n            test_case match {\n                case Left(s) => {\n                    if (min_list_size == K) {\n                        min_list = min_list.tail\n                        min_list_size -= 1\n                    }\n                    min_list = min_list :+ test_case\n                    min_list_size += 1\n                    min_list_sum += s.toLong\n                    min_list_avg = min_list_sum / min_list_size\n                    min_list_max = min_list.map(x => x.left.get.toLong).max\n                    min_list_min = min_list.map(x => x.left.get.toLong).min\n                }\n                case Right(l) => {\n                    if (min_list_size == K) {\n                        min_list = min_list.tail\n                        min_list_size -= 1\n                    }\n                    min_list = min_list :+ test_case\n                    min_list_size += 1\n                    min_list_sum += l\n                    min_list_avg = min_list_sum / min_list_size\n                    min_list_max = min_list.map(x => x.right.get).max\n                    min_list_min = min_list.map(x => x.right.get).min\n                }\n            }\n            println(min_list_size + \" \" + min_list_sum + \" \" + min_list_avg + \" \" + min_list_max + \" \" + min_list_min)\n        }\n        return min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdt1_5jtw.scala:44:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdt1_5jtw.scala:44:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdt1_5jtw.scala:44:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val test_list_sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        test_list_sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmputv6x5dm.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Matchable..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mMatchable\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Matchable]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Matchable].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmputv6x5dm.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmputv6x5dm.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        test_list.sortWith((a, b) => a.right.get < b.right.get).take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123942,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8bwtaiee.scala:9:44 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8bwtaiee.scala:9:62 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8bwtaiee.scala:9:78 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_k = test_list.sortBy(_.right.get).take(K.toInt)\n        min_k\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123944,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj_q0bp2.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj_q0bp2.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj_q0bp2.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.slice(0, K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxz4q3wfr.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxz4q3wfr.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxz4q3wfr.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        if (test_list.isEmpty) return List()\n        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk45w0zv7.scala:11:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk45w0zv7.scala:11:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk45w0zv7.scala:11:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = new ListBuffer[Either[String, Long]]()\n        var min_value = Long.MaxValue\n        for (i <- test_list) {\n            if (i.isRight) {\n                if (i.right.get < min_value) {\n                    min_value = i.right.get\n                    min_list.clear\n                    min_list += i\n                } else if (i.right.get == min_value) {\n                    min_list += i\n                }\n            }\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123943,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzngt0c7l.scala:22:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzngt0c7l.scala:22:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzngt0c7l.scala:22:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.slice(0, K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2dcyzrb_.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2dcyzrb_.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2dcyzrb_.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = new ListBuffer[Either[String, Long]]()\n        val max_heap = new PriorityQueue[Either[String, Long]]()(Ordering.by((_: Either[String, Long]).right.get).reverse)\n        for (i <- test_list) {\n            if (max_heap.size < K) {\n                max_heap += i\n            } else {\n                if (i.right.get < max_heap.head.right.get) {\n                    max_heap.dequeue\n                    max_heap += i\n                }\n            }\n        }\n        while (max_heap.nonEmpty) {\n            min_list += max_heap.dequeue\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjxzuq3t.scala:24:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjxzuq3t.scala:24:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjxzuq3t.scala:24:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = List[Either[String, Long]]()\n        var min_list_set = Set[Either[String, Long]]()\n        for (i <- test_list) {\n            if (min_list_set.size < K) {\n                min_list_set += i\n                min_list = min_list :+ i\n            } else {\n                val max_value = min_list.map(x => x.right.get).max\n                if (i.right.get < max_value) {\n                    min_list_set.remove(min_list.filter(x => x.right.get == max_value).head)\n                    min_list_set += i\n                    min_list = min_list.filter(x => x.right.get != max_value) :+ i\n                }\n            }\n        }\n        min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpug8uqkkq.scala:24:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpug8uqkkq.scala:24:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpug8uqkkq.scala:24:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        test_list.sortBy(_.right.get).take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:44 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:62 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:78 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list += test_list(i)\n        }\n        for (i <- K.toInt until test_list.length) {\n            val max_index = min_list.indexOf(min_list.max)\n            if (test_list(i).right.get < min_list(max_index).right.get) {\n                min_list(max_index) = test_list(i)\n            }\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpxnhp3mzz.scala:11:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax_index\u001b[0m = min_list.indexOf(min_list.max)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mwhere:    B is a type variable with constraint >: Either[String, Long]\n\u001b[31m   |\u001b[0m..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mB\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[B]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[B].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxnhp3mzz.scala:19:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxnhp3mzz.scala:19:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Ak",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val test_list_sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        test_list_sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpfaaaqxvz.scala:6:74 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtest_list_sorted\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfaaaqxvz.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfaaaqxvz.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x match {\n            case Left(x) => x.toLong\n            case Right(x) => x\n        })\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ze3zkkd.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ze3zkkd.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ze3zkkd.scala:13:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = new ListBuffer[Either[String, Long]]()\n        val min_heap = new PriorityQueue[Either[String, Long]]()(Ordering.by((_: Either[String, Long]).right.get))\n        for (i <- 0 until K) {\n            min_heap.enqueue(test_list(i))\n        }\n        for (i <- K until test_list.length) {\n            if (test_list(i).right.get < min_heap.head.right.get) {\n                min_heap.dequeue()\n                min_heap.enqueue(test_list(i))\n            }\n        }\n        while (!min_heap.isEmpty) {\n            min_list += min_heap.dequeue()\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxt1xlniy.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until K) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (K : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxt1xlniy.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mif\u001b[0m (test_list(i).right.get < min_heap.head.right.get) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (i : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxt1xlniy.scala:14:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                min_heap.enqueue(test_list(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (i : Long)\n\u001b[31m   |\u001b[0m                                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxt1xlniy.scala:23:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = new ListBuffer[Either[String, Long]]()\n        val max_heap = new PriorityQueue[Either[String, Long]]()(Ordering.by((_:Either[String, Long]).right.get).reverse)\n        for (i <- test_list) {\n            if (max_heap.size < K) {\n                max_heap.enqueue(i)\n            } else {\n                if (max_heap.head.right.get > i.right.get) {\n                    max_heap.dequeue()\n                    max_heap.enqueue(i)\n                }\n            }\n        }\n        while (max_heap.nonEmpty) {\n            min_list += max_heap.dequeue()\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0kqr20e2.scala:24:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0kqr20e2.scala:24:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0kqr20e2.scala:24:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x match {\n            case Left(x) => x\n            case Right(x) => x\n        })\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpky4w_z40.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Matchable..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mMatchable\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Matchable]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Matchable].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpky4w_z40.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpky4w_z40.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_k_records = new ListBuffer[Either[String, Long]]()\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        for (i <- 0 until K.toInt) {\n            min_k_records += sorted_list(i)\n        }\n        min_k_records.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpxrhz6ssg.scala:7:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxrhz6ssg.scala:14:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxrhz6ssg.scala:14:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.slice(0, K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxz4q3wfr.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxz4q3wfr.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxz4q3wfr.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        if (K == 0) return List()\n        var min_list : List[Either[String, Long]] = List()\n        var min_value : Long = Long.MaxValue\n        var min_index : Long = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min_value) {\n                    min_value = test_list(i).right.get\n                    min_index = i\n                }\n            }\n        }\n        min_list = min_list :+ test_list(min_index.toInt)\n        minK(test_list.patch(min_index.toInt, Nil, 1), K - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwabh7xoa.scala:22:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwabh7xoa.scala:22:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwabh7xoa.scala:22:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            var min = Long.MaxValue\n            var min_index = -1\n            for (j <- 0 until test_list.length) {\n                if (test_list(j).isRight && test_list(j).right.get < min) {\n                    min = test_list(j).right.get\n                    min_index = j\n                }\n            }\n            if (min_index != -1) {\n                min_list += test_list(min_index)\n                test_list(min_index) = Left(\"\")\n            }\n        }\n        return min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppur887ua.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                test_list(min_index) = Left(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Either[String, Long]] - did you mean test_list.updated?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppur887ua.scala:24:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppur887ua.scala:24:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        // Write your code here\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppsiznphq.scala:11:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppsiznphq.scala:11:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppsiznphq.scala:11:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = new ListBuffer[Either[String, Long]]()\n        val max_list = new ListBuffer[Either[String, Long]]()\n        for (i <- test_list) {\n            if (i.isRight) {\n                if (min_list.length < K) {\n                    min_list += i\n                    if (min_list.length == K) {\n                        min_list.sortWith(_.right.get < _.right.get)\n                    }\n                } else if (i.right.get < min_list.last.right.get) {\n                    min_list.remove(min_list.length - 1)\n                    min_list += i\n                    min_list.sortWith(_.right.get < _.right.get)\n                }\n            } else {\n                if (max_list.length < K) {\n                    max_list += i\n                    if (max_list.length == K) {\n                        max_list.sortWith(_.right.get > _.right.get)\n                    }\n                } else if (i.right.get > max_list.last.right.get) {\n                    max_list.remove(max_list.length - 1)\n                    max_list += i\n                    max_list.sortWith(_.right.get > _.right.get)\n                }\n            }\n        }\n        min_list.toList ::: max_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqf01mg4u.scala:36:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqf01mg4u.scala:36:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqf01mg4u.scala:36:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.slice(0, K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhh0b683.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhh0b683.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhh0b683.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_k_list = List[Either[String, Long]]()\n        var min_k_set = Set[Long]()\n        for (i <- test_list) {\n            if (min_k_set.size < K) {\n                min_k_set += i.right.get\n                min_k_list = i :: min_k_list\n            } else {\n                val max_k = min_k_set.max\n                if (i.right.get < max_k) {\n                    min_k_set -= max_k\n                    min_k_set += i.right.get\n                    min_k_list = i :: min_k_list.filter(x => x.right.get != max_k)\n                }\n            }\n        }\n        min_k_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphnl10jhy.scala:24:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphnl10jhy.scala:24:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphnl10jhy.scala:24:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        test_list.sortBy(_.right.getOrElse(Long.MaxValue)).take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5wi78vqb.scala:9:44 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5wi78vqb.scala:9:62 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5wi78vqb.scala:9:78 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzyjgmt62.scala:6:69 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortBy(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyjgmt62.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        val min_list = sorted_list.take(K.toInt)\n        return min_list\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123949,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp4my9y42e.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Matchable..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mMatchable\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[Matchable]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Matchable].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4my9y42e.scala:14:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4my9y42e.scala:14:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            var min = Long.MaxValue\n            var min_index = -1\n            for (j <- 0 until test_list.length) {\n                if (test_list(j).isRight && test_list(j).right.get < min) {\n                    min = test_list(j).right.get\n                    min_index = j\n                }\n            }\n            if (min_index != -1) {\n                min_list += test_list(min_index)\n                test_list(min_index) = Left(\"\")\n            }\n        }\n        return min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9ph5qers.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                test_list(min_index) = Left(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Either[String, Long]] - did you mean test_list.updated?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ph5qers.scala:24:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ph5qers.scala:24:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphixx1za0.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123951,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpazz3x6f5.scala:9:10 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        })\n\u001b[31m\u001b[31m  |\u001b[0m          ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Matchable..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mMatchable\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Matchable]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Matchable].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpazz3x6f5.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpazz3x6f5.scala:13:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        // Write your code here\n        var min_list = new ListBuffer[Either[String, Long]]()\n        var min_list_size = 0\n        for (i <- test_list) {\n            if (min_list_size < K) {\n                min_list += i\n                min_list_size += 1\n            } else {\n                var max_index = 0\n                var max_value = 0L\n                for (j <- 0 until min_list_size) {\n                    if (min_list(j).right.get > max_value) {\n                        max_value = min_list(j).right.get\n                        max_index = j\n                    }\n                }\n                if (i.right.get < max_value) {\n                    min_list(max_index) = i\n                }\n            }\n        }\n        return min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123952,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnvg0qt6.scala:30:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnvg0qt6.scala:30:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnvg0qt6.scala:30:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfmrtarej.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp516ekbzc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj3tsla5.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.slice(0, K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppgx_jtpp.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppgx_jtpp.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppgx_jtpp.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            var min = test_list.head\n            for (j <- test_list) {\n                if (j.isRight && min.isRight) {\n                    if (j.right.get < min.right.get) min = j\n                }\n            }\n            test_list -= min\n            min_list += min\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpiudy_qkd.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            test_list -= min\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue -= is not a member of List[Either[String, Long]] - did you mean test_list.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiudy_qkd.scala:20:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiudy_qkd.scala:20:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        test_list.sortBy(_.right.get).take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:44 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:62 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvf88gwf.scala:9:78 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val min_list = test_list.filter(_.isRight).map(_.right.get).sorted.take(K.toInt)\n        test_list.filter(x => x.isRight && min_list.contains(x.right.get))\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsj9feu10.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsj9feu10.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsj9feu10.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1z00_n3.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1665510567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiygg4tcc.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((x, y) => x.right.getOrElse(0) < y.right.getOrElse(0))\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4vltux3v.scala:6:76 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msorted_list\u001b[0m = test_list.sortWith((\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x.right.getOrElse(\u001b[31m0\u001b[0m) < y.right.getOrElse(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue < is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4vltux3v.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4vltux3v.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123882,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwiv3q0m.scala:10:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n        var min_list = new ListBuffer[Either[String, Long]]()\n        var min_list_size = 0\n        for (test_case <- test_list) {\n            if (min_list_size < K) {\n                min_list += test_case\n                min_list_size += 1\n            } else {\n                var max_index = 0\n                var max_value = min_list(0).right.get\n                for (i <- 1 until min_list_size) {\n                    if (min_list(i).right.get > max_value) {\n                        max_value = min_list(i).right.get\n                        max_index = i\n                    }\n                }\n                if (test_case.right.get < max_value) {\n                    min_list(max_index) = test_case\n                }\n            }\n        }\n        min_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
      "timestamp": 1666123958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyadp3ots.scala:29:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyadp3ots.scala:29:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Nikhil\"\u001b[0m, \u001b[31m8l\u001b[0m))), (\u001b[31m2l\u001b[0m)).equals((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyadp3ots.scala:29:78 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(minK((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Manjeet\"\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m\"Akshat\"\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m\"Akash\"\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}