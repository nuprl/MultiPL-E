{
  "name": "mbpp_251_insert_element",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    def insertElement(list : List[String], element : String) : List[String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(insertElement((List[String](\"Red\", \"Green\", \"Black\")), (\"c\")).equals((List[String](\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"))));\n    assert(insertElement((List[String](\"python\", \"java\")), (\"program\")).equals((List[String](\"program\", \"python\", \"program\", \"java\"))));\n    assert(insertElement((List[String](\"happy\", \"sad\")), (\"laugh\")).equals((List[String](\"laugh\", \"happy\", \"laugh\", \"sad\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list.flatMap(x => List(element, x))",
    "        list.map(x => element + x)",
    "        list.flatMap(x => List(element, x))",
    "        list.flatMap(x => List(element, x))",
    "        var result = List[String]()\n        for (i <- 0 until list.length) {\n            result = result :+ element\n            result = result :+ list(i)\n        }\n        result",
    "        list.flatMap(x => List(element, x))",
    "        list.flatMap(x => List(element, x))",
    "        list.flatMap(x => List(element, x))",
    "        list.foldLeft(List[String]())((acc, x) => element :: x :: acc).reverse",
    "        list.flatMap(x => List(element, x))",
    "        list.map(x => element + x)",
    "        var result = List[String]()\n        for (i <- 0 until list.length) {\n            result = result :+ element\n            result = result :+ list(i)\n        }\n        result",
    "        list.flatMap(x => List(element, x))",
    "        list.flatMap(x => List(element, x))",
    "        var result = List[String]()\n        for (x <- list) {\n            result = element :: x :: result\n        }\n        result.reverse",
    "        list.foldLeft(List[String]())((acc, x) => element :: x :: acc).reverse",
    "        list.flatMap(x => List(element, x))",
    "        var result = List[String]()\n        for (i <- 0 until list.length) {\n            result = result :+ element\n            result = result :+ list(i)\n        }\n        result",
    "        if (list.isEmpty) List(element)\n        else element :: list.head :: insertElement(list.tail, element)",
    "        list.foldLeft(List[String]())((acc, x) => element :: x :: acc).reverse"
  ]
}