{
  "name": "mbpp_415_max_Product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp7kyqvdbl.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var max2 = arr(1)\n        var min = arr(0)\n        var min2 = arr(1)\n        for (i <- 2 until arr.length) {\n            if (arr(i) > max) {\n                max2 = max\n                max = arr(i)\n            } else if (arr(i) > max2) {\n                max2 = arr(i)\n            }\n            if (arr(i) < min) {\n                min2 = min\n                min = arr(i)\n            } else if (arr(i) < min2) {\n                min2 = arr(i)\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpvvtle498.scala:27:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvvtle498.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvvtle498.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) {\n                    max = product\n                }\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpchig1o5f.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpchig1o5f.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpchig1o5f.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for(i <- 0 until arr.length) {\n            for(j <- i + 1 until arr.length) {\n                if(arr(i) * arr(j) > max) max = arr(i) * arr(j)\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmps3es1_3b.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmps3es1_3b.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmps3es1_3b.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var maxProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            } else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > maxProduct) maxProduct = max\n            if (min > maxProduct) maxProduct = min\n            if (max < min) {\n                val temp = max\n                max = min\n                min = temp\n            }\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpqz2oxvuj.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpqz2oxvuj.scala:30:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpqz2oxvuj.scala:31:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val last = sorted(n - 1)\n        val secondLast = sorted(n - 2)\n        val thirdLast = sorted(n - 3)\n        val first = sorted(0)\n        val second = sorted(1)\n        val third = sorted(2)\n        val product1 = last * secondLast * thirdLast\n        val product2 = last * first * second\n        if (product1 > product2) product1 else product2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmptu155wao.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmptu155wao.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmptu155wao.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var max2 = arr(1)\n        var min = arr(0)\n        var min2 = arr(1)\n        for (i <- 2 until arr.length) {\n            if (arr(i) > max) {\n                max2 = max\n                max = arr(i)\n            } else if (arr(i) > max2) {\n                max2 = arr(i)\n            }\n            if (arr(i) < min) {\n                min2 = min\n                min = arr(i)\n            } else if (arr(i) < min2) {\n                min2 = arr(i)\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpvvtle498.scala:27:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvvtle498.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvvtle498.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                max = max.max(arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmporz2iy6n.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmporz2iy6n.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmporz2iy6n.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        arr.sorted.takeRight(2).product\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeacnsae0.scala:9:11 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m    Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeacnsae0.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeacnsae0.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val a = sorted(n - 1)\n        val b = sorted(n - 2)\n        a * b\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpc19trhim.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc19trhim.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc19trhim.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc19trhim.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val last = sorted(n - 1)\n        val secondLast = sorted(n - 2)\n        val thirdLast = sorted(n - 3)\n        val first = sorted(0)\n        val second = sorted(1)\n        val third = sorted(2)\n        val product1 = last * secondLast * thirdLast\n        val product2 = last * first * second\n        if (product1 > product2) product1 else product2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmptu155wao.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmptu155wao.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmptu155wao.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val p1 = sorted(n - 1) * sorted(n - 2)\n        val p2 = sorted(0) * sorted(1)\n        max(p1, p2)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp5h8kiacu.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5h8kiacu.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5h8kiacu.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) * arr(j) > max) max = arr(i) * arr(j)\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpohxponrw.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpohxponrw.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpohxponrw.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpi9b0lldc.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = arr.length\n        max(sorted(n-1) * sorted(n-2), sorted(0) * sorted(1))\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpsym9ct2e.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsym9ct2e.scala:12:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsym9ct2e.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp36zau61m.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp36zau61m.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp36zau61m.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) * arr(j) > max) {\n                    max = arr(i) * arr(j)\n                }\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpz4gyobzr.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz4gyobzr.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz4gyobzr.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var min = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            } else if (arr(i) == 0) {\n                max = 0\n                min = 0\n            } else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > maxProduct) maxProduct = max\n            if (min > maxProduct) maxProduct = min\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp6nwoofkq.scala:27:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6nwoofkq.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6nwoofkq.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) * arr(j) > max) max = arr(i) * arr(j)\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpohxponrw.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpohxponrw.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpohxponrw.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            } else if (i > max2) {\n                max2 = i\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var min = 0L\n        var maxProduct = 0L\n        for (i <- arr) {\n            if (i > 0) {\n                max = max * i\n                min = min * i\n            } else if (i == 0) {\n                max = 0\n                min = 0\n            } else {\n                val temp = max\n                max = min * i\n                min = temp * i\n            }\n            if (max > maxProduct) maxProduct = max\n            if (min > maxProduct) maxProduct = min\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpsx5_vc9r.scala:27:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsx5_vc9r.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsx5_vc9r.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            }\n            else if (i > max2) {\n                max2 = i\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpf7pt3hp_.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf7pt3hp_.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf7pt3hp_.scala:22:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            }\n            else if (i > max2) {\n                max2 = i\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpf7pt3hp_.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf7pt3hp_.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf7pt3hp_.scala:22:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sortWith(_ > _)\n        sorted(0) * sorted(1)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:12:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp5vmsok60.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5vmsok60.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5vmsok60.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val a = sorted(n - 1)\n        val b = sorted(n - 2)\n        a * b\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp7kyqvdbl.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val last = sorted(n - 1)\n        val secondLast = sorted(n - 2)\n        val thirdLast = sorted(n - 3)\n        val first = sorted(0)\n        val second = sorted(1)\n        val third = sorted(2)\n        val product1 = last * secondLast * thirdLast\n        val product2 = last * first * second\n        if (product1 > product2) product1 else product2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmptu155wao.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmptu155wao.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmptu155wao.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp5vmsok60.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5vmsok60.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5vmsok60.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp7kyqvdbl.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        var max3 = 0L\n        var min = 0L\n        var min2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max3 = max2\n                max2 = max\n                max = i\n            } else if (i > max2) {\n                max3 = max2\n                max2 = i\n            } else if (i > max3) {\n                max3 = i\n            }\n            if (i < min) {\n                min2 = min\n                min = i\n            } else if (i < min2) {\n                min2 = i\n            }\n        }\n        max(max * max2 * max3, max * min * min2)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpg9itbnz7.scala:29:8 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        max(max * max2 * max3, max * min * min2)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m        \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg9itbnz7.scala:32:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg9itbnz7.scala:33:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg9itbnz7.scala:34:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val max1 = sorted(n - 1)\n        val max2 = sorted(n - 2)\n        val min1 = sorted(0)\n        val min2 = sorted(1)\n        val p1 = max1 * max2\n        val p2 = min1 * min2\n        if (p1 > p2) p1 else p2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprlcwt2dm.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprlcwt2dm.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprlcwt2dm.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) * arr(j) > max) {\n                    max = arr(i) * arr(j)\n                }\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpyjehzah5.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyjehzah5.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyjehzah5.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        var min = 0L\n        var min2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            } else if (i > max2) {\n                max2 = i\n            }\n            if (i < min) {\n                min2 = min\n                min = i\n            } else if (i < min2) {\n                min2 = i\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp686zh4_3.scala:27:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp686zh4_3.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp686zh4_3.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) * arr(j) > max) max = arr(i) * arr(j)\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpohxponrw.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpohxponrw.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpohxponrw.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val a = sorted(n - 1)\n        val b = sorted(n - 2)\n        a * b\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            } else if (i > max2) {\n                max2 = i\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            }\n            else if (i > max2) max2 = i\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            }\n            else if (i > max2) max2 = i\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            } else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > result) result = max\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp0hh50e0s.scala:23:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0hh50e0s.scala:24:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0hh50e0s.scala:25:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpc19trhim.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc19trhim.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc19trhim.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc19trhim.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val a = sorted(n - 1)\n        val b = sorted(n - 2)\n        a * b\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sortWith(_ > _)\n        sorted(0) * sorted(1)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:12:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            } else if (i > max2) {\n                max2 = i\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzewqmt8d.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzewqmt8d.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzewqmt8d.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        arr.sortWith(_ > _).take(2).product\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:9:11 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m    Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val len = arr.length\n        val product1 = sorted(len - 1) * sorted(len - 2)\n        val product2 = sorted(0) * sorted(1)\n        if (product1 > product2) product1 else product2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpt0usuf92.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt0usuf92.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt0usuf92.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val p1 = sorted(n - 1) * sorted(n - 2)\n        val p2 = sorted(0) * sorted(1)\n        max(p1, p2)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp5h8kiacu.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5h8kiacu.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5h8kiacu.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            }\n            else if (i > max2) max2 = i\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        arr.sortWith(_ > _).take(2).product\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:9:11 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m    Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val len = sorted.length\n        val last = sorted(len - 1)\n        val secondLast = sorted(len - 2)\n        val thirdLast = sorted(len - 3)\n        val fourthLast = sorted(len - 4)\n        val fifthLast = sorted(len - 5)\n        val sixthLast = sorted(len - 6)\n        val seventhLast = sorted(len - 7)\n        val eighthLast = sorted(len - 8)\n        val ninthLast = sorted(len - 9)\n        val tenthLast = sorted(len - 10)\n        val eleventhLast = sorted(len - 11)\n        val twelfthLast = sorted(len - 12)\n        val thirteenthLast = sorted(len - 13)\n        val fourteenthLast = sorted(len - 14)\n        val fifteenthLast = sorted(len - 15)\n        val sixteenthLast = sorted(len - 16)\n        val seventeenthLast = sorted(len - 17)\n        val eighteenthLast = sorted(len - 18)\n        val nineteenthLast = sorted(len - 19)\n        val twentiethLast = sorted(len - 20)\n        val twentyFirstLast = sorted(len - 21)\n        val twentySecondLast = sorted(len - 22)\n        val twentyThirdLast = sorted(len - 23)\n        val twentyFourthLast = sorted(len - 24)\n        val twentyFifthLast = sorted(len - 25)\n        val twentySixthLast = sorted(len - 26)\n        val twentySeventhLast = sorted(len - 27)\n        val twentyEighthLast = sorted(len - 28)\n        val twentyNinthLast = sorted(len - 29)\n        val thirtiethLast = sorted(len - 30)\n        val thirtyFirstLast = sorted(len - 31)\n        val thirtySecondLast = sorted(len - 32)\n        val thirtyThirdLast = sorted(len - 33)\n        val thirtyFourthLast = sorted(len - 34)\n        val thirtyFifthLast = sorted(len - 35)\n        val thirtySixthLast = sorted(len - 36)\n        val thirtySeventhLast = sorted(len - 37)\n        val thirtyEighthLast = sorted(len - 38)\n        val thirty\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn6t1hqkd.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn6t1hqkd.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpn6t1hqkd.scala:49:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpn6t1hqkd.scala:50:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpn6t1hqkd.scala:51:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        arr.sortWith(_ > _).take(2).product\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:9:11 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m    Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val a = sorted(n - 1)\n        val b = sorted(n - 2)\n        val c = sorted(0)\n        val d = sorted(1)\n        max(a * b, c * d)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp_a6bnrjw.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_a6bnrjw.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_a6bnrjw.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var min = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            }\n            else if (arr(i) == 0) {\n                max = 0\n                min = 0\n            }\n            else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > maxProduct) maxProduct = max\n            if (min > maxProduct) maxProduct = min\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpsah60z4t.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsah60z4t.scala:30:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsah60z4t.scala:31:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val len = sorted.length\n        val last = sorted(len - 1)\n        val secondLast = sorted(len - 2)\n        val first = sorted(0)\n        val secondFirst = sorted(1)\n        val firstProduct = first * secondFirst\n        val lastProduct = last * secondLast\n        if (firstProduct > lastProduct) firstProduct else lastProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpjdw68l1g.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjdw68l1g.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjdw68l1g.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var max2 = arr(1)\n        var min = arr(0)\n        var min2 = arr(1)\n        for (i <- 2 until arr.length) {\n            if (arr(i) > max) {\n                max2 = max\n                max = arr(i)\n            }\n            else if (arr(i) > max2) {\n                max2 = arr(i)\n            }\n            if (arr(i) < min) {\n                min2 = min\n                min = arr(i)\n            }\n            else if (arr(i) < min2) {\n                min2 = arr(i)\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpiojcb4qo.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiojcb4qo.scala:30:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiojcb4qo.scala:31:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpi9b0lldc.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp5vmsok60.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5vmsok60.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5vmsok60.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = arr(i) * max\n            val b = arr(i) * min\n            max = max(a, b, arr(i))\n            min = min(a, b, arr(i))\n            result = max(result, max)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpx_amx117.scala:12:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max = max(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpx_amx117.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            min = min(a, b, arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpx_amx117.scala:14:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpx_amx117.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpx_amx117.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        arr.sorted.takeRight(2).product\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeacnsae0.scala:9:11 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m    Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeacnsae0.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeacnsae0.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val last = sorted.length - 1\n        val product1 = sorted(last) * sorted(last - 1)\n        val product2 = sorted(0) * sorted(1)\n        if (product1 > product2) product1 else product2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpofyjyisf.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpofyjyisf.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpofyjyisf.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val len = sorted.length\n        val last = sorted(len - 1)\n        val secondLast = sorted(len - 2)\n        val thirdLast = sorted(len - 3)\n        val first = sorted(0)\n        val second = sorted(1)\n        val third = sorted(2)\n        val max1 = last * secondLast * thirdLast\n        val max2 = last * first * second\n        if (max1 > max2) max1 else max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpf0uu62vo.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf0uu62vo.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf0uu62vo.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpi9b0lldc.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpk4cdohub.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk4cdohub.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk4cdohub.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpe2xm__1m.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe2xm__1m.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe2xm__1m.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sortWith(_ > _)\n        sorted(0) * sorted(1)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:12:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            } else if (i > max2) {\n                max2 = i\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        arr.sortWith(_ > _).take(2).product\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:9:11 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m    Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        arr.sortWith(_ > _).take(2).product\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:9:11 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m    Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpl6pemxca.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl6pemxca.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl6pemxca.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            } else if (i > max2) {\n                max2 = i\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpi9b0lldc.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        arr.sortWith(_ > _).take(2).product\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:9:11 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m    Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val a = sorted(n - 1)\n        val b = sorted(n - 2)\n        a * b\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var secondMax = arr(0)\n        var min = arr(0)\n        var secondMin = arr(0)\n        for (i <- 1 to arr.length - 1) {\n            if (arr(i) > max) {\n                secondMax = max\n                max = arr(i)\n            } else if (arr(i) > secondMax) {\n                secondMax = arr(i)\n            }\n            if (arr(i) < min) {\n                secondMin = min\n                min = arr(i)\n            } else if (arr(i) < secondMin) {\n                secondMin = arr(i)\n            }\n        }\n        max(max * secondMax, min * secondMin)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpiqg7o9_v.scala:24:8 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        max(max * secondMax, min * secondMin)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m        \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiqg7o9_v.scala:27:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiqg7o9_v.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpiqg7o9_v.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max1 = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max1\n                max1 = max\n                max = i\n            }\n            else if (i > max1) {\n                max2 = max1\n                max1 = i\n            }\n            else if (i > max2) {\n                max2 = i\n            }\n        }\n        max * max1 * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpb7ltbtoo.scala:26:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb7ltbtoo.scala:27:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb7ltbtoo.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmplxyyppsk.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmplxyyppsk.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmplxyyppsk.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max1 = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max1\n                max1 = max\n                max = i\n            } else if (i > max1) {\n                max2 = max1\n                max1 = i\n            } else if (i > max2) {\n                max2 = i\n            }\n        }\n        max * max1 * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpssd9e_g9.scala:24:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpssd9e_g9.scala:25:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpssd9e_g9.scala:26:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpi9b0lldc.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi9b0lldc.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val last = sorted(n - 1)\n        val secondLast = sorted(n - 2)\n        val thirdLast = sorted(n - 3)\n        val first = sorted(0)\n        val second = sorted(1)\n        val third = sorted(2)\n        val max1 = last * secondLast * thirdLast\n        val max2 = last * first * second\n        if (max1 > max2) max1 else max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2c5d6jf4.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2c5d6jf4.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2c5d6jf4.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val a = sorted(n - 1)\n        val b = sorted(n - 2)\n        a * b\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp7kyqvdbl.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sortWith(_ > _)\n        sorted(0) * sorted(1)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:12:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val len = sorted.length\n        val last = sorted(len - 1)\n        val secondLast = sorted(len - 2)\n        val thirdLast = sorted(len - 3)\n        val first = sorted(0)\n        val second = sorted(1)\n        val third = sorted(2)\n        val firstProduct = first * second * thirdLast\n        val secondProduct = first * secondLast * thirdLast\n        val thirdProduct = first * secondLast * last\n        val fourthProduct = first * secondLast * third\n        val fifthProduct = first * second * last\n        val sixthProduct = first * second * third\n        val seventhProduct = first * secondLast * last\n        val eighthProduct = first * secondLast * third\n        val ninthProduct = first * second * thirdLast\n        val tenthProduct = first * secondLast * last\n        val eleventhProduct = first * secondLast * thirdLast\n        val twelfthProduct = first * second * third\n        val thirteenthProduct = first * secondLast * last\n        val fourteenthProduct = first * secondLast * third\n        val fifteenthProduct = first * second * thirdLast\n        val sixteenthProduct = first * secondLast * last\n        val seventeenthProduct = first * secondLast * thirdLast\n        val eighteenthProduct = first * second * third\n        val nineteenthProduct = first * secondLast * last\n        val twentiethProduct = first * secondLast * third\n        val twentyfirstProduct = first * second * thirdLast\n        val twentysecondProduct = first * secondLast * last\n        val twentythirdProduct = first * secondLast * thirdLast\n        val twentyfourthProduct = first * second * third\n        val twentyfifthProduct = first * secondLast * last\n        val twentysixthProduct = first * secondLast * third\n        val twentyseventhProduct = first * second * thirdLast\n        val twentyeighthProduct = first * secondLast * last\n        val twentyninthProduct = first * secondLast * thirdLast\n        val thirtiethProduct = first * second * third\n        val thirtyfirstProduct = first * secondLast * last\n        val thirtysecondProduct = first * secondLast * third\n        val thirtythirdProduct = first * second * thirdLast\n        val thirtyfourthProduct = first * secondLast\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0bb14ksq.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0bb14ksq.scala:50:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0bb14ksq.scala:51:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0bb14ksq.scala:52:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            }\n            else if (i > max2) max2 = i\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp7kyqvdbl.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp3wzapscx.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3wzapscx.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3wzapscx.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > max) {\n                max2 = max\n                max = arr(i)\n            }\n            else if (arr(i) > max2) {\n                max2 = arr(i)\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp1cice30v.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1cice30v.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1cice30v.scala:22:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var max2 = arr(1)\n        var min = arr(0)\n        var min2 = arr(1)\n        for (i <- 2 until arr.length) {\n            if (arr(i) > max) {\n                max2 = max\n                max = arr(i)\n            } else if (arr(i) > max2) {\n                max2 = arr(i)\n            }\n            if (arr(i) < min) {\n                min2 = min\n                min = arr(i)\n            } else if (arr(i) < min2) {\n                min2 = arr(i)\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510379,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpvvtle498.scala:27:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvvtle498.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvvtle498.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val last = sorted(n - 1)\n        val secondLast = sorted(n - 2)\n        val thirdLast = sorted(n - 3)\n        val first = sorted(0)\n        val second = sorted(1)\n        val third = sorted(2)\n        val a = last * secondLast * thirdLast\n        val b = last * first * second\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp0i9q9tes.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0i9q9tes.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0i9q9tes.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        if (arr.length < 2) throw new IllegalArgumentException(\"List must contain at least two elements\")\n        var max1 = Long.MinValue\n        var max2 = Long.MinValue\n        var min1 = Long.MaxValue\n        var min2 = Long.MaxValue\n        for (x <- arr) {\n            if (x > max1) {\n                max2 = max1\n                max1 = x\n            } else if (x > max2) {\n                max2 = x\n            }\n            if (x < min1) {\n                min2 = min1\n                min1 = x\n            } else if (x < min2) {\n                min2 = x\n            }\n        }\n        max(max1 * max2, min1 * min2)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpof4qq_tj.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpof4qq_tj.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpof4qq_tj.scala:30:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpij1fisd0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpij1fisd0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpij1fisd0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val len = sorted.length\n        val product1 = sorted(0) * sorted(1)\n        val product2 = sorted(len - 1) * sorted(len - 2)\n        if (product1 > product2) product1 else product2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpk4yuqmtx.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk4yuqmtx.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk4yuqmtx.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var maxProduct = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i) < 0) {\n                val temp = max\n                max = min\n                min = temp\n            }\n            max = max(arr(i), max * arr(i))\n            min = min(arr(i), min * arr(i))\n            maxProduct = max(maxProduct, max)\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcg3l02re.scala:15:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            max = max(arr(i), max * arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcg3l02re.scala:16:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            min = min(arr(i), min * arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcg3l02re.scala:17:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            maxProduct = max(maxProduct, max)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcg3l02re.scala:22:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcg3l02re.scala:23:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val p1 = sorted(n - 1) * sorted(n - 2)\n        val p2 = sorted(0) * sorted(1)\n        max(p1, p2)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp5h8kiacu.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5h8kiacu.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5h8kiacu.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        if (arr.length < 2) throw new IllegalArgumentException(\"List must contain at least 2 elements\")\n        val sorted = arr.sorted\n        val last = sorted.last\n        val secondLast = sorted(sorted.length - 2)\n        last * secondLast\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp4h4hzjz8.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4h4hzjz8.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4h4hzjz8.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmplxyyppsk.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmplxyyppsk.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmplxyyppsk.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpmp1if_s1.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmp1if_s1.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmp1if_s1.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sortWith(_ > _)\n        sorted(0) * sorted(1)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeznc6w9u.scala:12:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var min = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            } else if (arr(i) == 0) {\n                max = 0\n                min = 0\n            } else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > maxProduct) maxProduct = max\n            if (min > maxProduct) maxProduct = min\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp6nwoofkq.scala:27:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6nwoofkq.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6nwoofkq.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            } else if (i > max2) {\n                max2 = i\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnfmbsttt.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var secondMax = arr(0)\n        var min = arr(0)\n        var secondMin = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i) > max) {\n                secondMax = max\n                max = arr(i)\n            } else if (arr(i) > secondMax) {\n                secondMax = arr(i)\n            }\n            if (arr(i) < min) {\n                secondMin = min\n                min = arr(i)\n            } else if (arr(i) < secondMin) {\n                secondMin = arr(i)\n            }\n        }\n        max(max * secondMax, min * secondMin)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123669,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp9kspkq8n.scala:24:8 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        max(max * secondMax, min * secondMin)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m        \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9kspkq8n.scala:27:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9kspkq8n.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9kspkq8n.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            }\n            else if (i > max2) max2 = i\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var min = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            } else if (arr(i) == 0) {\n                max = 0\n                min = 0\n            } else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > maxProduct) maxProduct = max\n            if (min > maxProduct) maxProduct = min\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp6nwoofkq.scala:27:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6nwoofkq.scala:28:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6nwoofkq.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        arr.sortWith(_ > _).take(2).product\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:9:11 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m    Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:10:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz6rs806r.scala:11:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val a = sorted(n - 1)\n        val b = sorted(n - 2)\n        a * b\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            }\n            else if (i > max2) {\n                max2 = i\n            }\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpf7pt3hp_.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf7pt3hp_.scala:21:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf7pt3hp_.scala:22:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var max2 = 0L\n        for (i <- arr) {\n            if (i > max) {\n                max2 = max\n                max = i\n            }\n            else if (i > max2) max2 = i\n        }\n        max * max2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzwx7shp0.scala:20:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val len = sorted.length\n        val last = sorted(len - 1)\n        val secondLast = sorted(len - 2)\n        max(last * secondLast, last * sorted(0) * sorted(1))\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpq6yez490.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq6yez490.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq6yez490.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max max (arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj81yuimq.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val prod = arr(i) * arr(j)\n                if (prod > max) max = prod\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnezdufs0.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val a = sorted(n - 1)\n        val b = sorted(n - 2)\n        a * b\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:14:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprtznew_0.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        var min = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > 0) {\n                max = max * arr(i)\n                min = min * arr(i)\n            }\n            else if (arr(i) == 0) {\n                max = 0\n                min = 0\n            }\n            else {\n                val temp = max\n                max = min * arr(i)\n                min = temp * arr(i)\n            }\n            if (max > maxProduct) maxProduct = max\n            if (min > maxProduct) maxProduct = min\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpsah60z4t.scala:29:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsah60z4t.scala:30:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpsah60z4t.scala:31:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val last = sorted(n - 1)\n        val secondLast = sorted(n - 2)\n        val first = sorted(0)\n        val secondFirst = sorted(1)\n        max(last * secondLast, first * secondFirst)\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpgaqzo8jl.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgaqzo8jl.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgaqzo8jl.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > maxProduct) maxProduct = product\n            }\n        }\n        maxProduct\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpe2xm__1m.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe2xm__1m.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe2xm__1m.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n        val last = sorted(n - 1)\n        val secondLast = sorted(n - 2)\n        val first = sorted(0)\n        val second = sorted(1)\n        val product1 = last * secondLast\n        val product2 = first * second\n        if (product1 > product2) product1 else product2\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123673,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpx4s019lk.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpx4s019lk.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpx4s019lk.scala:19:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i) < 0) {\n                val temp = max\n                max = min\n                min = temp\n            }\n            max = max(arr(i), max * arr(i))\n            min = min(arr(i), min * arr(i))\n            result = max(result, max)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1666123674,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcb_4n1v6.scala:15:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            max = max(arr(i), max * arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcb_4n1v6.scala:16:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            min = min(arr(i), min * arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcb_4n1v6.scala:17:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            result = max(result, max)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcb_4n1v6.scala:22:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcb_4n1v6.scala:23:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val product = arr(i) * arr(j)\n                if (product > max) max = product\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpobagsq26.scala:18:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                max = max(max, arr(i) * arr(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))) == (7l, 8l));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))) == (-4l, -6l));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (2l, 3l));\n    }\n\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp7kyqvdbl.scala:9:22 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                max = max(max, arr(i) * arr(j))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:15:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))) == (\u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:16:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, -\u001b[31m1l\u001b[0m.toLong, -\u001b[31m2l\u001b[0m.toLong, -\u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, -\u001b[31m6l\u001b[0m.toLong))) == (-\u001b[31m4l\u001b[0m, -\u001b[31m6l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7kyqvdbl.scala:17:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxProduct((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong))) == (\u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m  Values of types Long and (Long, Long) cannot be compared with == or !=\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}