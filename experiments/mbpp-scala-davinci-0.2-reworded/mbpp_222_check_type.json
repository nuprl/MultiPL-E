{
  "name": "mbpp_222_check_type",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    def checkType(test_tuple : Any) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkType((Any((5l, 6l, 7l, 3l, 5l, 6l)))) == (true));\n    assert(checkType((Any((1l, 2l, \"4\")))) == (false));\n    assert(checkType((Any((3l, 2l, 1l, 4l, 5l)))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_list_type = test_tuple_list.map(x => x.getClass.getName)\n        test_tuple_list_type.distinct.length == 1",
    "        val data_type = test_tuple.getClass.getName.split(\"\\\\.\").last\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (i.getClass.getName.split(\"\\\\.\").last != data_type) {\n                return false\n            }\n        }\n        return true",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case _ => false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        test_tuple match {\n            case (x, y) => x.isInstanceOf[Int] && y.isInstanceOf[Int]\n            case (x, y, z) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int]\n            case (x, y, z, w) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int]\n            case (x, y, z, w, v) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int] && v.isInstanceOf[Int]\n            case (x, y, z, w, v, u) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int] && v.isInstanceOf[Int] && u.isInstanceOf[Int]\n            case (x, y, z, w, v, u, t) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int] && v.isInstanceOf[Int] && u.isInstanceOf[Int] && t.isInstanceOf[Int]\n            case (x, y, z, w, v, u, t, s) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int] && v.isInstanceOf[Int] && u.isInstanceOf[Int] && t.isInstanceOf[Int] && s.isInstanceOf[Int]\n            case (x, y, z, w, v, u, t, s, r) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int] && v.isInstanceOf[Int] && u.isInstanceOf[Int] && t.isInstanceOf[Int] && s.isInstanceOf",
    "        test_tuple match {\n            case (x : Int, y : Int, z : Int) => true\n            case (x : Double, y : Double, z : Double) => true\n            case (x : String, y : String, z : String) => true\n            case (x : Boolean, y : Boolean, z : Boolean) => true\n            case _ => false\n        }",
    "        var flag = true\n        var data_type = test_tuple.getClass\n        for (i <- 0 until test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass != data_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = true\n        var temp = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 0 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (temp != test_tuple.asInstanceOf[Product].productElement(i).getClass) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        var tuple_type_list_index = 0\n        var check_type = true\n        while (tuple_type_list_index < tuple_type_list_size - 1) {\n            if (tuple_type_list(tuple_type_list_index) != tuple_type_list(tuple_type_list_index + 1)) {\n                check_type = false\n            }\n            tuple_type_list_index += 1\n        }\n        check_type",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_size - 1)\n        val tuple_type_list_last_size = tuple_type_list_last.size\n        val tuple_type_list_last_sub = tuple_type_list_last.substring(0, tuple_type_list_last_size - 1)\n        val tuple_type_list_last_sub_list = tuple_type_list_last_sub.split(\",\")\n        val tuple_type_list_last_sub_list_size = tuple_type_list_last_sub_list.size\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_sub_list_size - 1) {\n            if (tuple_type_list_last_sub_list(i) != tuple_type_list_last_sub_list(i + 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        val tuple_type_list_last_element = tuple_type_list(tuple_type_list_size - 1)\n        val tuple_type_list_last_element_list = tuple_type_list_last_element.split(\"\\\\]\")\n        val tuple_type_list_last_element_list_size = tuple_type_list_last_element_list.size\n        val tuple_type_list_last_element_list_last_element = tuple_type_list_last_element_list(tuple_type_list_last_element_list_size - 1)\n        val tuple_type_list_last_element_list_last_element_list = tuple_type_list_last_element_list_last_element.split(\",\")\n        val tuple_type_list_last_element_list_last_element_list_size = tuple_type_list_last_element_list_last_element_list.size\n        val tuple_type_list_last_element_list_last_element_list_last_element = tuple_type_list_last_element_list_last_element_list(tuple_type_list_last_element_list_last_element_list_size - 1)\n        val tuple_type_list_last_element_list_last_element_list_last_element_list = tuple_type_list_last_element_list_last_element_list_last_element.split(\"\\\\$\")\n        val tuple_type_list_last_element_list_last_element_list_last_element_list_size = tuple_type_list_last_element_list_last_element_list_last_element_list.size\n        val tuple_type_list_last_element_list_last_element_list_last_element_list_last_element = tuple_type_list_last_element_list_last_element_list_last_element_list(tuple_type_list_last_",
    "        test_tuple match {\n            case (x : Int, y : Int, z : Int) => true\n            case (x : String, y : String, z : String) => true\n            case (x : Double, y : Double, z : Double) => true\n            case (x : Float, y : Float, z : Float) => true\n            case _ => false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_new = tuple_type_list(1).split(\"\\\\]\")\n        val tuple_type_list_new_new = tuple_type_list_new(0).split(\",\")\n        val tuple_type_list_new_new_new = tuple_type_list_new_new.map(x => x.split(\"\\\\.\")(1))\n        val tuple_type_list_new_new_new_new = tuple_type_list_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new = tuple_type_list_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new_new = tuple_type_list_new_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new_new_new = tuple_type_list_new_new_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new_new_new_new = tuple_type_list_new_new_new_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new_new_new_new_new = tuple_type_list_new_new_new_new_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new_new_new_new_new_new = tuple_type_list_new_new_new_new_new_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        flag",
    "        var flag = true\n        var first_type = test_tuple.getClass.getName\n        for (i <- 0 to test_tuple.productArity - 1) {\n            if (test_tuple.productElement(i).getClass.getName != first_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = true\n        var data_type = test_tuple.asInstanceOf[Product].productElement(0).getClass.getName\n        for (i <- 0 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != data_type) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        if (tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val first_type = tuple_type_list(1).split(\"\\\\]\")(0)\n            for (i <- 1 until tuple_type_list_size) {\n                val current_type = tuple_type_list(i).split(\"\\\\]\")(0)\n                if (current_type != first_type) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_1 = tuple_type_list(1).split(\"\\\\]\")\n        val tuple_type_list_2 = tuple_type_list_1(0).split(\",\")\n        val tuple_type_list_3 = tuple_type_list_2.map(x => x.trim)\n        val tuple_type_list_4 = tuple_type_list_3.map(x => x.split(\"\\\\.\"))\n        val tuple_type_list_5 = tuple_type_list_4.map(x => x(x.length - 1))\n        val tuple_type_list_6 = tuple_type_list_5.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_7 = tuple_type_list_6.map(x => x(x.length - 1))\n        val tuple_type_list_8 = tuple_type_list_7.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_9 = tuple_type_list_8.map(x => x(x.length - 1))\n        val tuple_type_list_10 = tuple_type_list_9.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_11 = tuple_type_list_10.map(x => x(x.length - 1))\n        val tuple_type_list_12 = tuple_type_list_11.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_13 = tuple_type_list_12.map(x => x(x.length - 1))\n        val tuple_type_list_14 = tuple_type_list_13.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_15 = tuple_type_list_14.map(x => x(x.length - 1))\n        val tuple_type_list_16 = tuple_type_list_15.map(x => x.split(\"\\\\$\"))\n        val tuple",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_size - 1)\n        val test_tuple_type_list_last_list = test_tuple_type_list_last.split(\"\\\\]\")\n        val test_tuple_type_list_last_list_size = test_tuple_type_list_last_list.size\n        val test_tuple_type_list_last_list_last = test_tuple_type_list_last_list(test_tuple_type_list_last_list_size - 1)\n        val test_tuple_type_list_last_list_last_list = test_tuple_type_list_last_list_last.split(\"\\\\.\")\n        val test_tuple_type_list_last_list_last_list_size = test_tuple_type_list_last_list_last_list.size\n        val test_tuple_type_list_last_list_last_list_last = test_tuple_type_list_last_list_last_list(test_tuple_type_list_last_list_last_list_size - 1)\n        val test_tuple_type_list_last_list_last_list_last_list = test_tuple_type_list_last_list_last_list_last.split(\"\\\\$\")\n        val test_tuple_type_list_last_list_last_list_last_list_size = test_tuple_type_list_last_list_last_list_last_list.size\n        val test_tuple_type_list_last_list_last_list_last_list_last = test_tuple_type_list_last_list_last_list_last_list(test_tuple_type_list_last_list_last",
    "        test_tuple match {\n            case (x, y) => {\n                if (x.getClass == y.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z, a) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z, a, b) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z, a, b, c) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z, a, b, c, d) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z, a, b, c, d, e) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_size = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_size) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        flag",
    "        test_tuple match {\n            case (x, y) => {\n                if (x.getClass == y.getClass) true\n                else false\n            }\n            case _ => false\n        }",
    "        var data_type = test_tuple.getClass.getName\n        var flag = true\n        test_tuple.asInstanceOf[Product].productIterator.foreach {\n            i => if(i.getClass.getName != data_type) flag = false\n        }\n        flag",
    "        test_tuple match {\n            case (x : Int, y : Int, z : Int) => true\n            case (x : String, y : String, z : String) => true\n            case (x : Double, y : Double, z : Double) => true\n            case _ => false\n        }",
    "        var flag = true\n        for(i <- 0 until test_tuple.productArity) {\n            if(test_tuple.productElement(i).getClass != test_tuple.productElement(0).getClass) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_len = tuple_type_list.length\n        if (tuple_type_list_len == 1) {\n            return true\n        }\n        else {\n            val tuple_type_list_last = tuple_type_list(tuple_type_list_len - 1)\n            val tuple_type_list_last_len = tuple_type_list_last.length\n            val tuple_type_list_last_new = tuple_type_list_last.substring(0, tuple_type_list_last_len - 1)\n            val tuple_type_list_last_new_list = tuple_type_list_last_new.split(\",\")\n            val tuple_type_list_last_new_list_len = tuple_type_list_last_new_list.length\n            val tuple_type_list_last_new_list_first = tuple_type_list_last_new_list(0)\n            for (i <- 1 to tuple_type_list_last_new_list_len - 1) {\n                if (tuple_type_list_last_new_list(i) != tuple_type_list_last_new_list_first) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        var flag = true\n        var first_type = test_tuple.asInstanceOf[Product].productElement(0).getClass.toString\n        for (i <- 1 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (first_type != test_tuple.asInstanceOf[Product].productElement(i).getClass.toString) {\n                flag = false\n            }\n        }\n        return flag",
    "        val t = test_tuple.asInstanceOf[Product]\n        val types = t.productIterator.map(_.getClass.getName).toSet\n        if (types.size == 1) true else false",
    "        var flag = true\n        val test_tuple_type = test_tuple.getClass.getName\n        for (i <- 0 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != test_tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_arr = tuple_type.split(\"\\\\[\")\n        val tuple_type_arr_len = tuple_type_arr.length\n        val tuple_type_arr_last = tuple_type_arr(tuple_type_arr_len - 1)\n        val tuple_type_arr_last_arr = tuple_type_arr_last.split(\"\\\\.\")\n        val tuple_type_arr_last_arr_len = tuple_type_arr_last_arr.length\n        val tuple_type_arr_last_arr_last = tuple_type_arr_last_arr(tuple_type_arr_last_arr_len - 1)\n        if (tuple_type_arr_last_arr_last == \"Object\") {\n            return true\n        }\n        return false",
    "        val tuple = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n        val type_list = List(tuple._1.getClass, tuple._2.getClass, tuple._3.getClass)\n        val type_set = type_list.toSet\n        if (type_set.size == 1)\n            return true\n        else\n            return false",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            val tuple_elements = test_tuple.asInstanceOf[Product].productIterator.toList\n            val tuple_types = tuple_elements.map(x => x.getClass.getName)\n            val tuple_types_set = tuple_types.toSet\n            if (tuple_types_set.size == 1) {\n                true\n            } else {\n                false\n            }\n        } else {\n            false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_length = tuple_type_list_last_last_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_last_list_length - 1) {\n            if (tuple_type_list_last_last_list(i) != tuple_type_list_last_last_list(i + 1)) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.toString\n        }\n        type_list.distinct.length == 1",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_list_type = test_tuple_list.map(x => x.getClass.getName)\n        val test_tuple_list_type_set = test_tuple_list_type.toSet\n        if (test_tuple_list_type_set.size == 1) true\n        else false",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        return false",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_length = tuple_type_list_last_last_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_last_list_length - 1) {\n            if (tuple_type_list_last_last_list(i) != tuple_type_list_last_last_list(i + 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        return false",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_length = tuple_type_list_last_last_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_last_list_length - 1) {\n            if (tuple_type_list_last_last_list(i) != tuple_type_list_last_last_list(i + 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_type = test_tuple_list(0).getClass\n        test_tuple_list.forall(x => x.getClass == test_tuple_type)",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_length = test_tuple_type_list.length\n        val test_tuple_type_list_length_minus_one = test_tuple_type_list_length - 1\n        val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_length_minus_one)\n        val test_tuple_type_list_last_list = test_tuple_type_list_last.split(\"\\\\]\")\n        val test_tuple_type_list_last_list_length = test_tuple_type_list_last_list.length\n        val test_tuple_type_list_last_list_length_minus_one = test_tuple_type_list_last_list_length - 1\n        val test_tuple_type_list_last_list_last = test_tuple_type_list_last_list(test_tuple_type_list_last_list_length_minus_one)\n        val test_tuple_type_list_last_list_last_list = test_tuple_type_list_last_list_last.split(\"\\\\.\")\n        val test_tuple_type_list_last_list_last_list_length = test_tuple_type_list_last_list_last_list.length\n        val test_tuple_type_list_last_list_last_list_length_minus_one = test_tuple_type_list_last_list_last_list_length - 1\n        val test_tuple_type_list_last_list_last_list_last = test_tuple_type_list_last_list_last_list(test_tuple_type_list_last_list_last_list_length_minus_one)\n        val test_tuple_type_list_last_list_last_list_last_list = test_tuple_type_list_last_list_",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            val tuple_elements = test_tuple.asInstanceOf[Product].productIterator\n            var element_type = tuple_elements.next.getClass.getName\n            for (i <- 1 until tuple_length) {\n                if (element_type != tuple_elements.next.getClass.getName) {\n                    return false\n                }\n            }\n            return true\n        }\n        else {\n            return false\n        }",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        test_tuple match {\n            case (x, y) => {\n                if (x.getClass == y.getClass) true\n                else false\n            }\n            case _ => false\n        }",
    "        val tuple = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n        val type1 = tuple._1.getClass.getName\n        val type2 = tuple._2.getClass.getName\n        val type3 = tuple._3.getClass.getName\n        if (type1 == type2 && type2 == type3) {\n            return true\n        }\n        return false",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && x.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass && x.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass && x.getClass == c.getClass && x.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass && x.getClass == c.getClass && x.getClass == d.getClass && x.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass && x.getClass == c.getClass && x.getClass == d.getClass && x.getClass == e.getClass && x.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type == \"scala.Tuple2\") {\n            val t = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n            val t1 = t._1.getClass.getName\n            val t2 = t._2.getClass.getName\n            if (t1 == t2) {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else if (tuple_type == \"scala.Tuple3\") {\n            val t = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n            val t1 = t._1.getClass.getName\n            val t2 = t._2.getClass.getName\n            val t3 = t._3.getClass.getName\n            if (t1 == t2 && t2 == t3) {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else if (tuple_type == \"scala.Tuple4\") {\n            val t = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n            val t1 = t._1.getClass.getName\n            val t2 = t._2.getClass.getName\n            val t3 = t._3.getClass.getName\n            val t4 = t._4.getClass.getName\n            if (t1 == t2 && t2 == t3 && t3 == t4) {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else if (tuple_type == \"scala.Tuple5\") {\n            val t = test_tuple.asInstanceOf[Tuple5[Any, Any, Any, Any, Any]]\n            val t1 = t._1.getClass.getName\n            val t2 = t._2.getClass.getName\n            val t3 = t._3.getClass.getName\n            val t4 = t._4.getClass.getName\n            val t5 = t._5.get",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        var flag = true\n        for (i <- 1 until tuple_type_list_size) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\", \"java.lang.Boolean\")\n        if (tuple_type_list.contains(tuple_type)) {\n            true\n        } else {\n            false\n        }",
    "        val test_tuple_type = test_tuple.getClass.getName\n        var flag = true\n        test_tuple match {\n            case (x, y) => {\n                if (x.getClass.getName != test_tuple_type || y.getClass.getName != test_tuple_type) {\n                    flag = false\n                }\n            }\n            case (x, y, z) => {\n                if (x.getClass.getName != test_tuple_type || y.getClass.getName != test_tuple_type || z.getClass.getName != test_tuple_type) {\n                    flag = false\n                }\n            }\n            case (x, y, z, a) => {\n                if (x.getClass.getName != test_tuple_type || y.getClass.getName != test_tuple_type || z.getClass.getName != test_tuple_type || a.getClass.getName != test_tuple_type) {\n                    flag = false\n                }\n            }\n            case (x, y, z, a, b) => {\n                if (x.getClass.getName != test_tuple_type || y.getClass.getName != test_tuple_type || z.getClass.getName != test_tuple_type || a.getClass.getName != test_tuple_type || b.getClass.getName != test_tuple_type) {\n                    flag = false\n                }\n            }\n            case (x, y, z, a, b, c) => {\n                if (x.getClass.getName != test_tuple_type || y.getClass.getName != test_tuple_type || z.getClass.getName != test_tuple_type || a.getClass.getName != test_tuple_type || b.getClass.getName != test_tuple_type || c.getClass.getName != test_tuple_type) {\n                    flag = false\n                }\n            }\n            case (x, y, z, a, b, c, d) => {\n                if (x.getClass",
    "        var flag = true\n        var i = 0\n        var type_check = test_tuple.asInstanceOf[Product].productElement(i).getClass.toString\n        while (i < test_tuple.asInstanceOf[Product].productArity && flag) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.toString != type_check) {\n                flag = false\n            }\n            i += 1\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b, c) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass) {\n                    return true\n                }\n                else {\n                    return false\n                }\n            }\n            case (a, b) => {\n                if (a.getClass == b.getClass) {\n                    return true\n                }\n                else {\n                    return false\n                }\n            }\n            case _ => {\n                return false\n            }\n        }",
    "        var flag = true\n        var type_of_first = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_split = tuple_type.split(\"\\\\[\")\n        val tuple_type_split_2 = tuple_type_split(1).split(\"\\\\]\")\n        val tuple_type_split_3 = tuple_type_split_2(0).split(\",\")\n        val tuple_type_split_4 = tuple_type_split_3.map(x => x.split(\"\\\\.\"))\n        val tuple_type_split_5 = tuple_type_split_4.map(x => x(x.length - 1))\n        val tuple_type_split_6 = tuple_type_split_5.map(x => x.split(\"\\\\$\"))\n        val tuple_type_split_7 = tuple_type_split_6.map(x => x(x.length - 1))\n        val tuple_type_split_8 = tuple_type_split_7.map(x => x.split(\"\\\\$mc\"))\n        val tuple_type_split_9 = tuple_type_split_8.map(x => x(x.length - 1))\n        val tuple_type_split_10 = tuple_type_split_9.map(x => x.split(\"\\\\$iw\"))\n        val tuple_type_split_11 = tuple_type_split_10.map(x => x(x.length - 1))\n        val tuple_type_split_12 = tuple_type_split_11.map(x => x.split(\"\\\\$mc\"))\n        val tuple_type_split_13 = tuple_type_split_12.map(x => x(x.length - 1))\n        val tuple_type_split_14 = tuple_type_split_13.map(x => x.split(\"\\\\$iw\"))\n        val tuple_type_split_15 = tuple_type_split_14.map(x => x(x.length - 1))\n        val tuple_type_split_16 = tuple_type_split_15.map(x => x.split(\"\\\\$mc\"))\n        val tuple_type_split_17 = tuple_type_split_16.map(x => x(x.",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_size - 1)\n        val tuple_type_list_last_size = tuple_type_list_last.size\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_size - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_size = tuple_type_list_last_last_list.size\n        var i = 0\n        var flag = true\n        while (i < tuple_type_list_last_last_list_size - 1) {\n            if (tuple_type_list_last_last_list(i) != tuple_type_list_last_last_list(i + 1)) {\n                flag = false\n            }\n            i += 1\n        }\n        flag",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_type = test_tuple_list(0).getClass\n        for (i <- test_tuple_list) {\n            if (i.getClass != test_tuple_type) {\n                return false\n            }\n        }\n        return true",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_size - 1)\n        val test_tuple_type_list_last_size = test_tuple_type_list_last.size\n        val test_tuple_type_list_last_size_minus_1 = test_tuple_type_list_last_size - 1\n        val test_tuple_type_list_last_size_minus_2 = test_tuple_type_list_last_size - 2\n        val test_tuple_type_list_last_size_minus_3 = test_tuple_type_list_last_size - 3\n        val test_tuple_type_list_last_size_minus_4 = test_tuple_type_list_last_size - 4\n        val test_tuple_type_list_last_size_minus_5 = test_tuple_type_list_last_size - 5\n        val test_tuple_type_list_last_size_minus_6 = test_tuple_type_list_last_size - 6\n        val test_tuple_type_list_last_size_minus_7 = test_tuple_type_list_last_size - 7\n        val test_tuple_type_list_last_size_minus_8 = test_tuple_type_list_last_size - 8\n        val test_tuple_type_list_last_size_minus_9 = test_tuple_type_list_last_size - 9\n        val test_tuple_type_list_last_size_minus_10 = test_tuple_type_list_last_size - 10\n        val test_tuple_type_list_last_size_minus_11 = test_tuple_type_list_last_size - 11\n        val test_t",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_split = tuple_type.split(\"\\\\[\")\n        val tuple_type_final = tuple_type_split(1).split(\"\\\\]\")(0)\n        val tuple_type_final_split = tuple_type_final.split(\",\")\n        val tuple_type_final_split_length = tuple_type_final_split.length\n        var flag = true\n        for (i <- 0 until tuple_type_final_split_length) {\n            if (tuple_type_final_split(i) != tuple_type_final_split(0)) {\n                flag = false\n            }\n        }\n        flag",
    "        var flag = true\n        var first = test_tuple.asInstanceOf[Product].productElement(0).getClass()\n        for (i <- 1 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (first != test_tuple.asInstanceOf[Product].productElement(i).getClass()) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_type = test_tuple_list.map(x => x.getClass.toString)\n        val test_tuple_type_set = test_tuple_type.toSet\n        if (test_tuple_type_set.size == 1) {\n            return true\n        } else {\n            return false\n        }",
    "        val test_tuple_type = test_tuple.getClass.getName.split(\"\\\\.\").last\n        val test_tuple_type_list = test_tuple.productIterator.toList.map(x => x.getClass.getName.split(\"\\\\.\").last)\n        if (test_tuple_type_list.distinct.length == 1) true else false",
    "        var data_type = test_tuple.getClass.getName.split(\"\\\\.\").last\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (i.getClass.getName.split(\"\\\\.\").last != data_type) {\n                return false\n            }\n        }\n        return true",
    "        var flag = true\n        var prev_type = test_tuple.getClass.getName\n        for (i <- 0 until test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass.getName != prev_type) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        val t = test_tuple.asInstanceOf[Product]\n        val type_list = t.productIterator.toList.map(x => x.getClass)\n        val type_set = type_list.toSet\n        if (type_list.length == type_set.size) true\n        else false",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for(i <- 0 to tuple_length - 1) {\n            val element_type = test_tuple.asInstanceOf[Product].productElement(i).getClass.getName\n            if(element_type != tuple_type) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass\n        if (tuple_type.getName == \"scala.Tuple1\") {\n            return true\n        }\n        val tuple_length = test_tuple.productArity\n        val tuple_elements = test_tuple.productIterator\n        var first_type = tuple_elements.next.getClass\n        for (i <- 1 to tuple_length - 1) {\n            if (tuple_elements.next.getClass != first_type) {\n                return false\n            }\n        }\n        return true",
    "        var flag = true\n        var data_type = test_tuple.asInstanceOf[Product].productElement(0).getClass.getName\n        for (i <- 0 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != data_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (x, y) => {\n                if (x.getClass == y.getClass) true\n                else false\n            }\n            case (x, y, z) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass) true\n                else false\n            }\n            case (x, y, z, a) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass) true\n                else false\n            }\n            case (x, y, z, a, b) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c, d) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c, d, e) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass) true\n                else false\n            }\n            case (x, y, z, a, b, c, d, e, f) => {\n                if (",
    "        var flag = true\n        var type_of_first_element = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first_element) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            var i = 0\n            var flag = true\n            while (i < tuple_length) {\n                val element_type = test_tuple.asInstanceOf[Product].productElement(i).getClass.getName\n                if (element_type != tuple_type) {\n                    flag = false\n                    return flag\n                }\n                i += 1\n            }\n            return flag\n        }\n        else {\n            return false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_2 = tuple_type_list(1).split(\"\\\\]\")\n        val tuple_type_list_3 = tuple_type_list_2(0).split(\",\")\n        val tuple_type_list_4 = tuple_type_list_3.map(x => x.split(\"\\\\.\")(1))\n        val tuple_type_list_5 = tuple_type_list_4.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_6 = tuple_type_list_5.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_7 = tuple_type_list_6.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_8 = tuple_type_list_7.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_9 = tuple_type_list_8.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_10 = tuple_type_list_9.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_11 = tuple_type_list_10.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_12 = tuple_type_list_11.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_13 = tuple_type_list_12.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_14 = tuple_type_list_13.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_15 = tuple_type_list_14.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_16 = tuple_type_list_15.map(x => x.split(\"\\\\$\")(0))",
    "        var result = true\n        var t = test_tuple.asInstanceOf[Product]\n        var type_list = List[String]()\n        for (i <- 0 until t.productArity) {\n            type_list = type_list :+ t.productElement(i).getClass.getName\n        }\n        for (i <- 0 until type_list.length - 1) {\n            if (type_list(i) != type_list(i + 1)) {\n                result = false\n            }\n        }\n        return result",
    "        test_tuple match {\n            case (a, b) => {\n                if (a.getClass == b.getClass) true\n                else false\n            }\n            case (a, b, c) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass) true\n                else false\n            }\n            case (a, b, c, d) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass) true\n                else false\n            }\n            case (a, b, c, d, e) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass) true\n                else false\n            }\n            case (a, b, c, d, e, f) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass) true\n                else false\n            }\n            case (a, b, c, d, e, f, g) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass) true\n                else false\n            }\n            case (a, b, c, d, e, f, g, h) => {\n                if (a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass) true\n                else false\n            }\n            case (a, b, c, d, e, f, g, h, i) => {\n                if (",
    "        var flag = true\n        val tuple_type = test_tuple.getClass.getName\n        for (i <- 0 until test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName.split(\"\\\\.\").last\n        if (tuple_type == \"Tuple1\") {\n            return true\n        }\n        val tuple_length = test_tuple.productArity\n        var i = 0\n        var flag = true\n        while (i < tuple_length) {\n            val element_type = test_tuple.productElement(i).getClass.getName.split(\"\\\\.\").last\n            if (element_type != tuple_type) {\n                flag = false\n            }\n            i += 1\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_length = test_tuple_type_list.length\n        val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_length - 1)\n        val test_tuple_type_list_last_length = test_tuple_type_list_last.length\n        val test_tuple_type_list_last_last = test_tuple_type_list_last.substring(0, test_tuple_type_list_last_length - 1)\n        val test_tuple_type_list_last_last_length = test_tuple_type_list_last_last.length\n        val test_tuple_type_list_last_last_last = test_tuple_type_list_last_last.substring(0, test_tuple_type_list_last_last_length - 1)\n        val test_tuple_type_list_last_last_last_length = test_tuple_type_list_last_last_last.length\n        val test_tuple_type_list_last_last_last_last = test_tuple_type_list_last_last_last.substring(0, test_tuple_type_list_last_last_last_length - 1)\n        val test_tuple_type_list_last_last_last_last_length = test_tuple_type_list_last_last_last_last.length\n        val test_tuple_type_list_last_last_last_last_last = test_tuple_type_list_last_last_last_last.substring(0, test_tuple_type_list_last_last_last_last_length - 1)\n        val test_tuple_type_list_last_last_last_last_last_length = test_tuple_type_list_last_last_last_last_last.length\n        val test",
    "        val tuple_type = test_tuple.getClass.toString\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_final = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        if (tuple_type_list_last_final == \"java.lang.String\") {\n            return true\n        } else {\n            return false\n        }",
    "        test_tuple match {\n            case (x : Int, y : Int, z : Int) => true\n            case (x : Double, y : Double, z : Double) => true\n            case (x : String, y : String, z : String) => true\n            case _ => false\n        }",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_new = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_new_list = tuple_type_list_last_new.split(\",\")\n        val tuple_type_list_last_new_list_length = tuple_type_list_last_new_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_new_list_length - 1) {\n            if (tuple_type_list_last_new_list(i) != tuple_type_list_last_new_list(i + 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_list_type = test_tuple_list.map(x => x.getClass)\n        test_tuple_list_type.distinct.length == 1",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.productElement(i).getClass.getName != tuple_type) {\n                return false\n            }\n        }\n        return true",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        var flag = true\n        var temp = test_tuple.asInstanceOf[Product].productIterator.next().getClass\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (i.getClass != temp) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        val test_tuple_type_list_size_minus_one = test_tuple_type_list_size - 1\n        val test_tuple_type_list_size_minus_two = test_tuple_type_list_size - 2\n        val test_tuple_type_list_size_minus_three = test_tuple_type_list_size - 3\n        val test_tuple_type_list_size_minus_four = test_tuple_type_list_size - 4\n        val test_tuple_type_list_size_minus_five = test_tuple_type_list_size - 5\n        val test_tuple_type_list_size_minus_six = test_tuple_type_list_size - 6\n        val test_tuple_type_list_size_minus_seven = test_tuple_type_list_size - 7\n        val test_tuple_type_list_size_minus_eight = test_tuple_type_list_size - 8\n        val test_tuple_type_list_size_minus_nine = test_tuple_type_list_size - 9\n        val test_tuple_type_list_size_minus_ten = test_tuple_type_list_size - 10\n        val test_tuple_type_list_size_minus_eleven = test_tuple_type_list_size - 11\n        val test_tuple_type_list_size_minus_twelve = test_tuple_type_list_size - 12\n        val test_tuple_type_list_size_minus_thirteen = test_tuple_type_list_size - 13\n        val test_tuple_type_list_size_minus_fourteen = test_tuple_type_list_size - 14\n        val test_tuple_type_list_size_minus_fifteen = test",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        var flag = true\n        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        for (i <- 1 until type_list.length) {\n            if (type_list(i) != type_list(i - 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        type_list.distinct.length == 1",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = true\n        var first_type = test_tuple.getClass.getName\n        for (i <- 0 until test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass.getName != first_type) {\n                flag = false\n            }\n        }\n        flag",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case _ => false\n        }",
    "        var flag = true\n        var i = 0\n        var j = 1\n        while (i < test_tuple.productArity && flag) {\n            while (j < test_tuple.productArity && flag) {\n                if (test_tuple.productElement(i).getClass != test_tuple.productElement(j).getClass) {\n                    flag = false\n                }\n                j += 1\n            }\n            i += 1\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_length = tuple_type.length\n        val tuple_type_index = tuple_type.indexOf(\"[\")\n        val tuple_type_name = tuple_type.substring(tuple_type_index + 1, tuple_type_length - 1)\n        val tuple_type_name_length = tuple_type_name.length\n        val tuple_type_name_index = tuple_type_name.indexOf(\";\")\n        val tuple_type_name_final = tuple_type_name.substring(0, tuple_type_name_index)\n        val tuple_type_name_final_length = tuple_type_name_final.length\n        val tuple_type_name_final_index = tuple_type_name_final.indexOf(\".\")\n        val tuple_type_name_final_final = tuple_type_name_final.substring(tuple_type_name_final_index + 1, tuple_type_name_final_length)\n        val tuple_type_name_final_final_length = tuple_type_name_final_final.length\n        val tuple_type_name_final_final_index = tuple_type_name_final_final.indexOf(\"$\")\n        val tuple_type_name_final_final_final = tuple_type_name_final_final.substring(0, tuple_type_name_final_final_index)\n        val tuple_type_name_final_final_final_length = tuple_type_name_final_final_final.length\n        val tuple_type_name_final_final_final_index = tuple_type_name_final_final_final.indexOf(\"$\")\n        val tuple_type_name_final_final_final_final = tuple_type_name_final_final_final.substring(tuple_type_name_final_final_final_index + 1, tuple_type_name_final_final_final_length)\n        val tuple_type_name_final_final_final_final_length = tuple_type_name_final_final_final_final.length\n        val tuple_type_",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        var flag = true\n        var data_type = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 0 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != data_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        if (tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val first_type = tuple_type_list(1).split(\"\\\\]\")(0)\n            for (i <- 1 to tuple_type_list_size - 1) {\n                val current_type = tuple_type_list(i).split(\"\\\\]\")(0)\n                if (first_type != current_type) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_1 = test_tuple_type_list(1).split(\"\\\\]\")\n        val test_tuple_type_list_2 = test_tuple_type_list_1(0).split(\",\")\n        val test_tuple_type_list_3 = test_tuple_type_list_2.map(x => x.split(\"\\\\.\")(1))\n        val test_tuple_type_list_4 = test_tuple_type_list_3.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_list_5 = test_tuple_type_list_4.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_list_6 = test_tuple_type_list_5.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_list_7 = test_tuple_type_list_6.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_list_8 = test_tuple_type_list_7.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_list_9 = test_tuple_type_list_8.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_list_10 = test_tuple_type_list_9.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_list_11 = test_tuple_type_list_10.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_list_12 = test_tuple_type_list_11.map(x => x.split(\"\\\\$\")(0))\n        val test_tuple_type_list_13 = test_tuple",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        if (test_tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_size - 1)\n            val test_tuple_type_list_last_list = test_tuple_type_list_last.split(\"\\\\]\")\n            val test_tuple_type_list_last_list_first = test_tuple_type_list_last_list(0)\n            val test_tuple_type_list_last_list_first_list = test_tuple_type_list_last_list_first.split(\"\\\\.\")\n            val test_tuple_type_list_last_list_first_list_size = test_tuple_type_list_last_list_first_list.size\n            val test_tuple_type_list_last_list_first_list_last = test_tuple_type_list_last_list_first_list(test_tuple_type_list_last_list_first_list_size - 1)\n            for (i <- 0 until test_tuple_type_list_size - 1) {\n                val test_tuple_type_list_i = test_tuple_type_list(i)\n                val test_tuple_type_list_i_list = test_tuple_type_list_i.split(\"\\\\]\")\n                val test_tuple_type_list_i_list_first = test_tuple_type_list_i_list(0)\n                val test_tuple_type_list_i_list_first_list = test_tuple_type_list_i_list_first.split(\"\\\\.\")\n                val test_tuple_type_list_i_list_first_list_size = test_",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_size = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_size) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        test_tuple_list.map(x => x.getClass.getName).distinct.length == 1",
    "        val tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val type_list = tuple_list.map(x => x.getClass.getName)\n        val type_set = type_list.toSet\n        if (type_set.size == 1) true else false",
    "        var flag = true\n        var temp = test_tuple.asInstanceOf[Product].productIterator.toList(0).getClass\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (i.getClass != temp) {\n                flag = false\n            }\n        }\n        flag",
    "        var flag = true\n        var type_list = ListBuffer[String]()\n        for (i <- 0 to test_tuple.productArity - 1) {\n            type_list += test_tuple.productElement(i).getClass.toString\n        }\n        for (i <- 0 to test_tuple.productArity - 2) {\n            if (type_list(i) != type_list(i + 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        var flag = true\n        for (i <- 1 until tuple_type_list_size) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        val t = test_tuple.asInstanceOf[Product]\n        t.productIterator.forall(x => x.getClass == t.productElement(0).getClass)",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_array = test_tuple_type.split(\"\\\\.\")\n        val test_tuple_type_name = test_tuple_type_array(test_tuple_type_array.length - 1)\n        if (test_tuple_type_name == \"Tuple2\") {\n            val test_tuple_type_1 = test_tuple.asInstanceOf[(Any, Any)]._1.getClass.getName\n            val test_tuple_type_2 = test_tuple.asInstanceOf[(Any, Any)]._2.getClass.getName\n            if (test_tuple_type_1 == test_tuple_type_2) {\n                true\n            } else {\n                false\n            }\n        } else if (test_tuple_type_name == \"Tuple3\") {\n            val test_tuple_type_1 = test_tuple.asInstanceOf[(Any, Any, Any)]._1.getClass.getName\n            val test_tuple_type_2 = test_tuple.asInstanceOf[(Any, Any, Any)]._2.getClass.getName\n            val test_tuple_type_3 = test_tuple.asInstanceOf[(Any, Any, Any)]._3.getClass.getName\n            if (test_tuple_type_1 == test_tuple_type_2 && test_tuple_type_1 == test_tuple_type_3) {\n                true\n            } else {\n                false\n            }\n        } else if (test_tuple_type_name == \"Tuple4\") {\n            val test_tuple_type_1 = test_tuple.asInstanceOf[(Any, Any, Any, Any)]._1.getClass.getName\n            val test_tuple_type_2 = test_tuple.asInstanceOf[(Any, Any, Any, Any)]._2.getClass.getName\n            val test_tuple_type_3 = test_tuple.asInstanceOf[(Any, Any, Any, Any)].",
    "        var flag = true\n        var type_name = test_tuple.getClass.getName\n        for (i <- 0 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != type_name) {\n                flag = false\n            }\n        }\n        return flag",
    "        var type_list : List[String] = List()\n        for (i <- test_tuple.productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        type_list.distinct.length == 1",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        return false",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        var flag = true\n        var i = 0\n        var type_of_element = test_tuple.asInstanceOf[Product].productElement(i).getClass\n        while (i < test_tuple.asInstanceOf[Product].productArity) {\n            if (type_of_element != test_tuple.asInstanceOf[Product].productElement(i).getClass) {\n                flag = false\n            }\n            i += 1\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        var flag = true\n        var i = 0\n        while (i < test_tuple.productArity && flag) {\n            if (test_tuple.productElement(i).getClass != test_tuple.productElement(0).getClass)\n                flag = false\n            i += 1\n        }\n        flag",
    "        var flag = true\n        var first_type = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != first_type) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.Boolean\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var flag = true\n        var temp = test_tuple.asInstanceOf[Product].productIterator.next.getClass\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (i.getClass != temp) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 until tuple_type_list_length) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        var flag = true\n        var data_type = test_tuple.getClass.getName\n        for (i <- 0 until test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass.getName != data_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag : Boolean = true\n        var i : Int = 0\n        while (i < test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != test_tuple.asInstanceOf[Product].productElement(i + 1).getClass) {\n                flag = false\n            }\n            i += 1\n        }\n        return flag",
    "        var flag = true\n        var temp = test_tuple.asInstanceOf[Product].productIterator.next.getClass\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (i.getClass != temp) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = true\n        var data_type = test_tuple.getClass.getSimpleName\n        for(i <- 0 until test_tuple.productArity) {\n            if(test_tuple.productElement(i).getClass.getSimpleName != data_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(tuple_type)\n        for (i <- 0 until test_tuple.asInstanceOf[Product].productArity) {\n            val element_type = test_tuple.asInstanceOf[Product].productElement(i).getClass.getName\n            if (!tuple_type_list.contains(element_type)) return false\n        }\n        return true",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_type = test_tuple_list.map(x => x.getClass.getName)\n        val test_tuple_type_set = test_tuple_type.toSet\n        if (test_tuple_type_set.size == 1) true else false",
    "        var flag = true\n        var i = 0\n        var type_of_first_element = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        while (i < test_tuple.asInstanceOf[Product].productArity && flag) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first_element) {\n                flag = false\n            }\n            i += 1\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_length = tuple_type_list_last_last_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_last_list_length - 1) {\n            if (tuple_type_list_last_last_list(i) != tuple_type_list_last_last_list(i + 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"scala.Tuple1\", \"scala.Tuple2\", \"scala.Tuple3\", \"scala.Tuple4\", \"scala.Tuple5\", \"scala.Tuple6\", \"scala.Tuple7\", \"scala.Tuple8\", \"scala.Tuple9\", \"scala.Tuple10\", \"scala.Tuple11\", \"scala.Tuple12\", \"scala.Tuple13\", \"scala.Tuple14\", \"scala.Tuple15\", \"scala.Tuple16\", \"scala.Tuple17\", \"scala.Tuple18\", \"scala.Tuple19\", \"scala.Tuple20\", \"scala.Tuple21\", \"scala.Tuple22\")\n        if (tuple_type_list.contains(tuple_type)) {\n            val tuple_size = tuple_type.split(\"\\\\.\").last.toInt\n            val tuple_type_list = ListBuffer[String]()\n            for (i <- 0 until tuple_size) {\n                tuple_type_list += test_tuple.asInstanceOf[Product].productElement(i).getClass.getName\n            }\n            val tuple_type_set = tuple_type_list.toSet\n            if (tuple_type_set.size == 1) true else false\n        }\n        else false",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type == \"scala.Tuple2\") {\n            val t1 = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1._2.getClass.getName\n            if (t1_type == t2_type) {\n                true\n            } else {\n                false\n            }\n        } else if (tuple_type == \"scala.Tuple3\") {\n            val t1 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1._2.getClass.getName\n            val t3_type = t1._3.getClass.getName\n            if (t1_type == t2_type && t2_type == t3_type) {\n                true\n            } else {\n                false\n            }\n        } else if (tuple_type == \"scala.Tuple4\") {\n            val t1 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1._2.getClass.getName\n            val t3_type = t1._3.getClass.getName\n            val t4_type = t1._4.getClass.getName\n            if (t1_type == t2_type && t2_type == t3_type && t3_type == t4_type) {\n                true\n            } else {\n                false\n            }\n        } else if (tuple_type == \"scala.Tuple5\") {\n            val t1 = test_tuple.asInstanceOf[Tuple5[Any, Any, Any, Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1._2.getClass.",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 1 until tuple_type_list_length) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        return false",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        var flag = true\n        for (i <- 1 until test_tuple_type_list_size) {\n            if (test_tuple_type_list(i) != test_tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        var flag = true\n        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        for (i <- 0 to type_list.length - 2) {\n            if (type_list(i) != type_list(i + 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        if (test_tuple.isInstanceOf[Tuple1[Any]]) {\n            return true\n        }\n        val tuple_type = test_tuple.getClass.getName\n        for (i <- 0 until test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass.getName != tuple_type) {\n                return false\n            }\n        }\n        return true",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_size - 1)\n        val test_tuple_type_list_last_size = test_tuple_type_list_last.size\n        val test_tuple_type_list_last_sub = test_tuple_type_list_last.substring(0, test_tuple_type_list_last_size - 1)\n        val test_tuple_type_list_last_sub_list = test_tuple_type_list_last_sub.split(\",\")\n        val test_tuple_type_list_last_sub_list_size = test_tuple_type_list_last_sub_list.size\n        val test_tuple_type_list_last_sub_list_first = test_tuple_type_list_last_sub_list(0)\n        for (i <- 1 until test_tuple_type_list_last_sub_list_size) {\n            if (test_tuple_type_list_last_sub_list_first != test_tuple_type_list_last_sub_list(i)) {\n                return false\n            }\n        }\n        return true",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        if (tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val tuple_type_list_last = tuple_type_list(tuple_type_list_size - 1)\n            val tuple_type_list_last_size = tuple_type_list_last.size\n            val tuple_type_list_last_type = tuple_type_list_last.substring(0, tuple_type_list_last_size - 1)\n            for (i <- 0 until tuple_type_list_size - 1) {\n                if (tuple_type_list(i) != tuple_type_list_last_type) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        var flag : Boolean = true\n        var type_of_first_element : String = \"\"\n        for (element <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (type_of_first_element == \"\") {\n                type_of_first_element = element.getClass.toString\n            }\n            else {\n                if (type_of_first_element != element.getClass.toString) {\n                    flag = false\n                }\n            }\n        }\n        return flag",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_length = test_tuple_type_list.length\n        val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_length - 1)\n        val test_tuple_type_list_last_length = test_tuple_type_list_last.length\n        val test_tuple_type_list_last_last = test_tuple_type_list_last.substring(0, test_tuple_type_list_last_length - 1)\n        val test_tuple_type_list_last_last_list = test_tuple_type_list_last_last.split(\",\")\n        val test_tuple_type_list_last_last_list_length = test_tuple_type_list_last_last_list.length\n        var test_tuple_type_list_last_last_list_first = test_tuple_type_list_last_last_list(0)\n        var test_tuple_type_list_last_last_list_first_length = test_tuple_type_list_last_last_list_first.length\n        test_tuple_type_list_last_last_list_first = test_tuple_type_list_last_last_list_first.substring(0, test_tuple_type_list_last_last_list_first_length - 1)\n        for (i <- 1 until test_tuple_type_list_last_last_list_length) {\n            val test_tuple_type_list_last_last_list_first_length = test_tuple_type_list_last_last_list(i).length\n            val test_tuple_type_list_last_last_list_first_first = test_tuple_type_list_last_last_list(i).substring(0, test_tuple_type_list_last_last_",
    "        var flag = true\n        var i = 0\n        var type_of_element = test_tuple.asInstanceOf[Product].productElement(i).getClass.toString\n        while (i < test_tuple.asInstanceOf[Product].productArity && flag) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.toString != type_of_element) {\n                flag = false\n            }\n            i += 1\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_size = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_size) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_type = test_tuple_list(0).getClass\n        test_tuple_list.map(x => x.getClass == test_tuple_type).reduce((x, y) => x && y)",
    "        var flag = true\n        var type_of_first_element = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first_element) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type == \"scala.Tuple1\") {\n            return true\n        }\n        val tuple_length = test_tuple.productArity\n        val tuple_list = test_tuple.productIterator.toList\n        val type_list = tuple_list.map(x => x.getClass.getName)\n        val type_set = type_list.toSet\n        if (type_set.size == 1) {\n            return true\n        }\n        return false",
    "        var flag = true\n        var type_list = List[String]()\n        for (i <- 0 until test_tuple.productArity) {\n            type_list = type_list :+ test_tuple.productElement(i).getClass.getName\n        }\n        for (i <- 0 until type_list.length - 1) {\n            if (type_list(i) != type_list(i + 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_last = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_last_list = tuple_type_list_last_last.split(\",\")\n        val tuple_type_list_last_last_list_length = tuple_type_list_last_last_list.length\n        val tuple_type_list_last_last_list_first = tuple_type_list_last_last_list(0)\n        for (i <- 1 until tuple_type_list_last_last_list_length) {\n            if (tuple_type_list_last_last_list_first != tuple_type_list_last_last_list(i)) {\n                return false\n            }\n        }\n        return true",
    "        var flag = true\n        var type_of_first = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        var flag = true\n        for (i <- 0 until tuple_type_list_length) {\n            if (tuple_type_list(i) != tuple_type_list(0)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = tuple_type.substring(tuple_type.indexOf(\"[\") + 1, tuple_type.indexOf(\"]\")).toInt\n            val tuple_elements = test_tuple.asInstanceOf[Product].productIterator\n            var tuple_element_type = tuple_elements.next.getClass.getName\n            for (i <- 1 until tuple_length) {\n                if (tuple_elements.next.getClass.getName != tuple_element_type) {\n                    return false\n                }\n            }\n            return true\n        }\n        else {\n            return false\n        }",
    "        var flag = true\n        var i = 0\n        while (i < test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass != test_tuple.productElement(0).getClass) {\n                flag = false\n            }\n            i += 1\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_size - 1)\n        val tuple_type_list_last_size = tuple_type_list_last.size\n        val tuple_type_list_last_last = tuple_type_list_last(tuple_type_list_last_size - 1)\n        if (tuple_type_list_last_last == ']') {\n            val tuple_type_list_last_last_last = tuple_type_list_last(tuple_type_list_last_size - 2)\n            if (tuple_type_list_last_last_last == ',') {\n                return false\n            }\n            else {\n                return true\n            }\n        }\n        else {\n            return true\n        }",
    "        val test_tuple_type = test_tuple.getClass.getName\n        test_tuple_type match {\n            case \"scala.Tuple2\" => {\n                val test_tuple_type_1 = test_tuple.asInstanceOf[Tuple2[Any, Any]]._1.getClass.getName\n                val test_tuple_type_2 = test_tuple.asInstanceOf[Tuple2[Any, Any]]._2.getClass.getName\n                if (test_tuple_type_1 == test_tuple_type_2) true\n                else false\n            }\n            case \"scala.Tuple3\" => {\n                val test_tuple_type_1 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._1.getClass.getName\n                val test_tuple_type_2 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._2.getClass.getName\n                val test_tuple_type_3 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]._3.getClass.getName\n                if (test_tuple_type_1 == test_tuple_type_2 && test_tuple_type_2 == test_tuple_type_3) true\n                else false\n            }\n            case \"scala.Tuple4\" => {\n                val test_tuple_type_1 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._1.getClass.getName\n                val test_tuple_type_2 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._2.getClass.getName\n                val test_tuple_type_3 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._3.getClass.getName\n                val test_tuple_type_4 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]._4.getClass.getName\n",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        var result = true\n        for (i <- 1 until test_tuple_type_list_size) {\n            if (test_tuple_type_list(i) != test_tuple_type_list(i - 1)) {\n                result = false\n            }\n        }\n        result",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_length = tuple_type_list.length\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_length - 1)\n        val tuple_type_list_last_length = tuple_type_list_last.length\n        val tuple_type_list_last_trimmed = tuple_type_list_last.substring(0, tuple_type_list_last_length - 1)\n        val tuple_type_list_last_trimmed_list = tuple_type_list_last_trimmed.split(\",\")\n        val tuple_type_list_last_trimmed_list_length = tuple_type_list_last_trimmed_list.length\n        var check_type = true\n        for (i <- 0 until tuple_type_list_last_trimmed_list_length - 1) {\n            if (tuple_type_list_last_trimmed_list(i) != tuple_type_list_last_trimmed_list(i + 1)) {\n                check_type = false\n            }\n        }\n        return check_type",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_length = test_tuple_type_list.length\n        var flag = true\n        for (i <- 1 until test_tuple_type_list_length) {\n            if (test_tuple_type_list(i) != test_tuple_type_list(i - 1)) {\n                flag = false\n                return flag\n            }\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        val tuple_type = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 to tuple_length - 1) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != tuple_type) {\n                return false\n            }\n        }\n        return true",
    "        var flag = true\n        var i = 0\n        var first_type = test_tuple.asInstanceOf[Product].productElement(i).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != first_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        var test_type = test_tuple.getClass.getTypeName\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (i.getClass.getTypeName != test_type) {\n                return false\n            }\n        }\n        return true",
    "        val tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val type_list = tuple_list.map(x => x.getClass.getName)\n        if (type_list.distinct.length == 1) {\n            true\n        } else {\n            false\n        }",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_length = test_tuple_type_list.length\n        val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_length - 1)\n        val test_tuple_type_list_last_length = test_tuple_type_list_last.length\n        val test_tuple_type_list_last_last = test_tuple_type_list_last.substring(0, test_tuple_type_list_last_length - 1)\n        val test_tuple_type_list_last_last_split = test_tuple_type_list_last_last.split(\"\\\\$\")\n        val test_tuple_type_list_last_last_split_length = test_tuple_type_list_last_last_split.length\n        val test_tuple_type_list_last_last_split_last = test_tuple_type_list_last_last_split(test_tuple_type_list_last_last_split_length - 1)\n        val test_tuple_type_list_last_last_split_last_length = test_tuple_type_list_last_last_split_last.length\n        val test_tuple_type_list_last_last_split_last_last = test_tuple_type_list_last_last_split_last.substring(0, test_tuple_type_list_last_last_split_last_length - 1)\n        val test_tuple_type_list_last_last_split_last_last_split = test_tuple_type_list_last_last_split_last_last.split(\"\\\\.\")\n        val test_tuple_type_list_last_last_split_last_last_split_length = test_tuple_type_list_last_last_split_last_last_split.length\n        val test_tuple",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type == \"scala.Tuple2\") {\n            val t1 = test_tuple.asInstanceOf[Tuple2[Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1._2.getClass.getName\n            if (t1_type == t2_type) {\n                return true\n            } else {\n                return false\n            }\n        } else if (tuple_type == \"scala.Tuple3\") {\n            val t1 = test_tuple.asInstanceOf[Tuple3[Any, Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1._2.getClass.getName\n            val t3_type = t1._3.getClass.getName\n            if (t1_type == t2_type && t2_type == t3_type) {\n                return true\n            } else {\n                return false\n            }\n        } else if (tuple_type == \"scala.Tuple4\") {\n            val t1 = test_tuple.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1._2.getClass.getName\n            val t3_type = t1._3.getClass.getName\n            val t4_type = t1._4.getClass.getName\n            if (t1_type == t2_type && t2_type == t3_type && t3_type == t4_type) {\n                return true\n            } else {\n                return false\n            }\n        } else if (tuple_type == \"scala.Tuple5\") {\n            val t1 = test_tuple.asInstanceOf[Tuple5[Any, Any, Any, Any, Any]]\n            val t1_type = t1._1.getClass.getName\n            val t2_type = t1",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && x.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass && x.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass && x.getClass == c.getClass && x.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass && x.getClass == c.getClass && x.getClass == d.getClass && x.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && x.getClass == z.getClass && x.getClass == a.getClass && x.getClass == b.getClass && x.getClass == c.getClass && x.getClass == d.getClass && x.getClass == e.getClass && x.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        var tuple_type_list_index = 0\n        var check_type = true\n        while (tuple_type_list_index < tuple_type_list_size - 1) {\n            if (tuple_type_list(tuple_type_list_index) != tuple_type_list(tuple_type_list_index + 1)) {\n                check_type = false\n            }\n            tuple_type_list_index += 1\n        }\n        check_type",
    "        val test_tuple_type = test_tuple.getClass.getName\n        test_tuple_type.contains(\"Tuple\")",
    "        val tuple_type = test_tuple.getClass.getName\n        if (tuple_type.contains(\"Tuple\")) {\n            val tuple_length = test_tuple.asInstanceOf[Product].productArity\n            val tuple_elements = test_tuple.asInstanceOf[Product].productIterator.toList\n            val tuple_element_types = tuple_elements.map(x => x.getClass.getName)\n            val tuple_element_types_set = tuple_element_types.toSet\n            if (tuple_element_types_set.size == 1) {\n                return true\n            }\n            else {\n                return false\n            }\n        }\n        else {\n            return false\n        }",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case (x, y, z) => x.getClass == y.getClass && y.getClass == z.getClass\n            case (x, y, z, a) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass\n            case (x, y, z, a, b) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass\n            case (x, y, z, a, b, c) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass\n            case (x, y, z, a, b, c, d) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (x, y, z, a, b, c, d, e) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (x, y, z, a, b, c, d, e, f) => x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (x, y, z, a, b, c, d, e, f, g)",
    "        val tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val type_list = tuple_list.map(x => x.getClass)\n        type_list.distinct.length == 1",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        var flag = true\n        var data_type = test_tuple.asInstanceOf[Product].productElement(0).getClass.getName\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (data_type != test_tuple.asInstanceOf[Product].productElement(i).getClass.getName) {\n                flag = false\n            }\n        }\n        return flag",
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_list_type = test_tuple_list.map(x => x.getClass)\n        val test_tuple_list_type_set = test_tuple_list_type.toSet\n        if (test_tuple_list_type_set.size == 1) {\n            true\n        } else {\n            false\n        }",
    "        var result = true\n        var first_type = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != first_type) {\n                result = false\n                return result\n            }\n        }\n        return result",
    "        var flag = true\n        var i = 0\n        var type_of_first = test_tuple.asInstanceOf[Product].productElement(0).getClass.getName\n        while (i < test_tuple.productArity && flag) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != type_of_first) {\n                flag = false\n            }\n            i += 1\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        if (tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val tuple_type_list_last = tuple_type_list(tuple_type_list_size - 1)\n            val tuple_type_list_last_size = tuple_type_list_last.size\n            val tuple_type_list_last_substring = tuple_type_list_last.substring(0, tuple_type_list_last_size - 1)\n            val tuple_type_list_last_substring_list = tuple_type_list_last_substring.split(\",\")\n            val tuple_type_list_last_substring_list_size = tuple_type_list_last_substring_list.size\n            for (i <- 0 until tuple_type_list_last_substring_list_size - 1) {\n                if (tuple_type_list_last_substring_list(i) != tuple_type_list_last_substring_list(i + 1)) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        test_tuple match {\n            case (a, b) => a.getClass == b.getClass\n            case (a, b, c) => a.getClass == b.getClass && b.getClass == c.getClass\n            case (a, b, c, d) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass\n            case (a, b, c, d, e) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass\n            case (a, b, c, d, e, f) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass\n            case (a, b, c, d, e, f, g) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass\n            case (a, b, c, d, e, f, g, h) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass\n            case (a, b, c, d, e, f, g, h, i) => a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass && d.getClass == e.getClass && e.getClass == f.getClass && f.getClass == g.getClass && g.getClass == h.getClass && h.getClass == i.getClass\n            case (a, b, c, d, e, f, g, h, i, j)",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        val tuple_elements = test_tuple.asInstanceOf[Product].productIterator\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (tuple_elements.next.getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        if (tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val first_type = tuple_type_list(1).split(\"\\\\]\")(0)\n            for (i <- 1 until tuple_type_list_size) {\n                val current_type = tuple_type_list(i).split(\"\\\\]\")(0)\n                if (current_type != first_type) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        if (tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val tuple_type_list_size_minus_one = tuple_type_list_size - 1\n            val tuple_type_list_size_minus_two = tuple_type_list_size - 2\n            val tuple_type_list_size_minus_three = tuple_type_list_size - 3\n            val tuple_type_list_size_minus_four = tuple_type_list_size - 4\n            val tuple_type_list_size_minus_five = tuple_type_list_size - 5\n            val tuple_type_list_size_minus_six = tuple_type_list_size - 6\n            val tuple_type_list_size_minus_seven = tuple_type_list_size - 7\n            val tuple_type_list_size_minus_eight = tuple_type_list_size - 8\n            val tuple_type_list_size_minus_nine = tuple_type_list_size - 9\n            val tuple_type_list_size_minus_ten = tuple_type_list_size - 10\n            val tuple_type_list_size_minus_eleven = tuple_type_list_size - 11\n            val tuple_type_list_size_minus_twelve = tuple_type_list_size - 12\n            val tuple_type_list_size_minus_thirteen = tuple_type_list_size - 13\n            val tuple_type_list_size_minus_fourteen = tuple_type_list_size - 14\n            val tuple_type_list_size_minus_fifteen = tuple_type_list_size - 15\n            val tuple_type_list_size_minus_sixteen = tuple_type_list_size - 16\n            val tuple_type_list_size_minus_seventeen = tuple_type_list_size - 17\n            val tuple_type_list_size_minus_eighteen =",
    "        var flag = true\n        var i = 0\n        var data_type = test_tuple.asInstanceOf[Product].productElement(i).getClass\n        while (i < test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != data_type) {\n                flag = false\n                return flag\n            }\n            i += 1\n        }\n        return flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        if (tuple_type_list_size == 2) {\n            val tuple_type_list_1 = tuple_type_list(1).split(\"\\\\]\")\n            val tuple_type_list_1_size = tuple_type_list_1.size\n            if (tuple_type_list_1_size == 2) {\n                val tuple_type_list_1_0 = tuple_type_list_1(0)\n                val tuple_type_list_1_0_list = tuple_type_list_1_0.split(\",\")\n                val tuple_type_list_1_0_list_size = tuple_type_list_1_0_list.size\n                if (tuple_type_list_1_0_list_size > 1) {\n                    val tuple_type_list_1_0_list_0 = tuple_type_list_1_0_list(0)\n                    val tuple_type_list_1_0_list_0_list = tuple_type_list_1_0_list_0.split(\"\\\\.\")\n                    val tuple_type_list_1_0_list_0_list_size = tuple_type_list_1_0_list_0_list.size\n                    if (tuple_type_list_1_0_list_0_list_size == 2) {\n                        val tuple_type_list_1_0_list_0_list_0 = tuple_type_list_1_0_list_0_list(1)\n                        for (i <- 1 until tuple_type_list_1_0_list_size) {\n                            val tuple_type_list_1_0_list_i = tuple_type_list_1_0_list(i)\n                            val tuple_type_list_1_0_list_i_list = tuple_type_list_1_0_list_i.split(\"\\\\.\")\n                            val tuple_type_list_1",
    "        var flag = true\n        var first_type = test_tuple.getClass.getName\n        for (i <- 0 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != first_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = true\n        var i = 0\n        var data_type = test_tuple.asInstanceOf[Product].productElement(i).getClass\n        while(i < test_tuple.asInstanceOf[Product].productArity && flag) {\n            if(test_tuple.asInstanceOf[Product].productElement(i).getClass != data_type)\n                flag = false\n            i += 1\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        var flag = true\n        for (i <- 1 to tuple_type_list_size - 1) {\n            if (tuple_type_list(i) != tuple_type_list(i - 1)) {\n                flag = false\n            }\n        }\n        return flag",
    "        val tuple = test_tuple.asInstanceOf[Product]\n        val first_type = tuple.productElement(0).getClass\n        for (i <- 1 until tuple.productArity) {\n            if (tuple.productElement(i).getClass != first_type) {\n                return false\n            }\n        }\n        return true",
    "        test_tuple match {\n            case (a, b, c) => a.isInstanceOf[Int] && b.isInstanceOf[Int] && c.isInstanceOf[Int]\n        }",
    "        val test_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_type = test_list(0).getClass\n        for (i <- test_list) {\n            if (i.getClass != test_type) {\n                return false\n            }\n        }\n        return true",
    "        var type_list = List[String]()\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            type_list = type_list :+ i.getClass.getName\n        }\n        type_list.distinct.length == 1",
    "        var result = true\n        var type_of_first_element = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 1 until test_tuple.asInstanceOf[Product].productArity) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass != type_of_first_element) {\n                result = false\n            }\n        }\n        return result",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.String\", \"java.lang.Double\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        else {\n            return false\n        }"
  ]
}