{
  "name": "mbpp_222_check_type",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    def checkType(test_tuple : Any) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkType((Any((5l, 6l, 7l, 3l, 5l, 6l)))) == (true));\n    assert(checkType((Any((1l, 2l, \"4\")))) == (false));\n    assert(checkType((Any((3l, 2l, 1l, 4l, 5l)))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val test_tuple_list = test_tuple.asInstanceOf[Product].productIterator.toList\n        val test_tuple_list_type = test_tuple_list.map(x => x.getClass.getName)\n        test_tuple_list_type.distinct.length == 1",
    "        val data_type = test_tuple.getClass.getName.split(\"\\\\.\").last\n        for (i <- test_tuple.asInstanceOf[Product].productIterator) {\n            if (i.getClass.getName.split(\"\\\\.\").last != data_type) {\n                return false\n            }\n        }\n        return true",
    "        test_tuple match {\n            case (x, y) => x.getClass == y.getClass\n            case _ => false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = List(\"java.lang.Integer\", \"java.lang.Double\", \"java.lang.String\")\n        if (tuple_type_list.contains(tuple_type)) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        test_tuple match {\n            case (x, y) => x.isInstanceOf[Int] && y.isInstanceOf[Int]\n            case (x, y, z) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int]\n            case (x, y, z, w) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int]\n            case (x, y, z, w, v) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int] && v.isInstanceOf[Int]\n            case (x, y, z, w, v, u) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int] && v.isInstanceOf[Int] && u.isInstanceOf[Int]\n            case (x, y, z, w, v, u, t) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int] && v.isInstanceOf[Int] && u.isInstanceOf[Int] && t.isInstanceOf[Int]\n            case (x, y, z, w, v, u, t, s) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int] && v.isInstanceOf[Int] && u.isInstanceOf[Int] && t.isInstanceOf[Int] && s.isInstanceOf[Int]\n            case (x, y, z, w, v, u, t, s, r) => x.isInstanceOf[Int] && y.isInstanceOf[Int] && z.isInstanceOf[Int] && w.isInstanceOf[Int] && v.isInstanceOf[Int] && u.isInstanceOf[Int] && t.isInstanceOf[Int] && s.isInstanceOf",
    "        test_tuple match {\n            case (x : Int, y : Int, z : Int) => true\n            case (x : Double, y : Double, z : Double) => true\n            case (x : String, y : String, z : String) => true\n            case (x : Boolean, y : Boolean, z : Boolean) => true\n            case _ => false\n        }",
    "        var flag = true\n        var data_type = test_tuple.getClass\n        for (i <- 0 until test_tuple.productArity) {\n            if (test_tuple.productElement(i).getClass != data_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = true\n        var temp = test_tuple.asInstanceOf[Product].productElement(0).getClass\n        for (i <- 0 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (temp != test_tuple.asInstanceOf[Product].productElement(i).getClass) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        var tuple_type_list_index = 0\n        var check_type = true\n        while (tuple_type_list_index < tuple_type_list_size - 1) {\n            if (tuple_type_list(tuple_type_list_index) != tuple_type_list(tuple_type_list_index + 1)) {\n                check_type = false\n            }\n            tuple_type_list_index += 1\n        }\n        check_type",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        val tuple_type_list_last = tuple_type_list(tuple_type_list_size - 1)\n        val tuple_type_list_last_size = tuple_type_list_last.size\n        val tuple_type_list_last_sub = tuple_type_list_last.substring(0, tuple_type_list_last_size - 1)\n        val tuple_type_list_last_sub_list = tuple_type_list_last_sub.split(\",\")\n        val tuple_type_list_last_sub_list_size = tuple_type_list_last_sub_list.size\n        var flag = true\n        for (i <- 0 until tuple_type_list_last_sub_list_size - 1) {\n            if (tuple_type_list_last_sub_list(i) != tuple_type_list_last_sub_list(i + 1)) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        val tuple_type_list_last_element = tuple_type_list(tuple_type_list_size - 1)\n        val tuple_type_list_last_element_list = tuple_type_list_last_element.split(\"\\\\]\")\n        val tuple_type_list_last_element_list_size = tuple_type_list_last_element_list.size\n        val tuple_type_list_last_element_list_last_element = tuple_type_list_last_element_list(tuple_type_list_last_element_list_size - 1)\n        val tuple_type_list_last_element_list_last_element_list = tuple_type_list_last_element_list_last_element.split(\",\")\n        val tuple_type_list_last_element_list_last_element_list_size = tuple_type_list_last_element_list_last_element_list.size\n        val tuple_type_list_last_element_list_last_element_list_last_element = tuple_type_list_last_element_list_last_element_list(tuple_type_list_last_element_list_last_element_list_size - 1)\n        val tuple_type_list_last_element_list_last_element_list_last_element_list = tuple_type_list_last_element_list_last_element_list_last_element.split(\"\\\\$\")\n        val tuple_type_list_last_element_list_last_element_list_last_element_list_size = tuple_type_list_last_element_list_last_element_list_last_element_list.size\n        val tuple_type_list_last_element_list_last_element_list_last_element_list_last_element = tuple_type_list_last_element_list_last_element_list_last_element_list(tuple_type_list_last_",
    "        test_tuple match {\n            case (x : Int, y : Int, z : Int) => true\n            case (x : String, y : String, z : String) => true\n            case (x : Double, y : Double, z : Double) => true\n            case (x : Float, y : Float, z : Float) => true\n            case _ => false\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_new = tuple_type_list(1).split(\"\\\\]\")\n        val tuple_type_list_new_new = tuple_type_list_new(0).split(\",\")\n        val tuple_type_list_new_new_new = tuple_type_list_new_new.map(x => x.split(\"\\\\.\")(1))\n        val tuple_type_list_new_new_new_new = tuple_type_list_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new = tuple_type_list_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new_new = tuple_type_list_new_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new_new_new = tuple_type_list_new_new_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new_new_new_new = tuple_type_list_new_new_new_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new_new_new_new_new = tuple_type_list_new_new_new_new_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val tuple_type_list_new_new_new_new_new_new_new_new_new_new = tuple_type_list_new_new_new_new_new_new_new_new_new.map(x => x.split(\"\\\\$\")(0))\n        val",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_length = test_tuple.asInstanceOf[Product].productArity\n        var flag = true\n        for (i <- 0 until tuple_length) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != tuple_type) {\n                flag = false\n            }\n        }\n        flag",
    "        var flag = true\n        var first_type = test_tuple.getClass.getName\n        for (i <- 0 to test_tuple.productArity - 1) {\n            if (test_tuple.productElement(i).getClass.getName != first_type) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = true\n        var data_type = test_tuple.asInstanceOf[Product].productElement(0).getClass.getName\n        for (i <- 0 to test_tuple.asInstanceOf[Product].productArity - 1) {\n            if (test_tuple.asInstanceOf[Product].productElement(i).getClass.getName != data_type) {\n                flag = false\n            }\n        }\n        flag",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_size = tuple_type_list.size\n        if (tuple_type_list_size == 1) {\n            return true\n        }\n        else {\n            val first_type = tuple_type_list(1).split(\"\\\\]\")(0)\n            for (i <- 1 until tuple_type_list_size) {\n                val current_type = tuple_type_list(i).split(\"\\\\]\")(0)\n                if (current_type != first_type) {\n                    return false\n                }\n            }\n            return true\n        }",
    "        val tuple_type = test_tuple.getClass.getName\n        val tuple_type_list = tuple_type.split(\"\\\\[\")\n        val tuple_type_list_1 = tuple_type_list(1).split(\"\\\\]\")\n        val tuple_type_list_2 = tuple_type_list_1(0).split(\",\")\n        val tuple_type_list_3 = tuple_type_list_2.map(x => x.trim)\n        val tuple_type_list_4 = tuple_type_list_3.map(x => x.split(\"\\\\.\"))\n        val tuple_type_list_5 = tuple_type_list_4.map(x => x(x.length - 1))\n        val tuple_type_list_6 = tuple_type_list_5.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_7 = tuple_type_list_6.map(x => x(x.length - 1))\n        val tuple_type_list_8 = tuple_type_list_7.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_9 = tuple_type_list_8.map(x => x(x.length - 1))\n        val tuple_type_list_10 = tuple_type_list_9.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_11 = tuple_type_list_10.map(x => x(x.length - 1))\n        val tuple_type_list_12 = tuple_type_list_11.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_13 = tuple_type_list_12.map(x => x(x.length - 1))\n        val tuple_type_list_14 = tuple_type_list_13.map(x => x.split(\"\\\\$\"))\n        val tuple_type_list_15 = tuple_type_list_14.map(x => x(x.length - 1))\n        val tuple_type_list_16 = tuple_type_list_15.map(x => x.split(\"\\\\$\"))\n        val tuple",
    "        val test_tuple_type = test_tuple.getClass.getName\n        val test_tuple_type_list = test_tuple_type.split(\"\\\\[\")\n        val test_tuple_type_list_size = test_tuple_type_list.size\n        val test_tuple_type_list_last = test_tuple_type_list(test_tuple_type_list_size - 1)\n        val test_tuple_type_list_last_list = test_tuple_type_list_last.split(\"\\\\]\")\n        val test_tuple_type_list_last_list_size = test_tuple_type_list_last_list.size\n        val test_tuple_type_list_last_list_last = test_tuple_type_list_last_list(test_tuple_type_list_last_list_size - 1)\n        val test_tuple_type_list_last_list_last_list = test_tuple_type_list_last_list_last.split(\"\\\\.\")\n        val test_tuple_type_list_last_list_last_list_size = test_tuple_type_list_last_list_last_list.size\n        val test_tuple_type_list_last_list_last_list_last = test_tuple_type_list_last_list_last_list(test_tuple_type_list_last_list_last_list_size - 1)\n        val test_tuple_type_list_last_list_last_list_last_list = test_tuple_type_list_last_list_last_list_last.split(\"\\\\$\")\n        val test_tuple_type_list_last_list_last_list_last_list_size = test_tuple_type_list_last_list_last_list_last_list.size\n        val test_tuple_type_list_last_list_last_list_last_list_last = test_tuple_type_list_last_list_last_list_last_list(test_tuple_type_list_last_list_last",
    "        test_tuple match {\n            case (x, y) => {\n                if (x.getClass == y.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z, a) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z, a, b) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z, a, b, c) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z, a, b, c, d) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass == b.getClass && b.getClass == c.getClass && c.getClass == d.getClass) {\n                    true\n                }\n                else {\n                    false\n                }\n            }\n            case (x, y, z, a, b, c, d, e) => {\n                if (x.getClass == y.getClass && y.getClass == z.getClass && z.getClass == a.getClass && a.getClass"
  ]
}