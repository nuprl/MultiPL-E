{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find nth centered hexagonal number.\n    def centeredHexagonalNumber(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(centeredHexagonalNumber((10l)) == (271l));\n    assert(centeredHexagonalNumber((2l)) == (7l));\n    assert(centeredHexagonalNumber((9l)) == (217l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        n * (2 * n - 1)",
    "        (n * (2 * n - 1))",
    "        n * (2 * n - 1)",
    "        n * (2 * n - 1)",
    "        n * (2 * n - 1)",
    "        3 * n * (n - 1) + 2",
    "        return n * (2 * n - 1)",
    "        n * (2 * n - 1)",
    "        n * (2 * n - 1)",
    "        3 * n * (n - 1) + 2",
    "        3 * n * (n - 1) + 2",
    "        3 * n * (n - 1) + 1",
    "        n * (2 * n - 1)",
    "        n * (2 * n - 1)",
    "        3 * n * (n - 1) + 1",
    "        n * (2 * n - 1)",
    "        3 * n * (n - 1) + 1",
    "        (n * (2 * n - 1))",
    "        n * (2 * n - 1)",
    "        (3 * n * n - 3 * n + 2) / 2"
  ]
}