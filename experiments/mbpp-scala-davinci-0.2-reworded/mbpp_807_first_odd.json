{
  "name": "mbpp_807_first_odd",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        nums.filter(_ % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(_ % 2 == 1).get",
    "        nums.filter(_ % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        // Write your code here\n        return 0",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 != 0).head",
    "        nums.find(x => x % 2 != 0).get",
    "        nums.find(x => x % 2 == 1).get",
    "        // TODO: Implement this function\n        0",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 != 0).get",
    "        nums.filter(_ % 2 == 1).head",
    "        return nums.filter(x => x % 2 != 0).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        // Write your code here\n        nums.filter(_ % 2 != 0).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(_ % 2 != 0)(0)",
    "        nums.find(x => x % 2 == 1).get",
    "        // Your code here\n        0",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(_ % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(n => n % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        // Write your code here\n        return 0",
    "        nums.filter(_ % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(_ % 2 == 1).head",
    "        // TODO: Implement this function.\n        return 0",
    "        nums.filter(x => x % 2 != 0).head",
    "        nums.filter(_ % 2 != 0)(0)",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        // Write your code here\n        nums.filter(_ % 2 != 0).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(_ % 2 == 1).head",
    "        // Write your code here\n        return 0",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.filter(_ % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        if (nums.isEmpty) 0\n        else if (nums.head % 2 == 1) nums.head\n        else firstOdd(nums.tail)",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 != 0).get",
    "        nums.find(n => n % 2 == 1).get",
    "        // Fill in your code here\n        return 0",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        // Fill in the code here\n        nums.filter(x => x % 2 != 0).head",
    "        nums.filter(x => x % 2 != 0).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        // Fill in the code here.\n        return 0",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(_ % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 != 0).head",
    "        nums.filter(x => x % 2 != 0).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(_ % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.filter(_ % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        // Your code goes here\n        return 0",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 != 0).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(n => n % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 != 0).head",
    "        // Your code here\n        0",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 != 0).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(n => n % 2 == 1).get",
    "        nums.find(x => x % 2 != 0).get",
    "        nums.filter(x => x % 2 != 0).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(_ % 2 == 1).head",
    "        // TODO: Implement this function\n        0",
    "        nums.filter(_ % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1)(0)",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        // Write your code here\n        return 0",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(_ % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        return 0",
    "        nums.find(x => x % 2 == 1).getOrElse(0)",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 != 0).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        return 0",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        // Write your code here\n        return 0",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 != 0).head",
    "        // Write your code here\n        return 0",
    "        nums.find(x => x % 2 != 0).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(_ % 2 == 1).head",
    "        // Your code here\n        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 != 0).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(_ % 2 == 1).head",
    "        val odd = nums.filter(x => x % 2 == 1)\n        odd(0)",
    "        nums.filter(x => x % 2 != 0).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 != 0).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(_ % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.filter(x => x % 2 != 0).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.find(x => x % 2 == 1).get",
    "        // your code here\n        nums.filter(_ % 2 == 1).head",
    "        nums.filter(x => x % 2 == 1).head",
    "        // Write your code here\n        return 0",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head",
    "        nums.find(x => x % 2 == 1).get",
    "        nums.filter(x => x % 2 == 1).head"
  ]
}