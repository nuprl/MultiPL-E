{
  "name": "mbpp_446_count_Occurrence",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the occurence of all elements of list in a tuple.\n    def countOccurrence(tup : Any, lst : Any) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countOccurrence((Any((\"a\", \"a\", \"c\", \"b\", \"d\"))), (Any(\"a\", \"b\"))) == (3l));\n    assert(countOccurrence((Any((1l, 2l, 3l, 1l, 4l, 6l, 7l, 1l, 4l))), (Any(1l.toLong, 4l.toLong, 7l.toLong))) == (6l));\n    assert(countOccurrence((Any((1l, 2l, 3l, 4l, 5l, 6l))), (Any(1l.toLong, 2l.toLong))) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- 0 until lst.length) {\n                    if (tup == lst(i)) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        var count = 0\n        lst match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"List is not of type List[Any]\")\n            }\n        }\n        count",
    "        var count = 0\n        lst match {\n            case Nil => count\n            case x :: xs => if (x == tup) countOccurrence(tup, xs) + 1 else countOccurrence(tup, xs)\n        }",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        var count = 0\n        for (i <- 0 until lst1.length) {\n            if (lst1(i) == tup1._1) count += 1\n        }\n        count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) 1 + countOccurrence((a, b), xs)\n                        else countOccurrence((a, b), xs)\n                    }\n                    case _ => 0\n                }\n            }\n        }",
    "        var count = 0\n        lst match {\n            case Nil => 0\n            case x :: xs => if (x == tup) countOccurrence(tup, xs) + 1 else countOccurrence(tup, xs)\n        }",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupSet = tupList.toSet\n        var count = 0\n        for (i <- lstList) {\n            if (tupSet.contains(i)) count += 1\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup.asInstanceOf[Tuple2[Any, Any]]._1 == lst.asInstanceOf[List[Any]].apply(i)) {\n                count += 1\n            }\n        }\n        return count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Tuple2[Any, Any]])\n        lst3.filter(x => x._1 == tup2._1).map(x => x._2).sum",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (x == tup) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (x <- lst) {\n                    if (x == tup) count += 1\n                }\n            }\n            case _ => count = 0\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Not a list\")\n            }\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        if (lst.isInstanceOf[List[Any]]) {\n            val lst1 = lst.asInstanceOf[List[Any]]\n            lst1.count(x => x == tup)\n        } else {\n            0\n        }",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                    case _ => 0\n                }\n            }\n        }",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupList1 = tupList._1.asInstanceOf[List[Any]]\n        val tupList2 = tupList._2.asInstanceOf[List[Any]]\n        val tupList3 = tupList1 ++ tupList2\n        val tupList4 = tupList3.toSet\n        val tupList5 = tupList4.toList\n        val tupList6 = tupList5.sorted\n        val tupList7 = tupList6.map(x => (x, 0))\n        val tupList8 = tupList7.toMap\n        val tupList9 = lstList.map(x => (x, 1))\n        val tupList10 = tupList9.toMap\n        val tupList11 = tupList10.foldLeft(tupList8)((x, y) => x + y)\n        val tupList12 = tupList11.values.toList\n        val tupList13 = tupList12.foldLeft(0)((x, y) => x + y)\n        tupList13",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        return count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) b + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup1._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup3 = tup1._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup4 = tup2._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup5 = tup2._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup6 = tup3._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup7 = tup3._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup8 = tup4._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup9 = tup4._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup10 = tup5._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup11 = tup5._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup12 = tup6._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup13 = tup6._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup14 = tup7._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup15 = tup7._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup16 = tup8._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup17 = tup8._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup18 = tup9._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup19 = tup9._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup20 = tup10._1.asInstanceOf[Tuple2[Any",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0L\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        var count = 0\n        tup match {\n            case t : Tuple1[Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1) count += 1\n                        }\n                    }\n                    case _ => count = 0\n                }\n            }\n            case t : Tuple2[Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2) count += 1\n                        }\n                    }\n                    case _ => count = 0\n                }\n            }\n            case t : Tuple3[Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3) count += 1\n                        }\n                    }\n                    case _ => count = 0\n                }\n            }\n            case t : Tuple4[Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4) count += 1\n                        }\n                    }\n                    case _ => count = 0\n                }\n            }\n            case t : Tuple5[Any, Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i == t._1 || i == t._2 || i == t._3 || i == t._4 || i == t._5) count += 1\n                        }\n                    }\n                    case _ => count = 0\n                }\n            }\n            case t : Tuple6[Any, Any, Any, Any, Any, Any] => {\n                lst match {\n                    case l : List[Any] => {\n                        for (i <- l) {\n                            if (i",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val tup2 = tup1._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup3 = tup1._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup4 = tup2._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup5 = tup2._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup6 = tup3._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup7 = tup3._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup8 = tup4._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup9 = tup4._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup10 = tup5._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup11 = tup5._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup12 = tup6._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup13 = tup6._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup14 = tup7._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup15 = tup7._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup16 = tup8._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup17 = tup8._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup18 = tup9._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup19 = tup9._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup20 = tup10._1.asInstanceOf[Tuple2[Any",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup == lst.asInstanceOf[List[Any]].apply(i)) {\n                count += 1\n            }\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.map(x => x.asInstanceOf[Tuple2[Any, Any]])\n        lst2.filter(x => x._1 == tup1._1 && x._2 == tup1._2).size",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length.toLong",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Tuple2[Any, Any]])\n        val tup3 = tup2.asInstanceOf[Tuple2[Any, Any]]\n        var count = 0\n        for (i <- 0 until lst3.length) {\n            if (lst3(i)._1 == tup3._1) count += 1\n        }\n        count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        var count = 0\n        for (i <- 0 until tupList.length) {\n            for (j <- 0 until lstList.length) {\n                if (tupList(i) == lstList(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (tup2._1 == lst) count += 1\n            if (tup2._2 == lst) count += 1\n            count += countOccurrence(tup2._1, lst)\n            count += countOccurrence(tup2._2, lst)\n        }\n        else if (tup.isInstanceOf[Tuple3[Any, Any, Any]]) {\n            val tup3 = tup.asInstanceOf[Tuple3[Any, Any, Any]]\n            if (tup3._1 == lst) count += 1\n            if (tup3._2 == lst) count += 1\n            if (tup3._3 == lst) count += 1\n            count += countOccurrence(tup3._1, lst)\n            count += countOccurrence(tup3._2, lst)\n            count += countOccurrence(tup3._3, lst)\n        }\n        else if (tup.isInstanceOf[Tuple4[Any, Any, Any, Any]]) {\n            val tup4 = tup.asInstanceOf[Tuple4[Any, Any, Any, Any]]\n            if (tup4._1 == lst) count += 1\n            if (tup4._2 == lst) count += 1\n            if (tup4._3 == lst) count += 1\n            if (tup4._4 == lst) count += 1\n            count += countOccurrence(tup4._1, lst)\n            count += countOccurrence(tup4._2, lst)\n            count += countOccurrence(tup4._3, lst)\n            count += countOccurrence(tup4._4, lst)\n        }\n        else if (tup.isInstanceOf[Tuple5[Any, Any, Any, Any, Any]]) {\n            val tup5 = tup.asInstanceOf[Tuple5[Any, Any, Any, Any, Any]]\n",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                    case _ => 0\n                }\n            }\n        }",
    "        var count = 0L\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup == lst.asInstanceOf[List[Any]](i)) count += 1\n        }\n        count",
    "        val tup_lst = lst.asInstanceOf[List[Any]]\n        val tup_tup = tup.asInstanceOf[Tuple2[Any, Any]]\n        val tup_lst_count = tup_lst.count(x => x == tup_tup._1)\n        val tup_tup_count = tup_tup._2.asInstanceOf[Long]\n        tup_lst_count * tup_tup_count",
    "        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        val lst1 = lst.asInstanceOf[List[Int]]\n        val tup1 = tup.asInstanceOf[Tuple2[Int, Int]]\n        val (a, b) = tup1\n        lst1.count(x => x >= a && x <= b)",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupSet = tupList.toSet\n        val lstSet = lstList.toSet\n        val tupMap = tupSet.map(x => (x, tupList.count(_ == x))).toMap\n        val lstMap = lstSet.map(x => (x, lstList.count(_ == x))).toMap\n        val tupMapKeys = tupMap.keys\n        val lstMapKeys = lstMap.keys\n        val commonKeys = tupMapKeys.intersect(lstMapKeys)\n        var count = 0L\n        for (key <- commonKeys) {\n            count += min(tupMap(key), lstMap(key))\n        }\n        count",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupList1 = tupList._1.asInstanceOf[List[Any]]\n        val tupList2 = tupList._2.asInstanceOf[List[Any]]\n        val tupList1Count = tupList1.map(x => lstList.count(_ == x)).sum\n        val tupList2Count = tupList2.map(x => lstList.count(_ == x)).sum\n        tupList1Count + tupList2Count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (x == tup) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        var count = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) {\n                count += 1\n            }\n        }\n        return count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        var count = 0\n        for (i <- lst1) {\n            if (i == tup1._1) count += 1\n        }\n        count",
    "        lst match {\n            case lst : List[Any] => lst.count(x => x == tup)\n            case _ => 0\n        }",
    "        var count = 0\n        lst match {\n            case l : List[Any] => {\n                for (elem <- l) {\n                    if (elem == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"List expected\")\n                return -1\n            }\n        }\n        return count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count = count + 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid Input\")\n            }\n        }\n        count",
    "        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        tup match {\n            case (x, y) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => if (x == y) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n                }\n            }\n        }",
    "        var count = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) {\n                count += 1\n            }\n        }\n        count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val count = lstList.count(x => tupList.contains(x))\n        count",
    "        var count = 0\n        for (x <- lst.asInstanceOf[List[Any]]) {\n            if (x == tup) count += 1\n        }\n        count",
    "        val tup_lst = lst.asInstanceOf[List[Any]]\n        val tup_tup = tup.asInstanceOf[Tuple2[Any, Any]]\n        val tup_lst_count = tup_lst.count(x => x == tup_tup._1)\n        val tup_tup_count = tup_tup._2.asInstanceOf[Long]\n        tup_lst_count * tup_tup_count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        val t = tup.asInstanceOf[Tuple2[Any, Any]]\n        val l = lst.asInstanceOf[List[Any]]\n        l.count(x => x == t._1)",
    "        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        tup match {\n            case tup : Tuple2[Any, Any] => {\n                lst match {\n                    case lst : List[Any] => {\n                        var count = 0\n                        for (i <- lst) {\n                            if (i == tup._1) count += 1\n                            if (i == tup._2) count += 1\n                        }\n                        count\n                    }\n                }\n            }\n        }",
    "        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup == lst.asInstanceOf[List[Any]].apply(i)) {\n                count += 1\n            }\n        }\n        return count",
    "        tup match {\n            case (a, b) => lst match {\n                case Nil => 0\n                case x :: xs => if (a == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n            }\n        }",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupSet = tupList.toSet\n        val lstSet = lstList.toSet\n        val common = tupSet.intersect(lstSet)\n        val commonList = common.toList\n        val commonCount = commonList.map(x => lstList.count(_ == x))\n        commonCount.sum",
    "        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        var count = 0\n        for (i <- 0 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (tup == lst.asInstanceOf[List[Any]].apply(i)) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0\n        if (tup.isInstanceOf[Tuple2[Any, Any]]) {\n            val t = tup.asInstanceOf[Tuple2[Any, Any]]\n            if (lst.isInstanceOf[List[Any]]) {\n                val l = lst.asInstanceOf[List[Any]]\n                for (i <- l) {\n                    if (i == t._1 || i == t._2) count += 1\n                }\n            }\n        }\n        count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => (if (tup == x) 1 else 0) + countOccurrence(tup, xs)\n        }",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return 0\n            }\n        }\n        return count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        val tupList = tup.asInstanceOf[Product].productIterator.toList\n        val lstList = lst.asInstanceOf[Product].productIterator.toList\n        lstList.map(x => tupList.count(_ == x)).sum",
    "        tup match {\n            case (x, y) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => if (x == y) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n                }\n            }\n        }",
    "        // Write your code here\n        0",
    "        var count = 0\n        for (i <- 0 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (tup == lst.asInstanceOf[List[Any]](i)) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        var count = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) count += 1\n        }\n        count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return 0\n            }\n        }\n        return count",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.filter(x => x == tup2._1)\n        lst3.length",
    "        lst match {\n            case lst : List[Any] => lst.filter(x => x == tup).size\n            case _ => 0\n        }",
    "        tup match {\n            case (x, y) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => if (x == y) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n                }\n            }\n        }",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => lst.foreach(x => if (x == tup) count += 1)\n            case _ => println(\"Not a list\")\n        }\n        count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"List expected\")\n                return -1\n            }\n        }\n        return count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        val lst2 = lst1.map(x => x.asInstanceOf[Tuple2[Any, Any]])\n        val lst3 = lst2.filter(x => x._1 == tup1._1)\n        val lst4 = lst3.map(x => x._2)\n        val lst5 = lst4.map(x => x.asInstanceOf[Long])\n        val lst6 = lst5.sum\n        lst6",
    "        var count = 0\n        var lst1 = lst.asInstanceOf[List[Any]]\n        for (i <- 0 until lst1.length) {\n            if (tup == lst1(i)) {\n                count += 1\n            }\n        }\n        count",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        lst1.count(x => x == tup1._1)",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                    case _ => 0\n                }\n            }\n        }",
    "        tup match {\n            case (x, y) => {\n                lst match {\n                    case Nil => 0\n                    case head :: tail => {\n                        if (x == head) 1 + countOccurrence(tup, tail)\n                        else countOccurrence(tup, tail)\n                    }\n                }\n            }\n        }",
    "        lst match {\n            case lst : List[Any] => lst.count(x => x == tup)\n            case _ => 0\n        }",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        var count = 0\n        for (i <- lst1) {\n            if (i == tup1._1) count += 1\n        }\n        return count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => (if (tup == x) 1 else 0) + countOccurrence(tup, xs)\n        }",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup.asInstanceOf[Tuple2[Any, Any]]._1 == lst.asInstanceOf[List[Any]].apply(i)) {\n                count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Error: List expected\")\n                return -1\n            }\n        }\n        return count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val map = Map[Any, Long]()\n        for (elem <- tupList) {\n            map += (elem -> 0)\n        }\n        for (elem <- lstList) {\n            if (map.contains(elem)) {\n                map(elem) += 1\n            }\n        }\n        map.values.sum",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) b + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        var count : Long = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) count += 1\n        }\n        count",
    "        var count = 0\n        var lst1 = lst.asInstanceOf[List[Any]]\n        for (i <- lst1) {\n            if (i == tup) {\n                count += 1\n            }\n        }\n        return count",
    "        tup match {\n            case (x, y) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => if (x == y) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n                }\n            }\n        }",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        lst1.count(x => x == tup1._1)",
    "        var count = 0\n        lst match {\n            case Nil => count\n            case x :: xs => if (x == tup) countOccurrence(tup, xs) + 1 else countOccurrence(tup, xs)\n        }",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val tup2 = tup1._2.asInstanceOf[List[Any]]\n        val tup3 = tup2.map(x => lst1.count(_ == x)).sum\n        return tup3",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        var count = 0\n        for (i <- 0 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (lst.asInstanceOf[List[Any]].apply(i) == tup) {\n                count += 1\n            }\n        }\n        count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (y, ys) => {\n                        if (y == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                    case _ => 0\n                }\n            }\n        }",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        count",
    "        // Write your code here\n        0",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        val lst2 = lst1.map(x => x.asInstanceOf[Int])\n        val tup2 = tup1.asInstanceOf[Tuple2[Int, Int]]\n        val lst3 = lst2.filter(x => x >= tup2._1 && x <= tup2._2)\n        lst3.length",
    "        val tup_list = tup.asInstanceOf[List[Int]]\n        val lst_list = lst.asInstanceOf[List[Int]]\n        val tup_set = tup_list.toSet\n        val lst_set = lst_list.toSet\n        val common_set = tup_set.intersect(lst_set)\n        val common_list = common_set.toList\n        val count_map = Map[Int, Int]()\n        for (i <- common_list) {\n            count_map(i) = lst_list.count(_ == i)\n        }\n        var sum = 0\n        for (i <- common_list) {\n            sum += count_map(i)\n        }\n        sum",
    "        var count = 0\n        var lst1 = lst.asInstanceOf[List[Any]]\n        for (i <- lst1) {\n            if (i == tup) {\n                count += 1\n            }\n        }\n        count",
    "        var count = 0\n        lst match {\n            case Nil => count\n            case x :: xs => {\n                if (tup == x) count += 1\n                countOccurrence(tup, xs)\n            }\n        }\n        count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.map(x => x.asInstanceOf[Tuple2[Any, Any]])\n        val tup2 = tup1.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x._1.asInstanceOf[String])\n        val tup3 = tup2._1.asInstanceOf[String]\n        val lst4 = lst3.map(x => x.toLowerCase)\n        val tup4 = tup3.toLowerCase\n        lst4.filter(x => x == tup4).length",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val tup2 = tup1._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup3 = tup1._2.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup2._1 || x == tup2._2 || x == tup3._1 || x == tup3._2)\n        lst2.length",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Not a list\")\n            }\n        }\n        count",
    "        var count = 0\n        var lst1 = lst.asInstanceOf[List[Any]]\n        var tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        for (i <- 0 until lst1.length) {\n            if (lst1(i) == tup1._1) {\n                count += 1\n            }\n        }\n        return count",
    "        // Write your code here\n        return 0",
    "        tup match {\n            case (a, b) => lst match {\n                case Nil => 0\n                case x :: xs => if (a == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n            }\n        }",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (x <- lst) {\n                    if (x == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"List expected\")\n                return -1\n            }\n        }\n        return count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        var count = 0L\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) count += 1\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val tup2 = tup1._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup3 = tup1._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup4 = tup2._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup5 = tup2._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup6 = tup3._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup7 = tup3._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup8 = tup4._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup9 = tup4._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup10 = tup5._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup11 = tup5._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup12 = tup6._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup13 = tup6._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup14 = tup7._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup15 = tup7._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup16 = tup8._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup17 = tup8._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup18 = tup9._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup19 = tup9._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup20 = tup10._1.asInstanceOf[Tuple2[Any",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- 0 until lst.length) {\n                    if (tup == lst(i)) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return 0\n            }\n        }\n        return count",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        val lst2 = lst1.map(x => if (x == tup1._1) 1 else 0)\n        lst2.foldLeft(0)(_ + _)",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any,Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        lst match {\n            case lst : List[Any] => {\n                tup match {\n                    case tup : Tuple2[Any, Any] => {\n                        lst.foldLeft(0L)((acc, x) => {\n                            if (x == tup._1) acc + 1 else acc\n                        })\n                    }\n                    case _ => 0L\n                }\n            }\n            case _ => 0L\n        }",
    "        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any,Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        var count = 0\n        lst match {\n            case Nil => count\n            case x :: xs => if (x == tup) countOccurrence(tup, xs) + 1 else countOccurrence(tup, xs)\n        }",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val tup2 = tup1._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup3 = tup1._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup4 = tup2._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup5 = tup2._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup6 = tup3._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup7 = tup3._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup8 = tup4._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup9 = tup4._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup10 = tup5._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup11 = tup5._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup12 = tup6._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup13 = tup6._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup14 = tup7._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup15 = tup7._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup16 = tup8._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup17 = tup8._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup18 = tup9._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup19 = tup9._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup20 = tup10._1.asInstanceOf[Tuple2[Any",
    "        var count = 0\n        lst match {\n            case Nil => count\n            case x :: xs => {\n                if (x == tup) count += 1\n                countOccurrence(tup, xs)\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (lst.asInstanceOf[List[Any]](i) == tup) count += 1\n        }\n        count",
    "        val tup_lst = lst.asInstanceOf[List[Int]]\n        val tup_tup = tup.asInstanceOf[Tuple2[Int, Int]]\n        val tup_lst_count = tup_lst.count(x => x == tup_tup._1)\n        val tup_tup_count = tup_tup._2\n        if (tup_lst_count == tup_tup_count) 1 else 0",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length.toLong",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- 0 to lst.length - 1) {\n                    if (lst(i) == tup) count += 1\n                }\n            }\n        }\n        return count",
    "        // Write your code here\n        0",
    "        tup match {\n            case (x, y) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => if (x == y) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n                }\n            }\n        }",
    "        var count = 0\n        for (i <- 0 until lst.asInstanceOf[List[Any]].length) {\n            if (tup.asInstanceOf[Tuple2[Any, Any]]._1 == lst.asInstanceOf[List[Any]].apply(i)) {\n                count += 1\n            }\n        }\n        return count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => count\n        }\n        count",
    "        tup match {\n            case (x, y) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => if (x == y) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n                }\n            }\n            case _ => 0\n        }",
    "        var count = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) {\n                count += 1\n            }\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        var count = 0\n        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => count\n                    case x :: xs => {\n                        if (a == x) count += 1\n                        countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for(i <- lst) {\n                    if(i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        var count = 0L\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        count",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.filter(x => x == tup1._1)\n        lst2.length",
    "        tup match {\n            case (x, y) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => if (x == y) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n                }\n            }\n        }",
    "        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        val tupList = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupList1 = tupList._1.asInstanceOf[List[Any]]\n        val tupList2 = tupList._2.asInstanceOf[List[Any]]\n        val tupList1Map = tupList1.groupBy(identity).mapValues(_.size)\n        val tupList2Map = tupList2.groupBy(identity).mapValues(_.size)\n        val lstListMap = lstList.groupBy(identity).mapValues(_.size)\n        var count = 0L\n        for (i <- lstListMap) {\n            if (tupList1Map.contains(i._1) && tupList2Map.contains(i._1)) {\n                val min = min(tupList1Map(i._1), tupList2Map(i._1))\n                if (min >= i._2) count += i._2\n                else count += min\n            }\n        }\n        count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        return count",
    "        var count = 0\n        for (i <- 0 to lst.asInstanceOf[List[Any]].length - 1) {\n            if (tup == lst.asInstanceOf[List[Any]].apply(i)) {\n                count += 1\n            }\n        }\n        count",
    "        // Write your code here\n        0",
    "        lst match {\n            case Nil => 0\n            case x :: xs => (if (tup == x) 1 else 0) + countOccurrence(tup, xs)\n        }",
    "        var count = 0\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i == tup) count += 1\n        }\n        count",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupSet = tupList.toSet\n        val lstSet = lstList.toSet\n        val tupMap = tupSet.map(x => (x, tupList.count(_ == x))).toMap\n        val lstMap = lstSet.map(x => (x, lstList.count(_ == x))).toMap\n        val lstMap2 = lstMap.map(x => (x._1, x._2 * tupMap.getOrElse(x._1, 0)))\n        lstMap2.values.sum",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val tup2 = tup1.asInstanceOf[Tuple2[Any, Any]]\n        val tup3 = tup2.asInstanceOf[Tuple2[Any, Any]]\n        val tup4 = tup3.asInstanceOf[Tuple2[Any, Any]]\n        val tup5 = tup4.asInstanceOf[Tuple2[Any, Any]]\n        val tup6 = tup5.asInstanceOf[Tuple2[Any, Any]]\n        val tup7 = tup6.asInstanceOf[Tuple2[Any, Any]]\n        val tup8 = tup7.asInstanceOf[Tuple2[Any, Any]]\n        val tup9 = tup8.asInstanceOf[Tuple2[Any, Any]]\n        val tup10 = tup9.asInstanceOf[Tuple2[Any, Any]]\n        val tup11 = tup10.asInstanceOf[Tuple2[Any, Any]]\n        val tup12 = tup11.asInstanceOf[Tuple2[Any, Any]]\n        val tup13 = tup12.asInstanceOf[Tuple2[Any, Any]]\n        val tup14 = tup13.asInstanceOf[Tuple2[Any, Any]]\n        val tup15 = tup14.asInstanceOf[Tuple2[Any, Any]]\n        val tup16 = tup15.asInstanceOf[Tuple2[Any, Any]]\n        val tup17 = tup16.asInstanceOf[Tuple2[Any, Any]]\n        val tup18 = tup17.asInstanceOf[Tuple2[Any, Any]]\n        val tup19 = tup18.asInstanceOf[Tuple2[Any, Any]]\n        val tup20 = tup19.asInstanceOf[Tuple2[Any, Any]]\n        val tup21 = tup20.asInstanceOf[Tuple2[Any, Any]]\n        val tup22 = tup21.as",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        lst1.count(x => x == tup1._1)",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) count += 1\n                }\n            }\n            case _ => count = 0\n        }\n        count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                    case _ => 0\n                }\n            }\n        }",
    "        var count = 0\n        lst match {\n            case Nil => count\n            case x :: xs => {\n                if (tup == x) count += 1\n                countOccurrence(tup, xs)\n            }\n        }\n        count",
    "        lst match {\n            case lst : List[Any] => lst.count(x => x == tup)\n            case _ => 0\n        }",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.filter(x => x == tup2._1)\n        lst3.length",
    "        val tupList = tup.asInstanceOf[List[Any]]\n        val lstList = lst.asInstanceOf[List[Any]]\n        val tupSet = tupList.toSet\n        val lstSet = lstList.toSet\n        val intersection = tupSet.intersect(lstSet)\n        val count = intersection.map(x => lstList.count(y => y == x)).sum\n        count",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        return count",
    "        var count = 0\n        var lst1 = lst.asInstanceOf[List[Any]]\n        var tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        for (i <- 0 until lst1.length) {\n            if (lst1(i) == tup1._1) count += 1\n        }\n        return count",
    "        val t = tup.asInstanceOf[Tuple2[Any, Any]]\n        val l = lst.asInstanceOf[List[Any]]\n        l.filter(x => x == t._1).length",
    "        lst match {\n            case Nil => 0\n            case head :: tail => {\n                tup match {\n                    case (a, b) => {\n                        if (a == head) 1 + countOccurrence(tup, tail)\n                        else countOccurrence(tup, tail)\n                    }\n                    case _ => 0\n                }\n            }\n        }",
    "        lst match {\n            case Nil => 0\n            case x :: xs => (if (tup == x) 1 else 0) + countOccurrence(tup, xs)\n        }",
    "        // Fill Up this function body\n        // To print the output, use the 'println(i)' function\n        var count = 0\n        var lst1 = lst.asInstanceOf[List[Any]]\n        for(i <- lst1) {\n            if(i == tup) {\n                count += 1\n            }\n        }\n        count",
    "        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst1 = lst.asInstanceOf[List[Any]]\n        lst1.count(x => x == tup1._1)",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        var count = 0L\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        count",
    "        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        count",
    "        val tupLen = tup.asInstanceOf[Product].productArity\n        val lstLen = lst.asInstanceOf[Product].productArity\n        var count = 0\n        for (i <- 0 until tupLen) {\n            for (j <- 0 until lstLen) {\n                if (tup.asInstanceOf[Product].productElement(i) == lst.asInstanceOf[Product].productElement(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        lst match {\n            case lst : List[Any] => {\n                lst.foreach(x => {\n                    if (x == tup) count += 1\n                })\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return count",
    "        var count = 0\n        lst match {\n            case lst : List[Any] => {\n                for (i <- lst) {\n                    if (i == tup) {\n                        count += 1\n                    }\n                }\n            }\n            case _ => {\n                return -1\n            }\n        }\n        return count",
    "        tup match {\n            case (a, b) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => if (x == a || x == b) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n                }\n            }\n        }",
    "        tup match {\n            case (x, y) => {\n                lst match {\n                    case Nil => 0\n                    case x :: xs => if (x == y) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n                }\n            }\n        }",
    "        lst match {\n            case Nil => 0\n            case x :: xs => (if (tup == x) 1 else 0) + countOccurrence(tup, xs)\n        }",
    "        val lst1 = lst.asInstanceOf[List[Any]]\n        val tup1 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst2 = lst1.map(x => x.asInstanceOf[Tuple2[Any, Any]])\n        val tup2 = tup1.asInstanceOf[Tuple2[Any, Any]]\n        val tup3 = tup2._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup4 = tup2._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup5 = tup3._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup6 = tup3._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup7 = tup4._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup8 = tup4._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup9 = tup5._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup10 = tup5._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup11 = tup6._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup12 = tup6._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup13 = tup7._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup14 = tup7._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup15 = tup8._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup16 = tup8._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup17 = tup9._1.asInstanceOf[Tuple2[Any, Any]]\n        val tup18 = tup9._2.asInstanceOf[Tuple2[Any, Any]]\n        val tup19 = tup10._1.asInstanceOf[Tuple",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                }\n            }\n        }",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        var count = 0\n        lst match {\n            case Nil => count\n            case x :: xs => if (tup == x) countOccurrence(tup, xs) + 1 else countOccurrence(tup, xs)\n        }",
    "        lst match {\n            case Nil => 0\n            case x :: xs => {\n                tup match {\n                    case (a, b) => {\n                        if (a == x) 1 + countOccurrence(tup, xs)\n                        else countOccurrence(tup, xs)\n                    }\n                    case _ => 0\n                }\n            }\n        }",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }",
    "        val lst2 = lst.asInstanceOf[List[Any]]\n        val tup2 = tup.asInstanceOf[Tuple2[Any, Any]]\n        val lst3 = lst2.map(x => x.asInstanceOf[Tuple2[Any, Any]])\n        val tup3 = tup2.asInstanceOf[Tuple2[Any, Any]]\n        val lst4 = lst3.map(x => x._1.asInstanceOf[String])\n        val tup4 = tup3._1.asInstanceOf[String]\n        val lst5 = lst3.map(x => x._2.asInstanceOf[Long])\n        val tup5 = tup3._2.asInstanceOf[Long]\n        val lst6 = lst4.zip(lst5)\n        val tup6 = tup4.zip(tup5)\n        val lst7 = lst6.map(x => x._1.toString)\n        val tup7 = tup6.map(x => x._1.toString)\n        val lst8 = lst6.map(x => x._2.toLong)\n        val tup8 = tup6.map(x => x._2.toLong)\n        val lst9 = lst7.zip(lst8)\n        val tup9 = tup7.zip(tup8)\n        val lst10 = lst9.map(x => x._1.toString)\n        val tup10 = tup9.map(x => x._1.toString)\n        val lst11 = lst9.map(x => x._2.toLong)\n        val tup11 = tup9.map(x => x._2.toLong)\n        val lst12 = lst10.zip(lst11)\n        val tup12 = tup10.zip(tup11)\n        val lst13 = lst12.map(x => x._1.toString)\n        val tup13 = tup12.map(x => x._1.toString)\n        val lst14 = lst",
    "        lst match {\n            case Nil => 0\n            case x :: xs => if (tup == x) 1 + countOccurrence(tup, xs) else countOccurrence(tup, xs)\n        }"
  ]
}