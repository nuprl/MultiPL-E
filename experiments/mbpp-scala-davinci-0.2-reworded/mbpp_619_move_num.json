{
  "name": "mbpp_619_move_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to move all the numbers to the end of the given string.\n    def moveNum(test_str : String) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(moveNum((\"I1love143you55three3000thousand\")).equals((\"Iloveyouthreethousand1143553000\")));\n    assert(moveNum((\"Avengers124Assemble\")).equals((\"AvengersAssemble124\")));\n    assert(moveNum((\"Its11our12path13to14see15things16do17things\")).equals((\"Itsourpathtoseethingsdothings11121314151617\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var nums = new ArrayBuffer[Char]()\n        var str = new ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else str += c\n        }\n        str.mkString + nums.mkString",
    "        var str = test_str\n        var num = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val nums = ArrayBuffer[Char]()\n        val chars = ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        return chars.mkString + nums.mkString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n                str_arr(i) = ' '\n            }\n        }\n        var str_arr_new = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i) != ' ') str_arr_new += str_arr(i)\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        var num = new StringBuilder\n        var str = new StringBuilder\n        for (c <- test_str) {\n            if (c.isDigit) num += c\n            else str += c\n        }\n        str.append(num).toString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]()\n        var str_arr_new = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        val num_list = ListBuffer[Char]()\n        val char_list = ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) num_list += c\n            else char_list += c\n        }\n        char_list.mkString + num_list.mkString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var str_arr_new = ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new.mkString + num_arr.mkString",
    "        val num_arr = test_str.split(\"[^0-9]\")\n        val char_arr = test_str.split(\"[0-9]\")\n        val num_str = num_arr.filter(_ != \"\").mkString(\"\")\n        val char_str = char_arr.filter(_ != \"\").mkString(\"\")\n        char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        return char_str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(!_.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        val nums = \"0123456789\"\n        val str = new StringBuilder\n        val num = new StringBuilder\n        for (c <- test_str) {\n            if (nums.contains(c)) num += c\n            else str += c\n        }\n        str.toString + num.toString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toArray\n        val num_arr = str_arr.filter(x => nums.contains(x))\n        val str_arr_new = str_arr.filter(x => !nums.contains(x))\n        str_arr_new.mkString + num_arr.mkString",
    "        val nums = test_str.filter(c => c.isDigit).toList\n        val chars = test_str.filter(c => !c.isDigit).toList\n        (chars ::: nums).mkString",
    "        var str = test_str\n        var nums = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1, str.length)\n            }\n            else i += 1\n        }\n        str + nums",
    "        val num_str = test_str.filter(x => x.isDigit)\n        val alpha_str = test_str.filter(x => x.isLetter)\n        return alpha_str + num_str",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val nums = ListBuffer[Char]()\n        val chars = ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        (chars ++ nums).mkString",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num_str",
    "        val nums = \"0123456789\"\n        val str = test_str.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            if (nums.contains(str(i))) {\n                while (i < j && nums.contains(str(j))) j -= 1\n                val tmp = str(i)\n                str(i) = str(j)\n                str(j) = tmp\n            }\n            i += 1\n        }\n        str.mkString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val strs = test_str.filter(_.isLetter)\n        strs + nums",
    "        val str_arr = test_str.toCharArray\n        val num_arr = new ArrayBuffer[Char]\n        val char_arr = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).isDigit) {\n                num_arr += str_arr(i)\n            } else {\n                char_arr += str_arr(i)\n            }\n        }\n        char_arr.mkString + num_arr.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            } else {\n                i += 1\n            }\n        }\n        str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 to str.length - 1) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 to test_str.length - 1) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                alpha_str += test_str(i)\n            }\n        }\n        return alpha_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num_str",
    "        var str_arr = test_str.split(\"\")\n        var num_arr = ArrayBuffer[String]()\n        var str_arr_new = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]\")) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new ++= num_arr\n        return str_arr_new.mkString(\"\")",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        return chars + nums",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        val str_arr = test_str.toCharArray\n        val num_arr = new ArrayBuffer[Char]\n        val char_arr = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).isDigit) {\n                num_arr += str_arr(i)\n            } else {\n                char_arr += str_arr(i)\n            }\n        }\n        char_arr.mkString + num_arr.mkString",
    "        val num_regex = \"[0-9]\".r\n        val num_list = num_regex.findAllIn(test_str).toList\n        val num_str = num_list.mkString\n        val non_num_regex = \"[^0-9]\".r\n        val non_num_list = non_num_regex.findAllIn(test_str).toList\n        val non_num_str = non_num_list.mkString\n        non_num_str + num_str",
    "        val nums = test_str.filter(c => c >= '0' && c <= '9')\n        val chars = test_str.filter(c => c < '0' || c > '9')\n        chars + nums",
    "        val nums = test_str.filter(x => x.isDigit)\n        val strs = test_str.filter(x => !x.isDigit)\n        strs + nums",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filterNot(_.isDigit)\n        chars + nums",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n            i += 1\n        }\n        str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        return char_str + num_str",
    "        val nums = new ListBuffer[Char]()\n        val chars = new ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        var str = test_str\n        var nums = List[Char]()\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums = str(i) :: nums\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n        }\n        str + nums.mkString(\"\")",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        val num_arr = new ArrayBuffer[Char]\n        val str_arr2 = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) num_arr += str_arr(i)\n            else str_arr2 += str_arr(i)\n        }\n        return str_arr2.mkString + num_arr.mkString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var i = 0\n        var j = str_arr.length - 1\n        while (i < j) {\n            if (nums.contains(str_arr(i))) {\n                while (i < j && nums.contains(str_arr(j))) {\n                    j -= 1\n                }\n                val temp = str_arr(i)\n                str_arr(i) = str_arr(j)\n                str_arr(j) = temp\n            }\n            i += 1\n        }\n        str_arr.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num_str",
    "        val str_arr = test_str.split(\"\")\n        val num_arr = str_arr.filter(x => x.matches(\"[0-9]\"))\n        val char_arr = str_arr.filter(x => !x.matches(\"[0-9]\"))\n        char_arr.mkString(\"\") + num_arr.mkString(\"\")",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        return char_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        return chars + nums",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var str_arr_new = ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) num_arr += str_arr(i)\n            else str_arr_new += str_arr(i)\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        var str = test_str.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            if (str(i).isDigit) {\n                while (j > i && str(j).isDigit) j -= 1\n                if (j > i) {\n                    val temp = str(i)\n                    str(i) = str(j)\n                    str(j) = temp\n                }\n            }\n            i += 1\n        }\n        return str.mkString",
    "        val nums = ListBuffer[Char]()\n        val chars = ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        val nums = ArrayBuffer[Char]()\n        val chars = ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            } else {\n                i += 1\n            }\n        }\n        str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        var str_arr = test_str.split(\"\")\n        var num_arr = ArrayBuffer[String]()\n        var char_arr = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]\")) {\n                num_arr += str_arr(i)\n            } else {\n                char_arr += str_arr(i)\n            }\n        }\n        return char_arr.mkString + num_arr.mkString",
    "        var str_arr = test_str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var char_arr = ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).isDigit) {\n                num_arr += str_arr(i)\n            } else {\n                char_arr += str_arr(i)\n            }\n        }\n        return char_arr.mkString + num_arr.mkString",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else alpha_str += test_str(i)\n        }\n        return alpha_str + num_str",
    "        var str_arr = test_str.split(\"\")\n        var num_arr = ArrayBuffer[String]()\n        var char_arr = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i) >= \"0\" && str_arr(i) <= \"9\") num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        return char_arr.mkString(\"\") + num_arr.mkString(\"\")",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = Array[Char]()\n        var str_arr_new = Array[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr = num_arr :+ str_arr(i)\n            } else {\n                str_arr_new = str_arr_new :+ str_arr(i)\n            }\n        }\n        str_arr_new.mkString + num_arr.mkString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => c.isLetter)\n        return char_str + num_str",
    "        val num_list = ListBuffer[Char]()\n        val char_list = ListBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_list += test_str(i)\n            else char_list += test_str(i)\n        }\n        return (char_list ++ num_list).mkString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var str_arr_new = ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        val nums = new ArrayBuffer[Char]()\n        val chars = new ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var i = 0\n        var j = str_arr.length - 1\n        while (i < j) {\n            if (nums.contains(str_arr(i))) {\n                while (i < j && nums.contains(str_arr(j))) j -= 1\n                val tmp = str_arr(i)\n                str_arr(i) = str_arr(j)\n                str_arr(j) = tmp\n            }\n            i += 1\n        }\n        str_arr.mkString",
    "        val nums = new ArrayBuffer[Char]\n        val chars = new ArrayBuffer[Char]\n        for (c <- test_str) {\n            if (c >= '0' && c <= '9') nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        val nums = test_str.filter(c => c >= '0' && c <= '9')\n        val chars = test_str.filter(c => c < '0' || c > '9')\n        chars + nums",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => c.isLetter)\n        return char_str + num_str",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else alpha_str += test_str(i)\n        }\n        alpha_str + num_str",
    "        var str_list = test_str.split(\"\")\n        var num_list = List[String]()\n        var char_list = List[String]()\n        for (i <- 0 until str_list.length) {\n            if (str_list(i).matches(\"[0-9]\")) {\n                num_list = num_list :+ str_list(i)\n            } else {\n                char_list = char_list :+ str_list(i)\n            }\n        }\n        return char_list.mkString + num_list.mkString",
    "        val num_str = test_str.filter(_.isDigit)\n        val alpha_str = test_str.filter(_.isLetter)\n        return alpha_str + num_str",
    "        val nums = new ArrayBuffer[Char]()\n        val chars = new ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        return chars.mkString + nums.mkString",
    "        var str_arr = test_str.split(\"\")\n        var num_arr = ArrayBuffer[String]()\n        var char_arr = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]\")) num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        return char_arr.mkString + num_arr.mkString",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val nums = \"0123456789\"\n        val str = new StringBuilder\n        val num = new StringBuilder\n        for (i <- 0 until test_str.length) {\n            if (nums.contains(test_str(i))) num += test_str(i)\n            else str += test_str(i)\n        }\n        str.toString + num.toString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        char_str + num_str",
    "        val str_arr = test_str.split(\"\")\n        val num_arr = new ArrayBuffer[String]()\n        val char_arr = new ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]\")) num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        char_arr ++= num_arr\n        char_arr.mkString(\"\")",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        return char_str + num_str",
    "        val num_str = new StringBuilder\n        val char_str = new StringBuilder\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str.append(test_str(i))\n            else char_str.append(test_str(i))\n        }\n        char_str.append(num_str)\n        char_str.toString",
    "        var nums = \"\"\n        var chars = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) nums += test_str(i)\n            else chars += test_str(i)\n        }\n        chars + nums",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num_str",
    "        var str = test_str\n        val nums = \"0123456789\"\n        var i = 0\n        while (i < str.length) {\n            if (nums.contains(str(i))) {\n                str = str.substring(0, i) + str.substring(i + 1) + str(i)\n            } else {\n                i += 1\n            }\n        }\n        str",
    "        val num_str = test_str.filter(Character.isDigit(_))\n        val non_num_str = test_str.filter(!Character.isDigit(_))\n        non_num_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        char_str + num_str",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 to str.length - 1) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        return chars + nums",
    "        val nums = \"0123456789\"\n        val str = test_str.toList\n        val (nums_list, str_list) = str.partition(nums.contains(_))\n        (str_list ++ nums_list).mkString",
    "        var str = test_str\n        var nums = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            } else {\n                i += 1\n            }\n        }\n        str + nums",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        return char_str + num_str",
    "        var str = \"\"\n        var num = \"\"\n        for (c <- test_str) {\n            if (c.isDigit) num += c\n            else str += c\n        }\n        str + num",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val nums = \"0123456789\"\n        val nums_arr = new ArrayBuffer[Char]()\n        val other_arr = new ArrayBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (nums.contains(test_str(i))) nums_arr += test_str(i)\n            else other_arr += test_str(i)\n        }\n        other_arr.mkString + nums_arr.mkString",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(!_.isDigit)\n        chars + nums",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else alpha_str += test_str(i)\n        }\n        alpha_str + num_str",
    "        val nums = new ListBuffer[Char]\n        val chars = new ListBuffer[Char]\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 to test_str.length - 1) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                char_str += test_str(i)\n            }\n        }\n        return char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        char_str + num_str",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        return char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                char_str += test_str(i)\n            }\n        }\n        return char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            } else {\n                i += 1\n            }\n        }\n        str + num_str",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- test_str) {\n            if (i.isDigit) num_str += i\n            else alpha_str += i\n        }\n        return alpha_str + num_str",
    "        var nums = new ArrayBuffer[Char]()\n        var chars = new ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        return chars.mkString + nums.mkString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var str_arr_new = ArrayBuffer[Char]()\n        for (c <- str_arr) {\n            if (nums.contains(c)) {\n                num_arr += c\n            } else {\n                str_arr_new += c\n            }\n        }\n        str_arr_new.mkString + num_arr.mkString",
    "        var str = test_str\n        var num = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num",
    "        val str_arr = test_str.split(\"\")\n        val num_arr = str_arr.filter(x => x.matches(\"[0-9]\"))\n        val char_arr = str_arr.filter(x => x.matches(\"[a-zA-Z]\"))\n        (char_arr ++ num_arr).mkString(\"\")",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(!_.isDigit)\n        chars + nums",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                char_str += test_str(i)\n            }\n        }\n        return char_str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        val num_str = new StringBuilder\n        val char_str = new StringBuilder\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str.append(test_str(i))\n            else char_str.append(test_str(i))\n        }\n        return char_str.toString + num_str.toString",
    "        val nums = ListBuffer[Char]()\n        val chars = ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => c.isLetter)\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        val num_arr = new ArrayBuffer[Char]\n        val str_arr_new = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new.mkString + num_arr.mkString",
    "        val num_arr = ArrayBuffer[Char]()\n        val char_arr = ArrayBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_arr += test_str(i)\n            else char_arr += test_str(i)\n        }\n        return char_arr.mkString + num_arr.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        return chars + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filterNot(_.isDigit)\n        char_str + num_str",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(!_.isDigit)\n        return chars + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(!_.isDigit)\n        char_str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val alpha_str = test_str.filter(_.isLetter)\n        alpha_str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(!_.isDigit)\n        char_str + num_str",
    "        var str_arr = test_str.split(\" \")\n        var num_arr = ArrayBuffer[String]()\n        var str_arr_new = ArrayBuffer[String]()\n        for (str <- str_arr) {\n            if (str.matches(\"[0-9]+\")) {\n                num_arr += str\n            } else {\n                str_arr_new += str\n            }\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString(\" \")",
    "        val num_str = test_str.filter(c => c >= '0' && c <= '9')\n        val char_str = test_str.filter(c => c < '0' || c > '9')\n        char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (c <- test_str) {\n            if (c.isDigit) num_str += c\n            else char_str += c\n        }\n        char_str + num_str",
    "        val num_str = new StringBuilder\n        val char_str = new StringBuilder\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        char_str.toString + num_str.toString",
    "        val num_str = test_str.filter(x => x.isDigit)\n        val char_str = test_str.filter(x => !x.isDigit)\n        char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(c => c >= '0' && c <= '9')\n        val chars = test_str.filter(c => c < '0' || c > '9')\n        chars + nums",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        val str_arr_len = str_arr.length\n        var i = 0\n        var j = str_arr_len - 1\n        while (i < j) {\n            if (nums.contains(str_arr(i))) {\n                while (i < j && nums.contains(str_arr(j))) {\n                    j -= 1\n                }\n                if (i < j) {\n                    val tmp = str_arr(i)\n                    str_arr(i) = str_arr(j)\n                    str_arr(j) = tmp\n                }\n            }\n            i += 1\n        }\n        str_arr.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        var nums = new ArrayBuffer[Char]()\n        var str = new ArrayBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) nums += test_str(i)\n            else str += test_str(i)\n        }\n        str ++= nums\n        str.mkString",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else alpha_str += test_str(i)\n        }\n        return alpha_str + num_str",
    "        val nums = \"0123456789\"\n        var str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            }\n        }\n        var str_arr_new = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (!nums.contains(str_arr(i))) {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        return char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val alpha_str = test_str.filter(c => c.isLetter)\n        return alpha_str + num_str",
    "        val num_str = test_str.filter(x => x.isDigit)\n        val char_str = test_str.filter(x => x.isLetter)\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        val str_arr_len = str_arr.length\n        var i = 0\n        var j = str_arr_len - 1\n        while (i < j) {\n            if (nums.contains(str_arr(i))) {\n                while (i < j && nums.contains(str_arr(j))) {\n                    j -= 1\n                }\n                val tmp = str_arr(i)\n                str_arr(i) = str_arr(j)\n                str_arr(j) = tmp\n            }\n            i += 1\n        }\n        str_arr.mkString",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        char_str + num_str",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        return chars + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(!_.isDigit)\n        char_str + num_str",
    "        var str = test_str\n        var num = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => c.isLetter)\n        char_str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filterNot(_.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        var str = test_str\n        var num = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            } else {\n                i += 1\n            }\n        }\n        str + num",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        var num_list = new ListBuffer[Char]()\n        var char_list = new ListBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_list += test_str(i)\n            else char_list += test_str(i)\n        }\n        return char_list.mkString + num_list.mkString",
    "        var nums = new StringBuilder\n        var chars = new StringBuilder\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) nums += test_str(i)\n            else chars += test_str(i)\n        }\n        return chars.toString + nums.toString",
    "        val num_str = test_str.filter(_.isDigit)\n        val alpha_str = test_str.filter(_.isLetter)\n        alpha_str + num_str",
    "        var str_arr = test_str.split(\"\")\n        var num_arr = ArrayBuffer[String]()\n        var char_arr = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]\")) {\n                num_arr += str_arr(i)\n            } else {\n                char_arr += str_arr(i)\n            }\n        }\n        return char_arr.mkString(\"\") + num_arr.mkString(\"\")",
    "        val num_str = test_str.filter(_.isDigit)\n        val alpha_str = test_str.filter(_.isLetter)\n        alpha_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = ListBuffer[Char]()\n        val chars = ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        (chars ++ nums).mkString(\"\")",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else alpha_str += test_str(i)\n        }\n        return alpha_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val str = test_str.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            while (i < j && !nums.contains(str(i))) i += 1\n            while (i < j && nums.contains(str(j))) j -= 1\n            if (i < j) {\n                val temp = str(i)\n                str(i) = str(j)\n                str(j) = temp\n            }\n        }\n        str.mkString",
    "        var str_arr = test_str.split(\" \")\n        var num_arr = ArrayBuffer[String]()\n        var str_arr_new = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]+\")) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        return (str_arr_new ++ num_arr).mkString(\" \")"
  ]
}