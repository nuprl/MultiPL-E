{
  "name": "mbpp_619_move_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to move all the numbers to the end of the given string.\n    def moveNum(test_str : String) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(moveNum((\"I1love143you55three3000thousand\")).equals((\"Iloveyouthreethousand1143553000\")));\n    assert(moveNum((\"Avengers124Assemble\")).equals((\"AvengersAssemble124\")));\n    assert(moveNum((\"Its11our12path13to14see15things16do17things\")).equals((\"Itsourpathtoseethingsdothings11121314151617\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var nums = new ArrayBuffer[Char]()\n        var str = new ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else str += c\n        }\n        str.mkString + nums.mkString",
    "        var str = test_str\n        var num = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val nums = ArrayBuffer[Char]()\n        val chars = ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        return chars.mkString + nums.mkString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n                str_arr(i) = ' '\n            }\n        }\n        var str_arr_new = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i) != ' ') str_arr_new += str_arr(i)\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        var num = new StringBuilder\n        var str = new StringBuilder\n        for (c <- test_str) {\n            if (c.isDigit) num += c\n            else str += c\n        }\n        str.append(num).toString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]()\n        var str_arr_new = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        val num_list = ListBuffer[Char]()\n        val char_list = ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) num_list += c\n            else char_list += c\n        }\n        char_list.mkString + num_list.mkString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var str_arr_new = ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new.mkString + num_arr.mkString",
    "        val num_arr = test_str.split(\"[^0-9]\")\n        val char_arr = test_str.split(\"[0-9]\")\n        val num_str = num_arr.filter(_ != \"\").mkString(\"\")\n        val char_str = char_arr.filter(_ != \"\").mkString(\"\")\n        char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        return char_str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(!_.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        val nums = \"0123456789\"\n        val str = new StringBuilder\n        val num = new StringBuilder\n        for (c <- test_str) {\n            if (nums.contains(c)) num += c\n            else str += c\n        }\n        str.toString + num.toString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str"
  ]
}