{
  "name": "mbpp_72_dif_Square",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        if (n < 0) return false\n        var i = 0\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        if (n < 0) return false\n        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            var j = 1\n            while (j * j < n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var sqrtN = sqrt(n).toLong\n        var i = sqrtN\n        while (i > 0) {\n            var sq = i * i\n            var diff = n - sq\n            var sqrtDiff = sqrt(diff).toLong\n            if (sqrtDiff * sqrtDiff == diff) return true\n            i -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i <= sqrt(n)) {\n            var j = 1\n            while (j <= sqrt(n)) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val sq = i * i\n            if (sq == n) return true\n            val dif = n - sq\n            val sqrtDif = sqrt(dif).toLong\n            if (sqrtDif * sqrtDif == dif) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        false",
    "        var sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            var j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var sqrtN = sqrt(n).toInt\n        var i = sqrtN\n        while (i > 0) {\n            var sq = i * i\n            var sq2 = sqrtN * sqrtN\n            if (sq + sq2 == n) return true\n            i -= 1\n        }\n        return false",
    "        var sqrtN = sqrt(n).toLong\n        var i = sqrtN\n        while (i > 0) {\n            var j = sqrtN\n            while (j > 0) {\n                if (i * i - j * j == n) return true\n                j -= 1\n            }\n            i -= 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        var i = 0L\n        while (i <= sqrt) {\n            var j = 0L\n            while (j <= sqrt) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toInt\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            val sq2 = sqrt(n - sq).toInt\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        var sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            var sq = i * i\n            if (sq > n) {\n                return false\n            }\n            var sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) {\n                return true\n            }\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            var j = 1\n            while (j * j < n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val sq = i * i\n            if (sq > n) return false\n            val diff = n - sq\n            val sqrtDiff = sqrt(diff).toLong\n            if (sqrtDiff * sqrtDiff == diff) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        var j = 1\n        while(i <= n) {\n            j = 1\n            while(j <= n) {\n                if(i*i - j*j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        false",
    "        var sqrt = sqrt(n).toLong\n        var i = 0L\n        while (i <= sqrt) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        if (sqrt * sqrt == n) return true\n        var i = 1\n        while (i <= sqrt) {\n            var j = 1\n            while (j <= sqrt) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var sqrtN = sqrt(n.toDouble).toLong\n        if (sqrtN * sqrtN == n) return true\n        else {\n            var i = sqrtN - 1\n            while (i > 0) {\n                if (isSquare(n + i * i)) return true\n                i -= 1\n            }\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var sqrtN = sqrt(n)\n        if (sqrtN == sqrtN.toInt) {\n            return false\n        }\n        var i = 1\n        while (i <= sqrtN.toInt) {\n            if (sqrt(n + i * i) == sqrt(n + i * i).toInt) {\n                return true\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var i = 0\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            val j = sqrt(n - i * i).toInt\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        false",
    "        var i = 1\n        while(i * i < n) {\n            if(isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            var j = 1\n            while (j * j < n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        var i = sqrt\n        while (i >= 0) {\n            var j = sqrt\n            while (j >= 0) {\n                if (i * i - j * j == n) return true\n                j -= 1\n            }\n            i -= 1\n        }\n        return false",
    "        var i = 1\n        while(i * i < n) {\n            if(isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val sq = i * i\n            if (sq > n) return false\n            val sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        var i = 1\n        while (i <= sqrt) {\n            var j = 1\n            while (j <= sqrt) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            val sq2 = (n + sq) / 2\n            if (sq2 * sq2 == n + sq) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var i = 0\n        while (i * i < n) {\n            var j = 0\n            while (j * j < n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        if (n < 0) return false\n        var sqrt = sqrt(n).toLong\n        while (sqrt * sqrt > n) sqrt -= 1\n        while (sqrt * sqrt < n) sqrt += 1\n        return sqrt * sqrt == n",
    "        var i = 1\n        while (i * i <= n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j + i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        var x = sqrt(n).toLong\n        while (x > 0) {\n            if (x * x == n) return true\n            x -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var x = sqrt(n).toLong\n        while (x > 0) {\n            var y = sqrt(n + x * x).toLong\n            if (y * y == n + x * x) return true\n            x -= 1\n        }\n        return false",
    "        for (i <- 1 to n.toInt) {\n            if (i * i > n) return false\n            if (isSquare(n - i * i)) return true\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var a = sqrt(n).toLong\n        var b = 0L\n        while (a >= 0) {\n            b = sqrt(n + a * a).toLong\n            if (a * a + b * b == n) return true\n            a -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        var i = sqrt\n        while(i > 0) {\n            if(i * i == n) return true\n            i -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sq = sqrt(n).toLong\n        for (i <- 1 to sq) {\n            val x = sqrt(n + i * i).toLong\n            if (x * x == n + i * i) return true\n        }\n        false",
    "        var sqrtN = sqrt(n).toLong\n        var i = 0L\n        while (i <= sqrtN) {\n            var j = sqrtN\n            while (j >= i) {\n                if (i * i + j * j == n) return true\n                j -= 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            var j = 1\n            while (j * j < n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        var sqrt = sqrt(n).toLong\n        while (sqrt > 0) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val sq = i * i\n            if (sq > n) return false\n            val sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false",
    "        var sqrtN = sqrt(n).toLong\n        var i = 0L\n        while (i <= sqrtN) {\n            var j = sqrtN\n            while (j >= i) {\n                if (i * i + j * j == n) return true\n                j -= 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val sq = i * i\n            if (sq > n) return false\n            val diff = n - sq\n            val sqrtDiff = sqrt(diff).toLong\n            if (sqrtDiff * sqrtDiff == diff) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        var sqrt = sqrt(n).toLong\n        var i = sqrt\n        while (i > 0) {\n            if (sqrt * sqrt - i * i == n) return true\n            i -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        for (i <- 1L to sqrt(n).toLong) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while(i * i < n) {\n            if(isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        var i = sqrt\n        while (i > 0) {\n            if (sqr(i) - sqr(sqrt - i) == n) return true\n            i -= 1\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val sq = i * i\n            val sq2 = sqrt(n + sq).toLong\n            if (sq2 * sq2 == n + sq) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        var j = 1\n        while (i <= n) {\n            j = 1\n            while (j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            if (sq > n) return false\n            val dif = n - sq\n            val sqrtDif = sqrt(dif).toLong\n            if (sqrtDif * sqrtDif == dif) return true\n        }\n        return false",
    "        var i = 1\n        while(i * i <= n) {\n            var j = 1\n            while(j * j <= n) {\n                if(i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            if (i * i == n) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        for (i <- 1 to sqrt(n).toInt) {\n            val j = sqrt(n - i * i).toInt\n            if (i * i + j * j == n) return true\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt(n - i * i)\n            if (j * j == n - i * i) return true\n        }\n        return false",
    "        var sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            if (sqrt * sqrt == n) return true\n            sqrt -= 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i).toLong\n            if (j * j == n - i * i) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            if (sq > n) return false\n            val sq2 = sqrt(n - sq).toLong\n            if (sq2 * sq2 == n - sq) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        if (sqrt * sqrt == n) return true\n        for (i <- 1 to sqrt) {\n            var j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            val j = sqrt(n - i * i)\n            if (j == j.toInt) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            var j = 1\n            while (j * j < n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            if (sq == n) return true\n            else if (sq > n) return false\n            else {\n                val dif = n - sq\n                val sqrt = sqrt(dif).toLong\n                if (sqrt * sqrt == dif) return true\n            }\n        }\n        return false",
    "        var i = 0\n        while (i * i < n) {\n            var j = 0\n            while (j * j < n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 0\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            var j = 1\n            while (j * j <= n) {\n                if (i * i - j * j == n) return true\n                j += 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val j = sqrt - i\n            if (i * i - j * j == n) return true\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            val dif = n - sq\n            val sqrtDif = sqrt(dif).toLong\n            if (sqrtDif * sqrtDif == dif) return true\n        }\n        false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1 to sqrt) {\n            val sq = i * i\n            val diff = n - sq\n            val sqrt = sqrt(diff).toLong\n            if (sqrt * sqrt == diff) return true\n        }\n        false",
    "        val sqrt = sqrt(n).toLong\n        for (i <- 1L to sqrt) {\n            val j = sqrt(n - i * i).toLong\n            if (i * i + j * j == n) return true\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        return false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1 to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var sqrt = sqrt(n).toLong\n        var i = 0L\n        while (i <= sqrt) {\n            var j = sqrt\n            while (j >= i) {\n                if (i * i + j * j == n) return true\n                j -= 1\n            }\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            if (isSquare(n - i * i)) return true\n            i += 1\n        }\n        false",
    "        val sqrtN = sqrt(n).toLong\n        for (i <- 1L to sqrtN) {\n            val j = sqrt(n + i * i).toLong\n            if (j * j == n + i * i) return true\n        }\n        return false",
    "        var i = 1\n        while (i * i <= n) {\n            if (sqrt(n - i * i) % 1 == 0) return true\n            i += 1\n        }\n        return false",
    "        var sqrtN = sqrt(n).toLong\n        var i = 1\n        while (i <= sqrtN) {\n            var sq1 = i * i\n            var sq2 = n + sq1\n            var sqrtSq2 = sqrt(sq2).toLong\n            if (sqrtSq2 * sqrtSq2 == sq2) return true\n            i += 1\n        }\n        return false"
  ]
}