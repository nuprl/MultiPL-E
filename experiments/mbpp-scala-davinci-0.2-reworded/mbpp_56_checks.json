{
  "name": "mbpp_56_checks",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check if a given number is one less than twice its reverse.\n    def checks(n : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checks((70l)) == (false));\n    assert(checks((23l)) == (false));\n    assert(checks((73l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val rev = n.toString.reverse.toLong\n        n == rev * 2 - 1",
    "        val rev = n.toString.reverse.toLong\n        n == rev * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == (2 * r - 1)"
  ]
}