{
  "name": "mbpp_56_checks",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check if a given number is one less than twice its reverse.\n    def checks(n : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checks((70l)) == (false));\n    assert(checks((23l)) == (false));\n    assert(checks((73l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val rev = n.toString.reverse.toLong\n        n == rev * 2 - 1",
    "        val rev = n.toString.reverse.toLong\n        n == rev * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == (2 * r - 1)",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val s = n.toString\n        val r = s.reverse\n        val d = s.length - r.length\n        val rr = if (d > 0) \"0\" * d + r else r\n        val nn = n.toString.toLong\n        val rr2 = rr.toLong * 2 - 1\n        nn == rr2",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return (n + 1 == 2 * r)",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return (n == (2 * r) - 1)",
    "        val rev = n.toString.reverse.toLong\n        n == rev * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == (2 * r) - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val str = n.toString\n        val rev = str.reverse\n        val revNum = rev.toLong\n        val diff = n - revNum\n        if (diff == 1) true else false",
    "        val r = n.toString.reverse.toLong\n        return (n == (2 * r) - 1)",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        if (n == 2 * r - 1) true else false",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return (n + 1 == 2 * r)",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val reverse = n.toString.reverse.toLong\n        n == reverse * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == (2 * r) - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val s = n.toString\n        val r = s.reverse\n        val d = s.length - r.length\n        val rr = if (d > 0) \"0\" * d + r else r\n        (n + 1) == 2 * rr.toLong",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == r * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val rev = n.toString.reverse.toLong\n        n == 2 * rev - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2*r - 1",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (n - r.toLong).abs\n        m == 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == r * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val rev = n.toString.reverse.toLong\n        n == 2 * rev - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val rev = n.toString.reverse.toLong\n        n == rev * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        val d = n - r\n        d == 1 || d == -1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val rev = n.toString.reverse.toLong\n        n == rev * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return (n == 2 * r - 1)",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (n - r.toLong).abs\n        m == 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == r * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val reverse = n.toString.reverse.toLong\n        return n == reverse + reverse + 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val rev = n.toString.reverse.toLong\n        return n == rev * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val rev = n.toString.reverse.toLong\n        n == rev * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        return (n == 2 * r - 1)",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == r * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return (n == 2 * r - 1)",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == (2 * r - 1)",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == r * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == (2 * r) - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return (n == 2 * r - 1)",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return (n + 1) == 2 * r",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2*r - 1",
    "        val r = n.toString.reverse.toLong\n        if (n == 2 * r - 1) return true\n        return false",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val s = n.toString\n        val r = s.reverse\n        val t = (n - 1).toString\n        val u = t.reverse\n        return s == u",
    "        val r = n.toString.reverse.toLong\n        return (n == 2 * r - 1)",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return (n == 2 * r - 1)",
    "        val r = n.toString.reverse.toLong\n        n == r * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (n - 1).toString\n        val d = m.reverse\n        if (s.length % 2 == 0) {\n            if (s.substring(0, s.length / 2) == d.substring(0, d.length / 2)) return true\n        } else {\n            if (s.substring(0, s.length / 2) == d.substring(0, d.length / 2)) return true\n        }\n        return false",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == (2 * r) - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val reverse = n.toString.reverse.toLong\n        n == reverse * 2 - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val rev = n.toString.reverse.toLong\n        n + 1 == 2 * rev",
    "        val r = n.toString.reverse.toLong\n        return (n + 1) == 2 * r",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (n - 1).toString\n        val t = m.reverse\n        val d = s.length - t.length\n        val p = if (d > 0) \"0\" * d else \"\"\n        val q = if (d < 0) \"0\" * (-d) else \"\"\n        val u = p + t\n        val v = q + s\n        u == v",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        return n == 2 * r - 1"
  ]
}