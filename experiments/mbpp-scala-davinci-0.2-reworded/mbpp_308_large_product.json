{
  "name": "mbpp_308_large_product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    def largeProduct(nums1 : List[Long], nums2 : List[Long], N : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (3l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong))));\n    assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (4l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong, 48l.toLong))));\n    assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (5l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong, 48l.toLong, 45l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val products = for (n1 <- nums1; n2 <- nums2) yield n1 * n2\n        products.sortWith(_ > _).take(N.toInt)",
    "        val products = for (i <- 0 until nums1.length; j <- 0 until nums2.length) yield nums1(i) * nums2(j)\n        products.sorted.reverse.take(N.toInt)",
    "        val products = for (num1 <- nums1; num2 <- nums2) yield num1 * num2\n        products.sorted.reverse.take(N.toInt)",
    "        val sorted1 = nums1.sorted\n        val sorted2 = nums2.sorted\n        val pq = new PriorityQueue[(Long, Int, Int)]()(Ordering.by(-_._1))\n        pq.enqueue((sorted1(0) * sorted2(0), 0, 0))\n        val result = new ListBuffer[Long]\n        for (i <- 0 until N.toInt) {\n            val (product, index1, index2) = pq.dequeue\n            result += product\n            if (index1 < sorted1.length - 1) pq.enqueue((sorted1(index1 + 1) * sorted2(index2), index1 + 1, index2))\n            if (index2 < sorted2.length - 1) pq.enqueue((sorted1(index1) * sorted2(index2 + 1), index1, index2 + 1))\n        }\n        result.toList",
    "        val products = for (n1 <- nums1; n2 <- nums2) yield n1 * n2\n        products.sorted.takeRight(N.toInt)",
    "        val products = for (num1 <- nums1; num2 <- nums2) yield num1 * num2\n        products.sorted.takeRight(N.toInt)",
    "        val pq = new PriorityQueue[Long]()(Ordering.Long.reverse)\n        for (num1 <- nums1; num2 <- nums2) {\n            pq.enqueue(num1 * num2)\n            if (pq.size > N) pq.dequeue\n        }\n        pq.toList",
    "        val nums1Sorted = nums1.sorted\n        val nums2Sorted = nums2.sorted\n        val nums1SortedReversed = nums1Sorted.reverse\n        val nums2SortedReversed = nums2Sorted.reverse\n        val nums1SortedReversedSet = nums1SortedReversed.toSet\n        val nums2SortedReversedSet = nums2SortedReversed.toSet\n        val nums1SortedReversedMap = nums1SortedReversed.zipWithIndex.toMap\n        val nums2SortedReversedMap = nums2SortedReversed.zipWithIndex.toMap\n        val nums1SortedReversedMap2 = nums1SortedReversed.zipWithIndex.map(x => (x._1, x._2 + 1)).toMap\n        val nums2SortedReversedMap2 = nums2SortedReversed.zipWithIndex.map(x => (x._1, x._2 + 1)).toMap\n        val nums1SortedReversedMap3 = nums1SortedReversed.zipWithIndex.map(x => (x._1, x._2 + 2)).toMap\n        val nums2SortedReversedMap3 = nums2SortedReversed.zipWithIndex.map(x => (x._1, x._2 + 2)).toMap\n        val nums1SortedReversedMap4 = nums1SortedReversed.zipWithIndex.map(x => (x._1, x._2 + 3)).toMap\n        val nums2SortedReversedMap4 = nums2SortedReversed.zipWithIndex.map(x => (x._1, x._2 + 3)).toMap\n        val nums1SortedReversedMap5 = nums1SortedReversed.zipWithIndex.map(x => (x._1, x._2 + 4)).toMap\n        val nums2SortedReversedMap5 = nums2SortedReversed.zipWithIndex.map(x => (",
    "        val sorted1 = nums1.sortWith(_ > _)\n        val sorted2 = nums2.sortWith(_ > _)\n        val result = new ListBuffer[Long]\n        var i = 0\n        var j = 0\n        while (result.length < N) {\n            if (sorted1(i) * sorted2(j) > sorted1(i) * sorted2(j + 1)) {\n                result += sorted1(i) * sorted2(j)\n                j += 1\n            } else {\n                result += sorted1(i) * sorted2(j + 1)\n                i += 1\n            }\n        }\n        result.toList",
    "        val products = for (i <- nums1; j <- nums2) yield i * j\n        products.sorted.takeRight(N.toInt)",
    "        val products = for (num1 <- nums1; num2 <- nums2) yield num1 * num2\n        products.sorted.takeRight(N.toInt)",
    "        val products = for (n1 <- nums1; n2 <- nums2) yield n1 * n2\n        products.sorted.reverse.take(N.toInt)",
    "        val nums1Sorted = nums1.sorted\n        val nums2Sorted = nums2.sorted\n        val products = for (i <- 0 to nums1Sorted.length - 1; j <- 0 to nums2Sorted.length - 1) yield nums1Sorted(i) * nums2Sorted(j)\n        products.sorted.takeRight(N.toInt)",
    "        val products = for (num1 <- nums1; num2 <- nums2) yield num1 * num2\n        products.sorted.reverse.take(N.toInt)",
    "        val products = for (x <- nums1; y <- nums2) yield x * y\n        products.sorted.takeRight(N.toInt)",
    "        val sorted1 = nums1.sortWith(_ > _)\n        val sorted2 = nums2.sortWith(_ > _)\n        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- 0 until sorted1.length) {\n            for (j <- 0 until sorted2.length) {\n                val product = sorted1(i) * sorted2(j)\n                if (heap.size < N) heap.enqueue(product)\n                else if (product > heap.head) {\n                    heap.dequeue\n                    heap.enqueue(product)\n                }\n            }\n        }\n        heap.toList",
    "        val products = for (i <- 0 until nums1.length; j <- 0 until nums2.length) yield nums1(i) * nums2(j)\n        products.sorted.takeRight(N.toInt).toList",
    "        val products = for (num1 <- nums1; num2 <- nums2) yield num1 * num2\n        products.sortWith(_ > _).take(N.toInt)",
    "        val sorted1 = nums1.sortWith(_ > _)\n        val sorted2 = nums2.sortWith(_ > _)\n        val products = for (i <- 0 until sorted1.length; j <- 0 until sorted2.length) yield sorted1(i) * sorted2(j)\n        products.sortWith(_ > _).take(N.toInt)",
    "        val products = for (num1 <- nums1; num2 <- nums2) yield num1 * num2\n        products.sorted.reverse.take(N.toInt)"
  ]
}