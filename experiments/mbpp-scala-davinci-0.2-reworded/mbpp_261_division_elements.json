{
  "name": "mbpp_261_division_elements",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    def divisionElements(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divisionElements((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (2l, 2l, 2l, 3l));\n    assert(divisionElements((12l, 6l, 8l, 16l), (6l, 3l, 4l, 4l)) == (2l, 2l, 2l, 4l));\n    assert(divisionElements((20l, 14l, 36l, 18l), (5l, 7l, 6l, 9l)) == (4l, 2l, 6l, 2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (test_tup2 == 0) {\n            return 0\n        }\n        else {\n            return test_tup1 / test_tup2\n        }",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        // Write your code here\n        test_tup1/test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        val result = test_tup1 / test_tup2\n        return result",
    "        val result = test_tup1 / test_tup2\n        return result",
    "        test_tup1 / test_tup2",
    "        val tup1 = (1, 2, 3, 4, 5)\n        val tup2 = (5, 4, 3, 2, 1)\n        val tup3 = tup1.productIterator.zip(tup2.productIterator).map(x => x._1.asInstanceOf[Long] / x._2.asInstanceOf[Long]).toList\n        tup3(test_tup1.toInt - 1)",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        val result = test_tup1 / test_tup2\n        return result",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        val result = test_tup1 / test_tup2\n        return result",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        // Write your code here\n        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        if (test_tup2 == 0) {\n            return 0\n        }\n        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        val test_tup1 = (1, 2, 3, 4, 5)\n        val test_tup2 = (5, 4, 3, 2, 1)\n        val test_tup3 = test_tup1.zip(test_tup2).map(x => x._1 / x._2)\n        return test_tup3",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        if (test_tup2 == 0) {\n            return 0\n        }\n        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        // Write your code here\n        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        // Write your code here\n        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2",
    "        if (test_tup2 == 0) {\n            return 0\n        }\n        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        if (test_tup2 == 0) {\n            return 0\n        }\n        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        val test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val test_tup3 = test_tup1.productIterator.zip(test_tup2.productIterator).map(x => x._1.asInstanceOf[Long] / x._2.asInstanceOf[Long]).toList\n        test_tup3.sum",
    "        var result = 0L\n        if (test_tup1 > test_tup2) {\n            result = test_tup1 / test_tup2\n        } else {\n            result = test_tup2 / test_tup1\n        }\n        return result",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        val test_tup1 = (1, 2, 3, 4, 5, 6)\n        val test_tup2 = (2, 2, 2, 2, 2, 2)\n        val result = test_tup1.productIterator.zip(test_tup2.productIterator).map(x => x._1.asInstanceOf[Long] / x._2.asInstanceOf[Long]).toList\n        return result.product",
    "        test_tup1 / test_tup2",
    "        var result = test_tup1 / test_tup2\n        return result",
    "        test_tup1 / test_tup2",
    "        // Write your code here\n        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        val result = test_tup1 / test_tup2\n        return result",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        // Write your code here\n        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        // Write your code here\n        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        val result = test_tup1 / test_tup2\n        return result",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        if (test_tup2 == 0) {\n            return 0\n        }\n        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        var result : Long = 0\n        if (test_tup2 == 0) {\n            result = 0\n        } else {\n            result = test_tup1 / test_tup2\n        }\n        return result",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        if (test_tup2 == 0) {\n            return 0\n        }\n        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        val test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val result = test_tup1.zip(test_tup2).map(x => x._1 / x._2)\n        return result",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        if (test_tup2 == 0) {\n            return 0\n        }\n        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2;",
    "        var result = test_tup1 / test_tup2\n        return result",
    "        test_tup1 / test_tup2",
    "        if (test_tup2 == 0) {\n            return 0\n        }\n        return test_tup1 / test_tup2",
    "        var result = test_tup1 / test_tup2\n        return result",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        var result = test_tup1 / test_tup2\n        return result",
    "        var result : Long = 0\n        result = test_tup1 / test_tup2\n        return result",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        var quotient = test_tup1 / test_tup2\n        return quotient",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        val test_tup1 = (1,2,3,4,5)\n        val test_tup2 = (5,4,3,2,1)\n        val test_tup3 = test_tup1.zip(test_tup2).map(x => x._1 / x._2)\n        println(test_tup3)\n        return test_tup3",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        val res = test_tup1 / test_tup2\n        return res",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2"
  ]
}