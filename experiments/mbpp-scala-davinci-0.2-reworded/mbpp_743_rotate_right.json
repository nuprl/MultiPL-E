{
  "name": "mbpp_743_rotate_right",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/scalathon-program-right-rotate-list-n/\n    def rotateRight(list : List[Long], m : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (3l)).equals((List[Long](8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))));\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (5l)).equals((List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        val (l1, l2) = list.splitAt(m2)\n        l1 ::: l2",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        if (m1 == 0) list\n        else list.drop(n - m1.toInt) ++ list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.drop(m2) ++ list.take(m2)",
    "        val n = list.length\n        val r = m % n\n        val (left, right) = list.splitAt(n - r.toInt)\n        right ::: left",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ++ list.take(m2.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        list.slice(n - m1.toInt, n) ++ list.slice(0, n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val k = m % n\n        val (left, right) = list.splitAt(n - k.toInt)\n        right ::: left",
    "        val n = list.length\n        val r = m % n\n        val (left, right) = list.splitAt(n - r.toInt)\n        right ::: left",
    "        val n = list.length\n        val m1 = m % n\n        val list1 = list.slice(n - m1.toInt, n)\n        val list2 = list.slice(0, n - m1.toInt)\n        list1 ::: list2",
    "        val n = list.length\n        val mod = m % n\n        list.drop(n - mod.toInt) ::: list.take(n - mod.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val r = m % n\n        val (left, right) = list.splitAt(n - r.toInt)\n        right ::: left",
    "        val n = list.length\n        val mod = m % n\n        list.drop(n - mod.toInt) ::: list.take(n - mod.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.drop(m2) ::: list.take(m2)",
    "        val n = list.length\n        val m1 = m % n\n        val l1 = list.slice(n - m1.toInt, n)\n        val l2 = list.slice(0, n - m1.toInt)\n        l1 ::: l2",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.drop(m2) ::: list.take(m2)",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val (a, b) = list.splitAt(n - m.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val k = m % n\n        list.takeRight(k.toInt) ::: list.take(n - k.toInt)",
    "        val n = list.length\n        val r = m % n\n        list.drop(n - r.toInt) ++ list.take(n - r.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ++ a",
    "        val n = list.size\n        val k = m % n\n        val (a, b) = list.splitAt(n - k.toInt)\n        b ::: a",
    "        val n = list.length\n        val k = m % n\n        val (l1, l2) = list.splitAt(n - k.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ++ a",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val r = m % n\n        list.drop(n - r.toInt) ++ list.take(n - r.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (first, second) = list.splitAt(n - m1.toInt)\n        second ::: first",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val m = m % n\n        list.drop(n - m.toInt) ::: list.take(n - m.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.drop(m2) ::: list.take(m2)",
    "        val n = list.length\n        val k = m % n\n        list.drop(n - k.toInt) ::: list.take(n - k.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ++ a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ++ a",
    "        val n = list.length\n        val k = m % n\n        val (a, b) = list.splitAt(n - k.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            result += list(newIndex)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val k = m % n\n        val (a, b) = list.splitAt(n - k.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ++ list.take(m2.toInt)",
    "        if (m == 0) list\n        else {\n            val (first, second) = list.splitAt(list.length - m.toInt)\n            second ::: first\n        }",
    "        val n = list.length\n        val m1 = m % n\n        val (left, right) = list.splitAt(n - m1.toInt)\n        right ::: left",
    "        val n = list.length\n        val r = m % n\n        val left = list.slice(n - r.toInt, n)\n        val right = list.slice(0, n - r.toInt)\n        left ::: right",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val m1 = m % n\n        list.takeRight(m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val newList = new ArrayBuffer[Long]()\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList += list(newIndex)\n        }\n        newList.toList",
    "        val n = list.length\n        val k = m % n\n        list.takeRight(k.toInt) ++ list.take(n - k.toInt)",
    "        val n = list.size\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.drop(m2) ::: list.take(m2)",
    "        val n = list.length\n        val result = new ArrayBuffer[Long]()\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ++ a",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList += list(newIndex.toInt)\n        }\n        newList.toList",
    "        val n = list.length\n        val k = m % n\n        list.takeRight(k.toInt) ++ list.take(n - k.toInt)",
    "        val n = list.length\n        val newList = list.takeRight(m.toInt) ::: list.take(n - m.toInt)\n        newList",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ++ list.take(m2.toInt)",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val k = m % n\n        list.drop(n - k) ::: list.take(n - k)",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val k = m % n\n        list.drop(n - k.toInt) ::: list.take(n - k.toInt)",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.size\n        val m = m % n\n        list.drop(n - m.toInt) ++ list.take(n - m.toInt)",
    "        val n = list.length\n        val m_ = if (m > n) m % n else m\n        list.drop(n - m_) ::: list.take(n - m_)",
    "        val n = list.length\n        val k = m % n\n        val (left, right) = list.splitAt(n - k.toInt)\n        right ::: left",
    "        val n = list.length\n        val r = m % n\n        list.drop(n - r.toInt) ::: list.take(n - r.toInt)",
    "        if (m == 0) return list\n        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new ArrayBuffer[Long]()\n        for (i <- 0 until n) {\n            newList += list((i + m) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.drop(m2) ::: list.take(m2)",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList((i + m) % n) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val k = m % n\n        val (a, b) = list.splitAt(n - k.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ::: list.take(m2.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val p1 = list.takeRight(m1.toInt)\n        val p2 = list.take(n - m1.toInt)\n        p1 ::: p2",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        list.takeRight(m1.toInt) ++ list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ::: list.take(m2.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val mod = m % n\n        list.slice(n - mod.toInt, n) ::: list.slice(0, n - mod.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ++ list.take(m2.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val r = m % n\n        list.drop(n - r.toInt) ::: list.take(n - r.toInt)",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ++ a",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (first, second) = list.splitAt(n - m1.toInt)\n        second ::: first",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val k = m % n\n        list.drop(n - k) ::: list.take(n - k)",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) newList += list((i + m.toInt) % n)\n        newList.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val k = m % n\n        val (a, b) = list.splitAt(n - k.toInt)\n        b ::: a",
    "        val n = list.length\n        val k = m % n\n        val (a, b) = list.splitAt(n - k.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.slice(m2, n) ::: list.slice(0, m2)",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (first, second) = list.splitAt(n - m1.toInt)\n        second ::: first",
    "        val n = list.length\n        val m1 = m % n\n        list.slice(n - m1.toInt, n) ::: list.slice(0, n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (left, right) = list.splitAt(n - m1.toInt)\n        right ::: left",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val k = m % n\n        list.drop(n - k.toInt) ::: list.take(n - k.toInt)",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val k = m % n\n        list.drop(n - k.toInt) ::: list.take(n - k.toInt)",
    "        val n = list.length\n        val k = m % n\n        val result = new ListBuffer[Long]\n        for (i <- n - k until n) result += list(i)\n        for (i <- 0 until n - k) result += list(i)\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (first, second) = list.splitAt(n - m1.toInt)\n        second ::: first",
    "        val n = list.length\n        val k = m % n\n        list.slice(n - k, n) ::: list.slice(0, n - k)",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.drop(m2) ++ list.take(m2)",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result += list(index)\n        }\n        result.toList",
    "        val n = list.length\n        val r = m % n\n        list.drop(n - r.toInt) ++ list.take(n - r.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        list.takeRight(m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ++ l1",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val r = m % n\n        val (left, right) = list.splitAt(n - r.toInt)\n        right ::: left",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList(i) = list(i)\n        }\n        for (i <- 0 until n) {\n            newList((i + m) % n) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val res = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            res += list(j)\n        }\n        res.toList",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val r = m % n\n        val (left, right) = list.splitAt(n - r.toInt)\n        right ::: left",
    "        val n = list.length\n        val r = m % n\n        list.takeRight(r.toInt) ::: list.take(n - r.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ::: list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ++ list.take(m2.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (left, right) = list.splitAt(n - m1.toInt)\n        right ::: left",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ArrayBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val k = m % n\n        list.slice(n - k.toInt, n) ::: list.slice(0, n - k.toInt)",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ++ a",
    "        val n = list.length\n        val result = new ArrayBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val k = m % n\n        val (a, b) = list.splitAt(n - k.toInt)\n        b ++ a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m = m % n\n        val (left, right) = list.splitAt(n - m.toInt)\n        right ++ left",
    "        val n = list.length\n        val (left, right) = list.splitAt(n - m.toInt)\n        right ::: left",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ::: list.take(m2.toInt)",
    "        val n = list.length\n        val rotated = list.takeRight(m.toInt) ::: list.dropRight(m.toInt)\n        rotated",
    "        val n = list.length\n        val mod = m % n\n        val (left, right) = list.splitAt(n - mod.toInt)\n        right ::: left",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.slice(m2, n) ::: list.slice(0, m2)",
    "        val n = list.length\n        val k = m % n\n        list.drop(n - k.toInt) ++ list.take(n - k.toInt)",
    "        val n = list.length\n        val k = m % n\n        val (a, b) = list.splitAt(n - k.toInt)\n        b ::: a",
    "        val n = list.length\n        val k = m % n\n        val (left, right) = list.splitAt(n - k.toInt)\n        right ::: left",
    "        val n = list.length\n        val newList = new ArrayBuffer[Long]\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList += list(newIndex)\n        }\n        newList.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ::: list.take(m2.toInt)",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val k = m % n\n        val (a, b) = list.splitAt(n - k.toInt)\n        b ::: a",
    "        val n = list.length\n        val mod = m % n\n        val (left, right) = list.splitAt(n - mod.toInt)\n        right ::: left",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.size\n        val m1 = m % n\n        val m2 = n - m1\n        list.drop(m2) ::: list.take(m2)",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ++ list.take(n - m1.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val r = m % n\n        list.drop(n - r.toInt) ++ list.take(n - r.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val list1 = list.drop(n - m1.toInt)\n        val list2 = list.take(n - m1.toInt)\n        list1 ::: list2",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            newList += list((i + m) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (left, right) = list.splitAt(n - m1.toInt)\n        right ::: left",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val r = m % n\n        list.drop(n - r.toInt) ::: list.take(n - r.toInt)",
    "        val n = list.length\n        val k = m % n\n        list.drop(n - k.toInt) ::: list.take(n - k.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (left, right) = list.splitAt(n - m1.toInt)\n        right ::: left",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList(newIndex) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val r = m % n\n        val l1 = list.takeRight(r.toInt)\n        val l2 = list.take(n - r.toInt)\n        l1 ::: l2",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.drop(m2) ::: list.take(m2)",
    "        val n = list.length\n        val rotated = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            rotated(j) = list(i)\n        }\n        rotated.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val l1 = list.takeRight(m1.toInt)\n        val l2 = list.dropRight(m1.toInt)\n        l1 ::: l2",
    "        val n = list.length\n        val m1 = m % n\n        val l1 = list.takeRight(m1.toInt)\n        val l2 = list.take(n - m1.toInt)\n        l1 ::: l2"
  ]
}