{
  "name": "mbpp_753_min_k",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        test_list.sortBy(_.right.get).take(K.toInt)",
    "        var min_list : List[Either[String, Long]] = List()\n        var min_heap : PriorityQueue[Either[String, Long]] = new PriorityQueue[Either[String, Long]]()(Ordering.by(x => x.right.getOrElse(0)))\n        for (i <- test_list) {\n            if (min_heap.size < K) {\n                min_heap.enqueue(i)\n            } else {\n                if (i.right.getOrElse(0) < min_heap.head.right.getOrElse(0)) {\n                    min_heap.dequeue\n                    min_heap.enqueue(i)\n                }\n            }\n        }\n        while (min_heap.nonEmpty) {\n            min_list = min_heap.dequeue :: min_list\n        }\n        min_list",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        var min_list = List[Either[String, Long]]()\n        var min_list_size = 0\n        for (i <- test_list) {\n            if (min_list_size < K) {\n                min_list = min_list :+ i\n                min_list_size += 1\n            } else {\n                var max_index = 0\n                var max_value = min_list(0).right.get\n                for (j <- 1 until min_list_size) {\n                    if (min_list(j).right.get > max_value) {\n                        max_index = j\n                        max_value = min_list(j).right.get\n                    }\n                }\n                if (i.right.get < max_value) {\n                    min_list = min_list.updated(max_index, i)\n                }\n            }\n        }\n        min_list",
    "        val min_list = new ListBuffer[Either[String, Long]]\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        for (i <- 0 to K.toInt - 1) {\n            min_list += sorted_list(i)\n        }\n        min_list.toList",
    "        // sort list by second element in tuple\n        val sorted_list = test_list.sortBy(_.right.get)\n        // return first K elements\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        var min_list = List[Either[String, Long]]()\n        var min_heap = new MinHeap[Either[String, Long]](K.toInt)\n        for (i <- test_list) {\n            if (min_heap.size < K) {\n                min_heap.add(i)\n            } else {\n                if (min_heap.peek.right.get < i.right.get) {\n                    min_heap.poll\n                    min_heap.add(i)\n                }\n            }\n        }\n        while (!min_heap.isEmpty) {\n            min_list = min_heap.poll :: min_list\n        }\n        min_list",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(x) => x.length\n            case Right(x) => x\n        })\n        sorted_list.take(K.toInt)",
    "        // this is a verbatim coscala of test cases\n        def minK_helper(test_list : List[Either[String, Long]], K : Long, min_list : List[Either[String, Long]]) : List[Either[String, Long]] = {\n            if (test_list.isEmpty) min_list\n            else {\n                val min_list_sorted = min_list.sortWith((x, y) => x.right.get < y.right.get)\n                if (min_list_sorted.length < K) minK_helper(test_list.tail, K, min_list_sorted :+ test_list.head)\n                else {\n                    val max_min = min_list_sorted.last\n                    if (test_list.head.right.get < max_min.right.get) minK_helper(test_list.tail, K, (min_list_sorted.init :+ test_list.head).sortWith((x, y) => x.right.get < y.right.get))\n                    else minK_helper(test_list.tail, K, min_list_sorted)\n                }\n            }\n        }\n        minK_helper(test_list, K, List())",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.slice(0, K.toInt)",
    "        val test_list_sorted = test_list.sortBy(_.right.get)\n        test_list_sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)"
  ]
}