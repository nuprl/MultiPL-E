{
  "name": "mbpp_753_min_k",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        test_list.sortBy(_.right.get).take(K.toInt)",
    "        var min_list : List[Either[String, Long]] = List()\n        var min_heap : PriorityQueue[Either[String, Long]] = new PriorityQueue[Either[String, Long]]()(Ordering.by(x => x.right.getOrElse(0)))\n        for (i <- test_list) {\n            if (min_heap.size < K) {\n                min_heap.enqueue(i)\n            } else {\n                if (i.right.getOrElse(0) < min_heap.head.right.getOrElse(0)) {\n                    min_heap.dequeue\n                    min_heap.enqueue(i)\n                }\n            }\n        }\n        while (min_heap.nonEmpty) {\n            min_list = min_heap.dequeue :: min_list\n        }\n        min_list",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        var min_list = List[Either[String, Long]]()\n        var min_list_size = 0\n        for (i <- test_list) {\n            if (min_list_size < K) {\n                min_list = min_list :+ i\n                min_list_size += 1\n            } else {\n                var max_index = 0\n                var max_value = min_list(0).right.get\n                for (j <- 1 until min_list_size) {\n                    if (min_list(j).right.get > max_value) {\n                        max_index = j\n                        max_value = min_list(j).right.get\n                    }\n                }\n                if (i.right.get < max_value) {\n                    min_list = min_list.updated(max_index, i)\n                }\n            }\n        }\n        min_list",
    "        val min_list = new ListBuffer[Either[String, Long]]\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        for (i <- 0 to K.toInt - 1) {\n            min_list += sorted_list(i)\n        }\n        min_list.toList",
    "        // sort list by second element in tuple\n        val sorted_list = test_list.sortBy(_.right.get)\n        // return first K elements\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        var min_list = List[Either[String, Long]]()\n        var min_heap = new MinHeap[Either[String, Long]](K.toInt)\n        for (i <- test_list) {\n            if (min_heap.size < K) {\n                min_heap.add(i)\n            } else {\n                if (min_heap.peek.right.get < i.right.get) {\n                    min_heap.poll\n                    min_heap.add(i)\n                }\n            }\n        }\n        while (!min_heap.isEmpty) {\n            min_list = min_heap.poll :: min_list\n        }\n        min_list",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(x) => x.length\n            case Right(x) => x\n        })\n        sorted_list.take(K.toInt)",
    "        // this is a verbatim coscala of test cases\n        def minK_helper(test_list : List[Either[String, Long]], K : Long, min_list : List[Either[String, Long]]) : List[Either[String, Long]] = {\n            if (test_list.isEmpty) min_list\n            else {\n                val min_list_sorted = min_list.sortWith((x, y) => x.right.get < y.right.get)\n                if (min_list_sorted.length < K) minK_helper(test_list.tail, K, min_list_sorted :+ test_list.head)\n                else {\n                    val max_min = min_list_sorted.last\n                    if (test_list.head.right.get < max_min.right.get) minK_helper(test_list.tail, K, (min_list_sorted.init :+ test_list.head).sortWith((x, y) => x.right.get < y.right.get))\n                    else minK_helper(test_list.tail, K, min_list_sorted)\n                }\n            }\n        }\n        minK_helper(test_list, K, List())",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.slice(0, K.toInt)",
    "        val test_list_sorted = test_list.sortBy(_.right.get)\n        test_list_sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        var min_list = List[Either[String, Long]]()\n        var min_list_size = 0\n        for (test <- test_list) {\n            if (min_list_size < K) {\n                min_list = min_list :+ test\n                min_list_size += 1\n            }\n            else {\n                var max_index = -1\n                var max_value = Long.MinValue\n                for (i <- 0 until min_list_size) {\n                    if (min_list(i).right.get > max_value) {\n                        max_value = min_list(i).right.get\n                        max_index = i\n                    }\n                }\n                if (test.right.get < max_value) {\n                    min_list = min_list.updated(max_index, test)\n                }\n            }\n        }\n        min_list",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        var min_list = new ListBuffer[Either[String, Long]]()\n        var min_list_size = 0\n        for (i <- 0 until test_list.length) {\n            if (min_list_size < K) {\n                min_list += test_list(i)\n                min_list_size += 1\n            } else {\n                var max_index = 0\n                var max_value = min_list(0)\n                for (j <- 1 until min_list_size) {\n                    if (min_list(j).right.get > max_value.right.get) {\n                        max_index = j\n                        max_value = min_list(j)\n                    }\n                }\n                if (test_list(i).right.get < max_value.right.get) {\n                    min_list(max_index) = test_list(i)\n                }\n            }\n        }\n        return min_list.toList",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sorted\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        var min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list += test_list(i)\n        }\n        for (i <- K.toInt until test_list.length) {\n            val max_value = min_list.maxBy(_.right.get)\n            if (test_list(i).right.get < max_value.right.get) {\n                min_list -= max_value\n                min_list += test_list(i)\n            }\n        }\n        min_list.toList",
    "        val min_k_list = new ListBuffer[Either[String, Long]]()\n        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        for (i <- 0 until K.toInt) {\n            min_k_list += sorted_list(i)\n        }\n        min_k_list.toList",
    "        var min_list = List[Either[String, Long]]()\n        var min_heap = new scala.collection.mutable.PriorityQueue[Either[String, Long]]()(Ordering.by((_: Either[String, Long]).right.get))\n        for (i <- test_list) {\n            if (min_heap.size < K) {\n                min_heap.enqueue(i)\n            } else {\n                if (i.right.get < min_heap.head.right.get) {\n                    min_heap.dequeue\n                    min_heap.enqueue(i)\n                }\n            }\n        }\n        while (min_heap.nonEmpty) {\n            min_list = min_heap.dequeue :: min_list\n        }\n        min_list",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val test_list_sorted = test_list.sortWith(_.right.get < _.right.get)\n        test_list_sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list += test_list(i)\n        }\n        val min_value = min_list.maxBy(_.right.get)\n        for (i <- K.toInt until test_list.length) {\n            if (test_list(i).right.get < min_value.right.get) {\n                min_list -= min_value\n                min_list += test_list(i)\n                min_value = min_list.maxBy(_.right.get)\n            }\n        }\n        min_list.toList",
    "        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.slice(0, K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        def minK_helper(test_list : List[Either[String, Long]], K : Long, min_list : List[Either[String, Long]]) : List[Either[String, Long]] = {\n            if (test_list.isEmpty) min_list\n            else {\n                val min_list_size = min_list.size\n                if (min_list_size < K) {\n                    val new_min_list = min_list :+ test_list.head\n                    minK_helper(test_list.tail, K, new_min_list)\n                }\n                else {\n                    val max_min_list = min_list.maxBy(_.right.get)\n                    val max_min_list_value = max_min_list.right.get\n                    val test_list_head = test_list.head\n                    val test_list_head_value = test_list_head.right.get\n                    if (test_list_head_value < max_min_list_value) {\n                        val new_min_list = min_list.filter(_ != max_min_list) :+ test_list_head\n                        minK_helper(test_list.tail, K, new_min_list)\n                    }\n                    else minK_helper(test_list.tail, K, min_list)\n                }\n            }\n        }\n        minK_helper(test_list, K, List())",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted_list.slice(0, K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list += test_list(i)\n        }\n        for (i <- K.toInt until test_list.length) {\n            val max = min_list.maxBy(_.right.getOrElse(0))\n            if (test_list(i).right.getOrElse(0) < max.right.getOrElse(0)) {\n                min_list -= max\n                min_list += test_list(i)\n            }\n        }\n        min_list.toList",
    "        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(x) => x.length\n            case Right(x) => x\n        })\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)",
    "        val min_heap = new scala.collection.mutable.PriorityQueue[Either[String, Long]]()(Ordering.by(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }))\n        for (i <- test_list) {\n            if (min_heap.size < K) {\n                min_heap.enqueue(i)\n            } else {\n                if (i match {\n                    case Left(s) => false\n                    case Right(l) => l < min_heap.head match {\n                        case Left(s) => false\n                        case Right(l) => l\n                    }\n                }) {\n                    min_heap.dequeue()\n                    min_heap.enqueue(i)\n                }\n            }\n        }\n        min_heap.toList",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        var min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list += test_list(i)\n        }\n        for (i <- K.toInt until test_list.length) {\n            val max = min_list.maxBy(_.right.getOrElse(0))\n            if (test_list(i).right.getOrElse(0) < max.right.getOrElse(0)) {\n                min_list -= max\n                min_list += test_list(i)\n            }\n        }\n        min_list.toList",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        var min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            var min = Long.MaxValue\n            var min_index = -1\n            for (j <- 0 until test_list.length) {\n                if (test_list(j).isRight && test_list(j).right.get < min) {\n                    min = test_list(j).right.get\n                    min_index = j\n                }\n            }\n            if (min_index != -1) {\n                min_list += test_list(min_index)\n                test_list(min_index) = Left(\"\")\n            }\n        }\n        return min_list.toList",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        var min_list = List[Either[String, Long]]()\n        var min_list_size = 0\n        for (i <- test_list) {\n            if (min_list_size < K) {\n                min_list = i :: min_list\n                min_list_size += 1\n            } else {\n                val max_element = min_list.maxBy(_.right.get)\n                if (i.right.get < max_element.right.get) {\n                    min_list = min_list.filter(_ != max_element)\n                    min_list = i :: min_list\n                }\n            }\n        }\n        min_list",
    "        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)",
    "        if (K == 0) return List()\n        var min_list = List[Either[String, Long]]()\n        var min_value = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight && test_list(i).right.get < min_value) {\n                min_value = test_list(i).right.get\n                min_index = i\n            }\n        }\n        min_list = min_list :+ test_list(min_index)\n        min_list = min_list ::: minK(test_list.take(min_index) ::: test_list.drop(min_index + 1), K - 1)\n        return min_list",
    "        test_list.sortBy(x => x.right.get).take(K.toInt)",
    "        val min_list = new ListBuffer[Either[String, Long]]()\n        val max_heap = new MaxHeap[Long](K)\n        for (e <- test_list) {\n            if (e.isRight) {\n                if (max_heap.size < K) {\n                    max_heap.add(e.right.get)\n                } else {\n                    if (e.right.get < max_heap.peek) {\n                        max_heap.poll\n                        max_heap.add(e.right.get)\n                    }\n                }\n            } else {\n                min_list += e\n            }\n        }\n        while (max_heap.size > 0) {\n            min_list += Right(max_heap.poll)\n        }\n        min_list.toList",
    "        val list = test_list.filter(_.isRight).map(_.right.get).sorted\n        val min = list.take(K.toInt)\n        val min_map = min.map(x => (x, 1)).toMap\n        test_list.filter(x => min_map.contains(x.right.get))",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        val list = test_list.filter(_.isRight).map(_.right.get)\n        val min = list.min\n        val max = list.max\n        val min_list = list.filter(_ == min)\n        val max_list = list.filter(_ == max)\n        val min_size = min_list.size\n        val max_size = max_list.size\n        if (min_size + max_size < K) {\n            val min_list_left = min_list.map(x => Left(x.toString))\n            val max_list_left = max_list.map(x => Left(x.toString))\n            min_list_left ++ max_list_left\n        } else if (min_size + max_size == K) {\n            val min_list_left = min_list.map(x => Left(x.toString))\n            val max_list_left = max_list.map(x => Left(x.toString))\n            min_list_left ++ max_list_left\n        } else {\n            val min_list_left = min_list.map(x => Left(x.toString))\n            val max_list_left = max_list.map(x => Left(x.toString))\n            val min_list_left_size = min_list_left.size\n            val max_list_left_size = max_list_left.size\n            if (min_list_left_size + max_list_left_size < K) {\n                val min_list_left = min_list.map(x => Left(x.toString))\n                val max_list_left = max_list.map(x => Left(x.toString))\n                min_list_left ++ max_list_left\n            } else if (min_list_left_size + max_list_left_size == K) {\n                val min_list_left = min_list.map(x => Left(x.toString))\n                val max_list_left = max_list.map(x => Left(x.toString))\n                min_list_left ++ max_list_left\n            } else {\n                val min",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.slice(0, K.toInt)",
    "        val min_list = test_list.sortWith(_.right.get < _.right.get)\n        min_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)",
    "        var min_list : List[Either[String, Long]] = List()\n        var min_list_size : Long = 0\n        for (i <- test_list) {\n            if (min_list_size < K) {\n                min_list = i :: min_list\n                min_list_size += 1\n            }\n            else {\n                var max_index : Long = 0\n                var max_value : Long = 0\n                for (j <- min_list.indices) {\n                    if (min_list(j).right.get > max_value) {\n                        max_value = min_list(j).right.get\n                        max_index = j\n                    }\n                }\n                if (i.right.get < max_value) {\n                    min_list = min_list.updated(max_index.toInt, i)\n                }\n            }\n        }\n        return min_list",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted_list.take(K.toInt)",
    "        val min_list = ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            var min_value = Long.MaxValue\n            var min_index = -1\n            for (j <- 0 until test_list.length) {\n                if (test_list(j).isRight && test_list(j).right.get < min_value) {\n                    min_value = test_list(j).right.get\n                    min_index = j\n                }\n            }\n            if (min_index != -1) {\n                min_list += test_list(min_index)\n                test_list(min_index) = Left(\"\")\n            }\n        }\n        min_list.toList",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l.toString\n        })\n        sorted.slice(0, K.toInt)",
    "        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(x) => x\n            case Right(x) => x\n        })\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)",
    "        test_list.sortBy(_.right.get).take(K.toInt)",
    "        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        // Write your code here\n        val test_list_sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        test_list_sorted.take(K.toInt)",
    "        var min_list : List[Either[String, Long]] = List()\n        var min_list_size : Long = 0\n        var min_list_max : Long = 0\n        for (test <- test_list) {\n            if (test.isRight) {\n                if (min_list_size < K) {\n                    min_list = min_list :+ test\n                    min_list_size += 1\n                    min_list_max = max(min_list_max, test.right.get)\n                } else if (test.right.get < min_list_max) {\n                    min_list = min_list.filter(x => x.right.get != min_list_max)\n                    min_list = min_list :+ test\n                    min_list_max = min_list.map(x => x.right.get).max\n                }\n            }\n        }\n        return min_list",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val min_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        min_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        val k_list = sorted_list.take(K.toInt)\n        k_list",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted.take(K.toInt)",
    "        val list = test_list.filter(_.isRight).map(_.right.get)\n        val min = list.min\n        val max = list.max\n        val min_list = list.filter(_ == min)\n        val max_list = list.filter(_ == max)\n        val min_list_size = min_list.size\n        val max_list_size = max_list.size\n        val min_list_size_diff = K - min_list_size\n        val max_list_size_diff = K - max_list_size\n        if (min_list_size_diff <= 0) {\n            min_list.map(x => Right(x)).take(K.toInt)\n        } else if (max_list_size_diff <= 0) {\n            max_list.map(x => Right(x)).take(K.toInt)\n        } else {\n            val min_list_size_diff_half = min_list_size_diff / 2\n            val max_list_size_diff_half = max_list_size_diff / 2\n            val min_list_size_diff_half_rem = min_list_size_diff % 2\n            val max_list_size_diff_half_rem = max_list_size_diff % 2\n            val min_list_size_diff_half_rem_half = min_list_size_diff_half_rem / 2\n            val max_list_size_diff_half_rem_half = max_list_size_diff_half_rem / 2\n            val min_list_size_diff_half_rem_half_rem = min_list_size_diff_half_rem % 2\n            val max_list_size_diff_half_rem_half_rem = max_list_size_diff_half_rem % 2\n            val min_list_size_diff_half_rem_half_rem_half = min_list_size_diff_half_rem_half_rem / 2\n            val max_list_size_diff_half_rem_half_rem_half = max_list_size_diff_half_rem_half_rem / 2\n            val min_list_size_diff_",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted_list.slice(0, K.toInt)",
    "        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)",
    "        val list = test_list.filter(_.isRight).map(_.right.get).sorted\n        val min = list.take(K.toInt)\n        val min_map = min.map(x => (x, 1)).toMap\n        test_list.filter(x => min_map.contains(x.right.get))",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(Long.MaxValue))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((a, b) => a.right.getOrElse(0L) < b.right.getOrElse(0L))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        test_list.sortBy(_.right.get).take(K.toInt)",
    "        var result = List[Either[String, Long]]()\n        var min_heap = new MinHeap[Long](K.toInt)\n        for (i <- test_list) {\n            if (i.isRight) {\n                if (min_heap.size < K) {\n                    min_heap.insert(i.right.get)\n                } else {\n                    if (min_heap.peek > i.right.get) {\n                        min_heap.pop\n                        min_heap.insert(i.right.get)\n                    }\n                }\n            } else {\n                result = result :+ i\n            }\n        }\n        while (min_heap.size > 0) {\n            result = result :+ Right(min_heap.pop)\n        }\n        result",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(0L))\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        var min_list = List[Either[String, Long]]()\n        var min_list_size = 0\n        var min_list_sum = 0L\n        var min_list_avg = 0L\n        var min_list_max = 0L\n        var min_list_min = 0L\n        for (test_case <- test_list) {\n            test_case match {\n                case Left(s) => {\n                    if (min_list_size == K) {\n                        min_list = min_list.tail\n                        min_list_size -= 1\n                    }\n                    min_list = min_list :+ test_case\n                    min_list_size += 1\n                    min_list_sum += s.toLong\n                    min_list_avg = min_list_sum / min_list_size\n                    min_list_max = min_list.map(x => x.left.get.toLong).max\n                    min_list_min = min_list.map(x => x.left.get.toLong).min\n                }\n                case Right(l) => {\n                    if (min_list_size == K) {\n                        min_list = min_list.tail\n                        min_list_size -= 1\n                    }\n                    min_list = min_list :+ test_case\n                    min_list_size += 1\n                    min_list_sum += l\n                    min_list_avg = min_list_sum / min_list_size\n                    min_list_max = min_list.map(x => x.right.get).max\n                    min_list_min = min_list.map(x => x.right.get).min\n                }\n            }\n            println(min_list_size + \" \" + min_list_sum + \" \" + min_list_avg + \" \" + min_list_max + \" \" + min_list_min)\n        }\n        return min_list",
    "        val test_list_sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        test_list_sorted.take(K.toInt)",
    "        test_list.sortWith((a, b) => a.right.get < b.right.get).take(K.toInt)",
    "        val min_k = test_list.sortBy(_.right.get).take(K.toInt)\n        min_k",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.slice(0, K.toInt)",
    "        if (test_list.isEmpty) return List()\n        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)",
    "        val min_list = new ListBuffer[Either[String, Long]]()\n        var min_value = Long.MaxValue\n        for (i <- test_list) {\n            if (i.isRight) {\n                if (i.right.get < min_value) {\n                    min_value = i.right.get\n                    min_list.clear\n                    min_list += i\n                } else if (i.right.get == min_value) {\n                    min_list += i\n                }\n            }\n        }\n        min_list.toList",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.slice(0, K.toInt)",
    "        val min_list = new ListBuffer[Either[String, Long]]()\n        val max_heap = new PriorityQueue[Either[String, Long]]()(Ordering.by((_: Either[String, Long]).right.get).reverse)\n        for (i <- test_list) {\n            if (max_heap.size < K) {\n                max_heap += i\n            } else {\n                if (i.right.get < max_heap.head.right.get) {\n                    max_heap.dequeue\n                    max_heap += i\n                }\n            }\n        }\n        while (max_heap.nonEmpty) {\n            min_list += max_heap.dequeue\n        }\n        min_list.toList",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        var min_list = List[Either[String, Long]]()\n        var min_list_set = Set[Either[String, Long]]()\n        for (i <- test_list) {\n            if (min_list_set.size < K) {\n                min_list_set += i\n                min_list = min_list :+ i\n            } else {\n                val max_value = min_list.map(x => x.right.get).max\n                if (i.right.get < max_value) {\n                    min_list_set.remove(min_list.filter(x => x.right.get == max_value).head)\n                    min_list_set += i\n                    min_list = min_list.filter(x => x.right.get != max_value) :+ i\n                }\n            }\n        }\n        min_list",
    "        test_list.sortBy(_.right.get).take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list += test_list(i)\n        }\n        for (i <- K.toInt until test_list.length) {\n            val max_index = min_list.indexOf(min_list.max)\n            if (test_list(i).right.get < min_list(max_index).right.get) {\n                min_list(max_index) = test_list(i)\n            }\n        }\n        min_list.toList",
    "        val test_list_sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        test_list_sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(x) => x.toLong\n            case Right(x) => x\n        })\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val min_list = new ListBuffer[Either[String, Long]]()\n        val min_heap = new PriorityQueue[Either[String, Long]]()(Ordering.by((_: Either[String, Long]).right.get))\n        for (i <- 0 until K) {\n            min_heap.enqueue(test_list(i))\n        }\n        for (i <- K until test_list.length) {\n            if (test_list(i).right.get < min_heap.head.right.get) {\n                min_heap.dequeue()\n                min_heap.enqueue(test_list(i))\n            }\n        }\n        while (!min_heap.isEmpty) {\n            min_list += min_heap.dequeue()\n        }\n        min_list.toList",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val min_list = new ListBuffer[Either[String, Long]]()\n        val max_heap = new PriorityQueue[Either[String, Long]]()(Ordering.by((_:Either[String, Long]).right.get).reverse)\n        for (i <- test_list) {\n            if (max_heap.size < K) {\n                max_heap.enqueue(i)\n            } else {\n                if (max_heap.head.right.get > i.right.get) {\n                    max_heap.dequeue()\n                    max_heap.enqueue(i)\n                }\n            }\n        }\n        while (max_heap.nonEmpty) {\n            min_list += max_heap.dequeue()\n        }\n        min_list.toList",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(x) => x\n            case Right(x) => x\n        })\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val min_k_records = new ListBuffer[Either[String, Long]]()\n        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        for (i <- 0 until K.toInt) {\n            min_k_records += sorted_list(i)\n        }\n        min_k_records.toList",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.slice(0, K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        if (K == 0) return List()\n        var min_list : List[Either[String, Long]] = List()\n        var min_value : Long = Long.MaxValue\n        var min_index : Long = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min_value) {\n                    min_value = test_list(i).right.get\n                    min_index = i\n                }\n            }\n        }\n        min_list = min_list :+ test_list(min_index.toInt)\n        minK(test_list.patch(min_index.toInt, Nil, 1), K - 1)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        var min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            var min = Long.MaxValue\n            var min_index = -1\n            for (j <- 0 until test_list.length) {\n                if (test_list(j).isRight && test_list(j).right.get < min) {\n                    min = test_list(j).right.get\n                    min_index = j\n                }\n            }\n            if (min_index != -1) {\n                min_list += test_list(min_index)\n                test_list(min_index) = Left(\"\")\n            }\n        }\n        return min_list.toList",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        // Write your code here\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val min_list = new ListBuffer[Either[String, Long]]()\n        val max_list = new ListBuffer[Either[String, Long]]()\n        for (i <- test_list) {\n            if (i.isRight) {\n                if (min_list.length < K) {\n                    min_list += i\n                    if (min_list.length == K) {\n                        min_list.sortWith(_.right.get < _.right.get)\n                    }\n                } else if (i.right.get < min_list.last.right.get) {\n                    min_list.remove(min_list.length - 1)\n                    min_list += i\n                    min_list.sortWith(_.right.get < _.right.get)\n                }\n            } else {\n                if (max_list.length < K) {\n                    max_list += i\n                    if (max_list.length == K) {\n                        max_list.sortWith(_.right.get > _.right.get)\n                    }\n                } else if (i.right.get > max_list.last.right.get) {\n                    max_list.remove(max_list.length - 1)\n                    max_list += i\n                    max_list.sortWith(_.right.get > _.right.get)\n                }\n            }\n        }\n        min_list.toList ::: max_list.toList",
    "        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.slice(0, K.toInt)",
    "        var min_k_list = List[Either[String, Long]]()\n        var min_k_set = Set[Long]()\n        for (i <- test_list) {\n            if (min_k_set.size < K) {\n                min_k_set += i.right.get\n                min_k_list = i :: min_k_list\n            } else {\n                val max_k = min_k_set.max\n                if (i.right.get < max_k) {\n                    min_k_set -= max_k\n                    min_k_set += i.right.get\n                    min_k_list = i :: min_k_list.filter(x => x.right.get != max_k)\n                }\n            }\n        }\n        min_k_list",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        test_list.sortBy(_.right.getOrElse(Long.MaxValue)).take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        val min_list = sorted_list.take(K.toInt)\n        return min_list",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            var min = Long.MaxValue\n            var min_index = -1\n            for (j <- 0 until test_list.length) {\n                if (test_list(j).isRight && test_list(j).right.get < min) {\n                    min = test_list(j).right.get\n                    min_index = j\n                }\n            }\n            if (min_index != -1) {\n                min_list += test_list(min_index)\n                test_list(min_index) = Left(\"\")\n            }\n        }\n        return min_list.toList",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        // Write your code here\n        var min_list = new ListBuffer[Either[String, Long]]()\n        var min_list_size = 0\n        for (i <- test_list) {\n            if (min_list_size < K) {\n                min_list += i\n                min_list_size += 1\n            } else {\n                var max_index = 0\n                var max_value = 0L\n                for (j <- 0 until min_list_size) {\n                    if (min_list(j).right.get > max_value) {\n                        max_value = min_list(j).right.get\n                        max_index = j\n                    }\n                }\n                if (i.right.get < max_value) {\n                    min_list(max_index) = i\n                }\n            }\n        }\n        return min_list.toList",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.get)\n        sorted_list.slice(0, K.toInt)",
    "        var min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            var min = test_list.head\n            for (j <- test_list) {\n                if (j.isRight && min.isRight) {\n                    if (j.right.get < min.right.get) min = j\n                }\n            }\n            test_list -= min\n            min_list += min\n        }\n        min_list.toList",
    "        test_list.sortBy(_.right.get).take(K.toInt)",
    "        val min_list = test_list.filter(_.isRight).map(_.right.get).sorted.take(K.toInt)\n        test_list.filter(x => x.isRight && min_list.contains(x.right.get))",
    "        val sorted_list = test_list.sortWith(_.right.get < _.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.getOrElse(0) < y.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted_list.take(K.toInt)",
    "        var min_list = new ListBuffer[Either[String, Long]]()\n        var min_list_size = 0\n        for (test_case <- test_list) {\n            if (min_list_size < K) {\n                min_list += test_case\n                min_list_size += 1\n            } else {\n                var max_index = 0\n                var max_value = min_list(0).right.get\n                for (i <- 1 until min_list_size) {\n                    if (min_list(i).right.get > max_value) {\n                        max_value = min_list(i).right.get\n                        max_index = i\n                    }\n                }\n                if (test_case.right.get < max_value) {\n                    min_list(max_index) = test_case\n                }\n            }\n        }\n        min_list.toList"
  ]
}