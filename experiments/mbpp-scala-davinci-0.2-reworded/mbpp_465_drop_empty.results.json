{
  "name": "mbpp_465_drop_empty",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau4zdmx2.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau4zdmx2.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau4zdmx2.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp095by4gy.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp095by4gy.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp095by4gy.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp095by4gy.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp095by4gy.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp095by4gy.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        dict2.map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl8ese9t9.scala:10:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl8ese9t9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl8ese9t9.scala:11:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        dict2.map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123253,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl8ese9t9.scala:10:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl8ese9t9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl8ese9t9.scala:11:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            v match {\n                case Some(x) => dict2 += (k -> x)\n                case None =>\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc1bn463n.scala:16:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc1bn463n.scala:17:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc1bn463n.scala:17:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for (i <- dict1) {\n            if (i._2.isDefined) {\n                dict2 += (i._1 -> i._2.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpemdws3x1.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpemdws3x1.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpemdws3x1.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        return dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpywh_lv5h.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpywh_lv5h.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpywh_lv5h.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        // dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n        dict1.collect{case (k,Some(v)) => (k,v)}\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp67jw2eg4.scala:10:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp67jw2eg4.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp67jw2eg4.scala:11:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(_._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi5_okh70.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi5_okh70.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi5_okh70.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for((k,v) <- dict1) {\n            if(v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9hoew5tz.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9hoew5tz.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9hoew5tz.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.mapValues(_.getOrElse(\"\")).filter(_._2 != \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmyr_q3jj.scala:6:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        dict1.mapValues(_.getOrElse(\u001b[31m\"\"\u001b[0m)).filter(_._2 != \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    scala.collection.MapView[String, String]\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[String, String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmyr_q3jj.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmyr_q3jj.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmyr_q3jj.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for (i <- dict1) {\n            if (i._2.isDefined) {\n                dict2 += (i._1 -> i._2.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpemdws3x1.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpemdws3x1.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpemdws3x1.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5ty5bd0.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq8ebve.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        val dict2 = dict1.filter(x => x._2.isDefined)\n        val dict3 = dict2.map(x => (x._1,x._2.get))\n        dict3\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:11:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdo7271nm.scala:12:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            v match {\n                case Some(x) => dict2 += (k -> x)\n                case None =>\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc1bn463n.scala:16:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc1bn463n.scala:17:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc1bn463n.scala:17:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(_._2.isDefined).mapValues(_.get)\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp130dch2e.scala:6:46 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        dict1.filter(_._2.isDefined).mapValues(_.get)\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    scala.collection.MapView[String, String]\n\u001b[31m  |\u001b[0m        Required: collection.mutable.Map[String, String]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp130dch2e.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp130dch2e.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp130dch2e.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mStri",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2 != None).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq32eewky.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq32eewky.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq32eewky.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5deqaen.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5deqaen.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5deqaen.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoo5qcml.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckzes8th.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) dict2 += (k -> v.get)\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5deqaen.scala:13:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5deqaen.scala:14:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc5deqaen.scala:14:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:15:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvw1dv1b6.scala:16:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.flatMap(x => x._2.map(y => (x._1,y)))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1666123255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3_i90eo.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3_i90eo.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3_i90eo.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))\n    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
      "timestamp": 1665510375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:9:80 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> \u001b[31m\"Green\"\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                       Found:    None.type\n\u001b[31m  |\u001b[0m                                                       Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuib4p777.scala:10:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(dropEmpty(Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m, \u001b[31m\"c2\"\u001b[0m -> None, \u001b[31m\"c3\"\u001b[0m -> None)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mString\u001b[0m](\u001b[31m\"c1\"\u001b[0m -> \u001b[31m\"Red\"\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Found:    None.type\n\u001b[31m   |\u001b[0m                                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}