{
  "name": "mbpp_606_radian_degree",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert degrees to radians.\n    def radianDegree(degree : Long) : Float = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(radianDegree((90l)) == (1.5707963267948966f));\n    assert(radianDegree((60l)) == (1.0471975511965976f));\n    assert(radianDegree((120l)) == (2.0943951023931953f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return degree * Pi.toFloat / 180",
    "        return degree * Pi.toFloat / 180",
    "        degree * Pi.toFloat / 180",
    "        return degree * Pi.toFloat / 180.0f",
    "        degree * Pi.toFloat / 180",
    "        return degree * Pi.toFloat / 180",
    "        return degree * Pi.toFloat / 180",
    "        return degree * Pi.toFloat / 180",
    "        return degree * Pi.toFloat / 180",
    "        return degree * Pi.toFloat / 180",
    "        return (degree * Pi / 180).toFloat",
    "        degree * Pi.toFloat / 180",
    "        degree * Pi.toFloat / 180",
    "        return degree * Pi.toFloat / 180",
    "        degree * Pi.toFloat / 180",
    "        degree * Pi.toFloat / 180",
    "        return degree * Pi.toFloat / 180",
    "        degree * (Pi / 180).toFloat",
    "        return degree * Pi.toFloat / 180",
    "        return degree * Pi.toFloat / 180"
  ]
}