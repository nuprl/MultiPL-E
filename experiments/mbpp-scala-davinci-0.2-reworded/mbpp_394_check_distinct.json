{
  "name": "mbpp_394_check_distinct",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if given tuple contains no duplicates.\n    def checkDistinct(test_tup : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkDistinct((1l, 4l, 5l, 6l, 1l, 4l)) == (false));\n    assert(checkDistinct((1l, 4l, 5l, 6l)) == (true));\n    assert(checkDistinct((2l, 3l, 4l, 5l, 6l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val tup = test_tup.toString.toList\n        val tup_set = tup.toSet\n        if (tup.length == tup_set.size) {\n            return true\n        }\n        return false",
    "        val tup_str = test_tup.toString\n        val tup_arr = tup_str.toCharArray\n        val tup_set = tup_arr.toSet\n        if (tup_set.size == tup_arr.size) true else false",
    "        val tup = test_tup.toString\n        for (i <- 0 until tup.length) {\n            for (j <- i + 1 until tup.length) {\n                if (tup(i) == tup(j)) return false\n            }\n        }\n        return true",
    "        val tup_str = test_tup.toString\n        val tup_arr = tup_str.toCharArray\n        val tup_set = tup_arr.toSet\n        if (tup_set.size == tup_arr.size) true else false",
    "        val tup_str = test_tup.toString\n        val tup_arr = tup_str.toCharArray\n        val tup_set = tup_arr.toSet\n        if (tup_set.size == tup_arr.size) {\n            return true\n        }\n        return false",
    "        val tup_str = test_tup.toString\n        val tup_set = tup_str.toSet\n        if (tup_set.size == tup_str.length) true else false",
    "        val tup = test_tup.toString\n        val tup_set = tup.toSet\n        tup.length == tup_set.size",
    "        val tup_str = test_tup.toString\n        val tup_arr = tup_str.toCharArray\n        val tup_set = tup_arr.toSet\n        if (tup_set.size == tup_arr.size) true else false",
    "        val tup_str = test_tup.toString\n        val tup_arr = tup_str.toCharArray\n        val tup_set = tup_arr.toSet\n        return tup_arr.length == tup_set.size",
    "        val tup_str = test_tup.toString\n        val tup_arr = tup_str.toCharArray\n        val tup_set = tup_arr.toSet\n        if (tup_set.size == tup_arr.size) true else false",
    "        var tup_str = test_tup.toString\n        var tup_arr = tup_str.toArray\n        var tup_set = tup_arr.toSet\n        if (tup_arr.length == tup_set.size) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        val tup_str = test_tup.toString\n        val tup_set = tup_str.toSet\n        if (tup_set.size == tup_str.size) true else false",
    "        val tup_str = test_tup.toString\n        for (i <- 0 until tup_str.length) {\n            for (j <- i + 1 until tup_str.length) {\n                if (tup_str(i) == tup_str(j)) return false\n            }\n        }\n        return true",
    "        var tup_str = test_tup.toString\n        var tup_set = Set[Char]()\n        for (i <- 0 until tup_str.length) {\n            if (tup_set.contains(tup_str(i))) return false\n            tup_set += tup_str(i)\n        }\n        return true",
    "        val tup_str = test_tup.toString\n        val tup_arr = tup_str.toCharArray\n        val tup_set = tup_arr.toSet\n        if (tup_set.size == tup_arr.size) {\n            return true\n        }\n        return false",
    "        val tup_str = test_tup.toString\n        val tup_arr = tup_str.toCharArray\n        val tup_set = tup_arr.toSet\n        if (tup_set.size == tup_arr.size) {\n            return true\n        }\n        return false",
    "        val test_str = test_tup.toString\n        val test_arr = test_str.toCharArray\n        val test_set = test_arr.toSet\n        return test_set.size == test_arr.size",
    "        val tup_str = test_tup.toString\n        val tup_arr = tup_str.toCharArray\n        val tup_set = tup_arr.toSet\n        if (tup_arr.length == tup_set.size) {\n            return true\n        }\n        return false",
    "        val tup_str = test_tup.toString\n        val tup_arr = tup_str.toCharArray\n        val tup_set = tup_arr.toSet\n        if (tup_set.size == tup_arr.size) true else false",
    "        val test_str = test_tup.toString\n        val test_arr = test_str.toCharArray\n        val test_set = test_arr.toSet\n        return test_set.size == test_arr.size"
  ]
}