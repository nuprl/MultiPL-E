{
  "name": "mbpp_292_find",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        // Write your code here\n        return 0",
    "        return n / m",
    "        // Write your code here\n        return 0",
    "        if (n < m) 0\n        else if (n == m) 1\n        else 1 + find(n - m, m)",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        // Write your code here\n        return 0",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        // Write your code here\n        return 0",
    "        // Write your code here\n        return 0",
    "        return n / m",
    "        return n / m",
    "        return 0",
    "        return n / m",
    "        // Write your code here\n        return 0",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        n / m",
    "        // Write your code here\n        return 0",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        // Write your code here\n        return 0",
    "        return 0",
    "        return 0",
    "        n / m",
    "        return n / m",
    "        // Write your code here\n        return n / m",
    "        val q = n / m\n        q",
    "        return n / m",
    "        n / m",
    "        return n / m",
    "        // Write your code here\n        return 0",
    "        n / m",
    "        return n / m",
    "        return n / m",
    "        // Fill up this function body\n        // `n` is dividend\n        // `m` is divisor\n        // You have to return the quotient\n        n/m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        val q = n / m\n        q",
    "        // Write your code here\n        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return (n / m)",
    "        // Fill up this function body\n        // `n` is dividend\n        // `m` is divisor\n        // You have to return the quotient\n        n / m",
    "        // Write your code here\n        return 0",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        if (n < m) 0\n        else if (n == m) 1\n        else 1 + find(n - m, m)",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        // Write your code here.\n        return n/m",
    "        return n / m;",
    "        return n / m;",
    "        // Fill in the code here\n        return 0",
    "        // Write your code here\n        n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return (n / m)",
    "        // Write your code here\n        return 0",
    "        // Fill up this function body\n        // `n` is dividend\n        // `m` is divisor\n        n / m",
    "        return n / m",
    "        var q = 0L\n        var r = n\n        while (r >= m) {\n            q += 1\n            r -= m\n        }\n        q",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        n / m",
    "        // Fill in the code here\n        return 0",
    "        n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return (n / m)",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        var q = 0L\n        var r = n\n        while (r >= m) {\n            q += 1\n            r -= m\n        }\n        q",
    "        return 0",
    "        return n / m",
    "        return n / m",
    "        // Write your code here\n        n / m",
    "        return 0",
    "        return n / m",
    "        // Write your code here\n        return 0",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        if (n < m) return 0\n        var q = 0\n        var r = n\n        while (r >= m) {\n            r -= m\n            q += 1\n        }\n        return q",
    "        return 0",
    "        return n / m",
    "        return n / m",
    "        // Write your code here\n        return 0",
    "        if (n < m) 0\n        else 1 + find(n - m, m)",
    "        return n / m",
    "        return n / m",
    "        return n/m",
    "        return n / m",
    "        if (n < m) 0\n        else 1 + find(n - m, m)",
    "        return n / m",
    "        return (n / m)",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return (n / m)",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return 0",
    "        return n / m",
    "        // Write your code here\n        return n / m",
    "        // Write your code here\n        0",
    "        return n / m",
    "        // Write your code here\n        return 0",
    "        return n / m",
    "        n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        if (n < m) 0\n        else 1 + find(n - m, m)",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        // Fill in the code here\n        return 0",
    "        // Write your code here\n        return 0",
    "        if (n < m) return 0\n        return 1 + find(n - m, m)",
    "        return n/m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        // Write your code here\n        return 0",
    "        // Fill up this function body\n        // You have to return the quotient of n and m\n        n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return n / m",
    "        return 0",
    "        return n / m"
  ]
}