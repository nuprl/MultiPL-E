{
  "name": "mbpp_471_find_remainder",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the product of the list multiplication modulo n.\n    def findRemainder(arr : List[Long], n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findRemainder((List[Long](100l.toLong, 10l.toLong, 5l.toLong, 25l.toLong, 35l.toLong, 14l.toLong)), (11l)) == (9l));\n    assert(findRemainder((List[Long](1l.toLong, 1l.toLong, 1l.toLong)), (1l)) == (0l));\n    assert(findRemainder((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (2l)) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Fill Up this function body\n        // `n` is the modulo value\n        // `arr` is the list of elements\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Write your code here\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        var prod = 1L\n        for (i <- arr) {\n            prod = (prod * i) % n\n        }\n        return prod",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        val m = arr.foldLeft(1L)((x, y) => (x * y) % n)\n        m",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        var prod = 1L\n        for (i <- arr) {\n            prod = (prod * i) % n\n        }\n        prod",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        val product = arr.foldLeft(1L)((a, b) => a * b)\n        product % n",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        return result",
    "        var result : Long = 1\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        return result",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((x, y) => (x * y) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result"
  ]
}