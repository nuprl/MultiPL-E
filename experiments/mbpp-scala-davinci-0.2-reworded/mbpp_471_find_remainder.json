{
  "name": "mbpp_471_find_remainder",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the product of the list multiplication modulo n.\n    def findRemainder(arr : List[Long], n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findRemainder((List[Long](100l.toLong, 10l.toLong, 5l.toLong, 25l.toLong, 35l.toLong, 14l.toLong)), (11l)) == (9l));\n    assert(findRemainder((List[Long](1l.toLong, 1l.toLong, 1l.toLong)), (1l)) == (0l));\n    assert(findRemainder((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (2l)) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Fill Up this function body\n        // `n` is the modulo value\n        // `arr` is the list of elements\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Write your code here\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        var prod = 1L\n        for (i <- arr) {\n            prod = (prod * i) % n\n        }\n        return prod",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        val m = arr.foldLeft(1L)((x, y) => (x * y) % n)\n        m",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        var prod = 1L\n        for (i <- arr) {\n            prod = (prod * i) % n\n        }\n        prod",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        val product = arr.foldLeft(1L)((a, b) => a * b)\n        product % n",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        return result",
    "        var result : Long = 1\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        return result",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((x, y) => (x * y) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        return product",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        var result : Long = 1\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        return result",
    "        // Fill up this function body\n        // You have to return the remainder of product of arr modulo n\n        var product : Long = 1\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        return product",
    "        // Write your code here\n        val mod = 1000000007L\n        val p = arr.foldLeft(1L)((a, b) => (a * b) % mod)\n        p % n",
    "        // Write your code here\n        return 0",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill up this function body\n        // You have to return the remainder of product of arr modulo n\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the upper bound of the range\n        // `arr` is the list of numbers to be multiplied\n        // You have to find the product of all the numbers in the list modulo `n`\n        // You have to return the remainder of the product\n        // For example, if the list is List(2, 3, 4, 5) and n is 5,\n        // the product of all the numbers in the list is 2 * 3 * 4 * 5 which is 120.\n        // 120 modulo 5 is 0. So the remainder is 0.\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        return 0",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        // You can add another function as well, if required\n        var result = 1L;\n        for (i <- arr) {\n            result = (result * i) % n;\n        }\n        return result;",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => a * b % n)",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        var result : Long = 1\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        return result",
    "        // Write your code here\n        val m = arr.length\n        var res = 1L\n        for (i <- 0 until m) {\n            res = (res * arr(i)) % n\n        }\n        res",
    "        var result : Long = 1\n        for (i <- 0 until arr.length) {\n            result *= arr(i)\n            result %= n\n        }\n        return result",
    "        val mod = arr.map(x => x % n).reduceLeft(_ * _)\n        mod % n",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill up this function body\n        // You have to return the remainder of product of arr modulo n\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill up this function body\n        // You have to return the remainder of product of arr modulo n\n        return 0",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((x, y) => (x * y) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        return result",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n.\n        // For e.g. findRemainder(List(2, 3, 4), 5) ==> 4\n        // Because (2 * 3 * 4) % 5 ==> 4\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result : Long = 1\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill up this function body\n        // You can add another function as well, if required\n        val m = arr.foldLeft(1L)((a, b) => (a * b) % n)\n        m",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var product = 1L\n        for (i <- 0 until arr.length) {\n            product = (product * arr(i)) % n\n        }\n        product",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        // You can add another function as well, if required\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        val m = arr.foldLeft(1L)((a, b) => (a * b) % n)\n        m",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        // Fill up this function body\n        // You have to return the remainder of product of arr modulo n\n        // For e.g. arr = List(1, 2, 3), n = 11 should return 4\n        // Because (1 * 2 * 3) % 11 = 6 % 11 = 4\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((x, y) => (x * y) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var result = 1L\n        arr.foreach(x => result = (result * x) % n)\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n.\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        // Write your code here\n        arr.foldLeft(1L)((acc, x) => (acc * x) % n)",
    "        // Fill up this function body\n        // You have to return the remainder of product of arr modulo n\n        var prod = 1L\n        for (i <- arr) {\n            prod = (prod * i) % n\n        }\n        prod",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        def findRemainderHelper(arr : List[Long], n : Long, acc : Long) : Long = arr match {\n            case Nil => acc\n            case x :: xs => findRemainderHelper(xs, n, (acc * x) % n)\n        }\n        findRemainderHelper(arr, n, 1)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Write your code here\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        val modulo = (x : Long, y : Long) => x % y\n        val product = (x : Long, y : Long) => x * y\n        arr.foldLeft(1L)((x, y) => modulo(product(x, y), n))",
    "        // Write your code here\n        val m = arr.foldLeft(1L)((a, b) => (a * b) % n)\n        m",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((x, y) => (x * y) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        // `arr` is the list of numbers\n        // You have to find the product of the list multiplication modulo n\n        var prod = 1L\n        for (i <- arr) {\n            prod = (prod * i) % n\n        }\n        prod",
    "        // Fill up this function body\n        // You can add another function as well, if required\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        var result : Long = 1\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        return result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result : Long = 1\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        return 0",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        return 0",
    "        // Fill up this function body\n        // You have to return the remainder of product of arr modulo n\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the value of modulo\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n.\n        // For e.g. findRemainder(List(2, 3, 4), 5) ==> 4\n        // Because 2 * 3 * 4 = 24 and 24 % 5 = 4\n        arr.foldLeft(1L)((x, y) => (x * y) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        return result",
    "        val product = arr.foldLeft(1L)((a, b) => (a * b) % n)\n        product",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        val m = arr.foldLeft(1L)((a, b) => (a * b) % n)\n        m",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        // `arr` is the list of elements\n        // You have to find the product of the list multiplication modulo n\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        return 0",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        arr.foldLeft(1L)((x, y) => (x * y) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // 'n' is greater than '0'\n        // 'arr' size is at least 1\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        return 0",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        return result",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill up this function body\n        // You have to return the remainder of product of arr modulo n.\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Write your code here\n        var result = 1L\n        for (i <- 0 until arr.length) {\n            result = (result * arr(i)) % n\n        }\n        result",
    "        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        // `arr` is the list of numbers\n        // You have to find the product of the list multiplication modulo n\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        // `arr` is the list of numbers\n        // You have to find the product of the list multiplication modulo n\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Write your code here\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n.\n        var result = 1L\n        for(i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill up this function body\n        // You have to return the remainder of product of arr modulo n.\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % n",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        return arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var res = 1L\n        for (i <- arr) {\n            res = (res * i) % n\n        }\n        res",
    "        // Write your code here\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        // Return the remainder of product of list modulo n.\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        // `arr` is the list of elements\n        // You have to find the product of the list multiplication modulo n\n        // You have to return the remainder\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill up this function body\n        // You can add another function as well, if required\n        //var product = 1L\n        //for (i <- arr) product = (product * i) % n\n        //product\n        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        return arr.foldLeft(1L)((a, b) => (a * b) % n)",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        // Fill Up this function body\n        // `n` is the modulo value\n        var prod = 1L\n        for (i <- arr) {\n            prod = (prod * i) % n\n        }\n        prod",
    "        // Fill Up this function body\n        // 'n' is the value of modulo\n        var prod = 1L\n        for (i <- arr) {\n            prod = (prod * i) % n\n        }\n        prod",
    "        // Fill up this function body\n        // You have to return the remainder of product of the list modulo n\n        var product = 1L\n        for (i <- arr) {\n            product = (product * i) % n\n        }\n        product",
    "        var result = 1L\n        for (i <- arr) {\n            result = (result * i) % n\n        }\n        result"
  ]
}