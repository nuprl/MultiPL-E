{
  "name": "mbpp_283_validate",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        digits.map(x => digits.count(_ == x)).zip(digits).forall(x => x._1 <= x._2)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)",
    "        val freq = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            val d = (m % 10).toInt\n            freq(d) += 1\n            m /= 10\n        }\n        for (i <- 0 to 9) {\n            if (freq(i) > i) return false\n        }\n        true",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)"
  ]
}