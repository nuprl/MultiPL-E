{
  "name": "mbpp_807_first_odd",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(_ % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5wye1fpj.scala:10)\n\tat Problem.main(tmp5wye1fpj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 != 0).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // TODO: Implement this function\n        0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9_k_qa8i.scala:10)\n\tat Problem.main(tmp9_k_qa8i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 != 0).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        return nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Write your code here\n        nums.filter(_ % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 != 0)(0)\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Your code here\n        0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpecu4ervu.scala:10)\n\tat Problem.main(tmpecu4ervu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(n => n % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5wye1fpj.scala:10)\n\tat Problem.main(tmp5wye1fpj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // TODO: Implement this function.\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9fxrz6xo.scala:10)\n\tat Problem.main(tmp9fxrz6xo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 != 0)(0)\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Write your code here\n        nums.filter(_ % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5wye1fpj.scala:10)\n\tat Problem.main(tmp5wye1fpj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        if (nums.isEmpty) 0\n        else if (nums.head % 2 == 1) nums.head\n        else firstOdd(nums.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 != 0).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(n => n % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Fill in your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7mht6nkx.scala:10)\n\tat Problem.main(tmp7mht6nkx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Fill in the code here\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Fill in the code here.\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvb3i2h1b.scala:10)\n\tat Problem.main(tmpvb3i2h1b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(_ % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Your code goes here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptt4mcal0.scala:10)\n\tat Problem.main(tmptt4mcal0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(n => n % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Your code here\n        0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpecu4ervu.scala:10)\n\tat Problem.main(tmpecu4ervu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(n => n % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 != 0).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // TODO: Implement this function\n        0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9_k_qa8i.scala:10)\n\tat Problem.main(tmp9_k_qa8i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1)(0)\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5wye1fpj.scala:10)\n\tat Problem.main(tmp5wye1fpj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(_ % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1y4el9ki.scala:9)\n\tat Problem.main(tmp1y4el9ki.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).getOrElse(0)\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 != 0).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1y4el9ki.scala:9)\n\tat Problem.main(tmp1y4el9ki.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5wye1fpj.scala:10)\n\tat Problem.main(tmp5wye1fpj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5wye1fpj.scala:10)\n\tat Problem.main(tmp5wye1fpj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 != 0).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Your code here\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        val odd = nums.filter(x => x % 2 == 1)\n        odd(0)\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 != 0).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 != 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // your code here\n        nums.filter(_ % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5wye1fpj.scala:10)\n\tat Problem.main(tmp5wye1fpj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.find(x => x % 2 == 1).get\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n        nums.filter(x => x % 2 == 1).head\n    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n",
      "timestamp": 1665509714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}