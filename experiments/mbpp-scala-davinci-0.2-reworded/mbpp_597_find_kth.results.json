{
  "name": "mbpp_597_find_kth",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo2av7zup.scala:21)\n\tat Problem.main(tmpo2av7zup.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.size == 0) return arr2(k.toInt)\n        if (arr2.size == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.size / 2\n        val mid2 = arr2.size / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2) return findKth(arr1.slice(0, mid1), arr2, k)\n            else return findKth(arr1, arr2.slice(mid2 + 1, arr2.size), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2) return findKth(arr1, arr2.slice(0, mid2), k)\n            else return findKth(arr1.slice(mid1 + 1, arr1.size), arr2, k - mid1 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_no3fp28.scala:20)\n\tat Problem.main(tmp_no3fp28.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.drop(mid1), arr2, k - mid1)\n        else return findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjnp0at4.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjnp0at4.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjnp0at4.scala:11:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjnp0at4.scala:12:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mreturn\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Int, j : Int) : Long = {\n            if (i == arr1.length) arr2(j + k.toInt - 1)\n            else if (j == arr2.length) arr1(i + k.toInt - 1)\n            else if (k == 1) min(arr1(i), arr2(j))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i + k / 2.toInt - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j + k / 2.toInt - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2.toInt, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2.toInt)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510555,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwnig391g.scala:11:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmid1\u001b[0m = \u001b[33mif\u001b[0m (i + k / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m < arr1.length) arr1(i + k / \u001b[31m2\u001b[0m.toInt - \u001b[31m1\u001b[0m) \u001b[33melse\u001b[0m Long.MaxValue\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwnig391g.scala:12:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmid2\u001b[0m = \u001b[33mif\u001b[0m (j + k / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m < arr2.length) arr2(j + k / \u001b[31m2\u001b[0m.toInt - \u001b[31m1\u001b[0m) \u001b[33melse\u001b[0m Long.MaxValue\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwnig391g.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                \u001b[33mif\u001b[0m (mid1 < mid2) findKth(arr1, arr2, k - k / \u001b[31m2\u001b[0m, i + k / \u001b[31m2\u001b[0m.toInt, j)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwnig391g.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                \u001b[33melse\u001b[0m findKth(arr1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:71 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:12:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (k == 1) {\n            min(arr1(0), arr2(0))\n        } else {\n            if (arr1.length == 0) {\n                arr2(k.toInt - 1)\n            } else if (arr2.length == 0) {\n                arr1(k.toInt - 1)\n            } else {\n                val mid1 = arr1(min(k.toInt / 2 - 1, arr1.length - 1))\n                val mid2 = arr2(min(k.toInt / 2 - 1, arr2.length - 1))\n                if (mid1 < mid2) {\n                    findKth(arr1.slice(min(k.toInt / 2, arr1.length), arr1.length), arr2, k - min(k.toInt / 2, arr1.length))\n                } else {\n                    findKth(arr1, arr2.slice(min(k.toInt / 2, arr2.length), arr2.length), k - min(k.toInt / 2, arr2.length))\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) arr2(k.toInt)\n        else if (arr2.isEmpty) arr1(k.toInt)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (mid1 + mid2 < k) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n                else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n            }\n            else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n                else findKth(arr1, arr2.take(mid2), k)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7piss2h7.scala:22)\n\tat Problem.main(tmp7piss2h7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph8v5vmzm.scala:20)\n\tat Problem.main(tmph8v5vmzm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (mid1 + mid2 < k) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n            else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1, arr2.slice(0, mid2), k)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.findKth(tmpr92wv2tw.scala:7)\n\tat Problem$.main(tmpr92wv2tw.scala:22)\n\tat Problem.main(tmpr92wv2tw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (k == 1) {\n            min(arr1.head, arr2.head)\n        } else {\n            val a = arr1.head\n            val b = arr2.head\n            if (a < b) {\n                findKth(arr1.tail, arr2, k - 1)\n            } else {\n                findKth(arr1, arr2.tail, k - 1)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2 + 1) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2 + 1) findKth(arr1, arr2.slice(0, mid2), k)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5chdkfjq.scala:20)\n\tat Problem.main(tmp5chdkfjq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length - 1, k / 2)\n        val mid2 = min(arr2.length - 1, k / 2)\n        if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n        else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeia5dway.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + \u001b[31m1\u001b[0m), k - mid2 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeia5dway.scala:11:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + \u001b[31m1\u001b[0m), k - mid2 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeia5dway.scala:11:61 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + \u001b[31m1\u001b[0m), k - mid2 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeia5dway.scala:12:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1.drop(mid1 + \u001b[31m1\u001b[0m), arr2, k - mid1 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8gf2egf7.scala:20)\n\tat Problem.main(tmp8gf2egf7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1.head, arr2.head)\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuzvwe4r1.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuzvwe4r1.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuzvwe4r1.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuzvwe4r1.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (arr1(mid1) <= arr2(mid2)) {\n                if (k <= mid1 + mid2 + 1) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n            else {\n                if (k <= mid1 + mid2 + 1) findKth(arr1, arr2.slice(0, mid2), k)\n                else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqtm9_wx.scala:23)\n\tat Problem.main(tmpkqtm9_wx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length - 1)\n        val k2 = min(k / 2, arr2.length - 1)\n        if (arr1(k1) < arr2(k2)) findKth(arr1.drop(k1 + 1), arr2, k - k1 - 1)\n        else findKth(arr1, arr2.drop(k2 + 1), k - k2 - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2s74nmq4.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(k1) < arr2(k2)) findKth(arr1.drop(k1 + \u001b[31m1\u001b[0m), arr2, k - k1 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (k1 : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2s74nmq4.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(k1) < arr2(k2)) findKth(arr1.drop(k1 + \u001b[31m1\u001b[0m), arr2, k - k1 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (k2 : Long)\n\u001b[31m   |\u001b[0m                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2s74nmq4.scala:11:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(k1) < arr2(k2)) findKth(arr1.drop(k1 + \u001b[31m1\u001b[0m), arr2, k - k1 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Found:    Long\n\u001b[31m   |\u001b[0m                                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2s74nmq4.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(k2 + \u001b[31m1\u001b[0m), k - k2 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    Long\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.size == 0) return arr2(k.toInt - 1)\n        if (arr2.size == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.size)\n        val mid2 = min(k / 2, arr2.size)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.size), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.size), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiqxno5qy.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.size), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiqxno5qy.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.size), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiqxno5qy.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.size), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiqxno5qy.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.size), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2) findKth(arr1, arr2.slice(0, mid2), k)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123431,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgqqicb77.scala:20)\n\tat Problem.main(tmpgqqicb77.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, k / 2)\n        val n = min(arr2.length, k / 2)\n        if (arr1(m - 1) > arr2(n - 1)) return findKth(arr1, arr2.slice(n, arr2.length), k - n)\n        else return findKth(arr1.slice(m, arr1.length), arr2, k - m)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzg4_4tx.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) > arr2(n - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(n, arr2.length), k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzg4_4tx.scala:11:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) > arr2(n - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(n, arr2.length), k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzg4_4tx.scala:11:71 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) > arr2(n - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(n, arr2.length), k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzg4_4tx.scala:12:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mreturn\u001b[0m findKth(arr1.slice(m, arr1.length), arr2, k - m)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (m : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-expla",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long) : Long = {\n            if (i == k) arr1(i.toInt - 1)\n            else if (arr1(i.toInt - 1) < arr2(i.toInt - 1)) findKth(arr1, arr2, k, i + 1)\n            else findKth(arr2, arr1, k, i + 1)\n        }\n        findKth(arr1, arr2, k, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5daco356.scala:14)\n\tat Problem.main(tmp5daco356.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length - 1, (k / 2).toInt)\n        val mid2 = min(arr2.length - 1, (k / 2).toInt)\n        if (arr1(mid1) < arr2(mid2)) findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        else findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzb7lk7xy.scala:15)\n\tat Problem.main(tmpzb7lk7xy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKthRec(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n            if (arr1.length == 0) return arr2(k.toInt - 1)\n            if (arr2.length == 0) return arr1(k.toInt - 1)\n            if (k == 1) return min(arr1(0), arr2(0))\n            val mid1 = min(arr1.length, k / 2)\n            val mid2 = min(arr2.length, k / 2)\n            if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKthRec(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n            else findKthRec(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        }\n        findKthRec(arr1, arr2, k)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp67iavdvz.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKthRec(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Long\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp67iavdvz.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKthRec(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp67iavdvz.scala:12:71 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKthRec(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp67iavdvz.scala:13:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33melse\u001b[0m findKthRec(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKthHelper(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n            if (arr1.length == 0) return arr2(k.toInt - 1)\n            if (arr2.length == 0) return arr1(k.toInt - 1)\n            if (k == 1) return min(arr1(0), arr2(0))\n            val mid1 = min(k / 2, arr1.length)\n            val mid2 = min(k / 2, arr2.length)\n            if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKthHelper(arr1.drop(mid1), arr2, k - mid1)\n            else findKthHelper(arr1, arr2.drop(mid2), k - mid2)\n        }\n        findKthHelper(arr1, arr2, k)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp712k45gs.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKthHelper(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Long\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp712k45gs.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKthHelper(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp712k45gs.scala:12:73 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKthHelper(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp712k45gs.scala:13:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33melse\u001b[0m findKthHelper(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation avai",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, (k / 2).toInt)\n        val n = min(arr2.length, (k / 2).toInt)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.drop(m), arr2, k - m)\n        else findKth(arr1, arr2.drop(n), k - n)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (k <= mid1 + mid2 + 1) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1, arr2.slice(0, mid2), k)\n            } else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length - 1)\n        val k2 = min(k / 2, arr2.length - 1)\n        if (arr1(k1) < arr2(k2)) findKth(arr1.slice(k1 + 1, arr1.length), arr2, k - k1 - 1)\n        else findKth(arr1, arr2.slice(k2 + 1, arr2.length), k - k2 - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeewf3k_q.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(k1) < arr2(k2)) findKth(arr1.slice(k1 + \u001b[31m1\u001b[0m, arr1.length), arr2, k - k1 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (k1 : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeewf3k_q.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(k1) < arr2(k2)) findKth(arr1.slice(k1 + \u001b[31m1\u001b[0m, arr1.length), arr2, k - k1 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (k2 : Long)\n\u001b[31m   |\u001b[0m                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeewf3k_q.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(k1) < arr2(k2)) findKth(arr1.slice(k1 + \u001b[31m1\u001b[0m, arr1.length), arr2, k - k1 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    Long\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeewf3k_q.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(k2 + \u001b[31m1\u001b[0m, arr2.length), k - k2 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) arr2(j.toInt + k.toInt - 1)\n            else if (j >= arr2.length) arr1(i.toInt + k.toInt - 1)\n            else if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + (k / 2).toInt - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + (k / 2).toInt - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) {\n            findKth(arr1.drop(mid1), arr2, k - mid1)\n        } else {\n            findKth(arr1, arr2.drop(mid2), k - mid2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzp6_ze7.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzp6_ze7.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzp6_ze7.scala:12:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzp6_ze7.scala:14:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc2zhoh8_.scala:21)\n\tat Problem.main(tmpc2zhoh8_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, k / 2)\n        val mid2 = min(arr2.length, k / 2)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_w7j03xd.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_w7j03xd.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_w7j03xd.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_w7j03xd.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) > arr2(mid2 - 1)) return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        else return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (mid1 + mid2 + 1 >= k) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        } else {\n            if (mid1 + mid2 + 1 >= k) findKth(arr1, arr2.slice(0, mid2), k)\n            else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpivnuvq9m.scala:20)\n\tat Problem.main(tmpivnuvq9m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) > arr2(mid2 - 1)) return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        else return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptgiehr97.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) > arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptgiehr97.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) > arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptgiehr97.scala:11:77 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) > arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptgiehr97.scala:12:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        if (arr1.length == 1 && arr2.length == 1) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) > arr2(mid2)) {\n            if (k <= mid1 + mid2) return findKth(arr1.slice(0, mid1), arr2, k)\n            else return findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2) return findKth(arr1, arr2.slice(0, mid2), k)\n            else return findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9ffuvpqi.scala:21)\n\tat Problem.main(tmp9ffuvpqi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, (k / 2).toInt)\n        val n = min(arr2.length, (k / 2).toInt)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.drop(m), arr2, k - m)\n        else findKth(arr1, arr2.drop(n), k - n)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0532qoej.scala:20)\n\tat Problem.main(tmp0532qoej.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo2av7zup.scala:21)\n\tat Problem.main(tmpo2av7zup.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length - 1, (k / 2).toInt)\n        val mid2 = min(arr2.length - 1, (k / 2).toInt)\n        if (arr1(mid1) > arr2(mid2)) {\n            findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj_y50vhc.scala:18)\n\tat Problem.main(tmpj_y50vhc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val m = arr1.length / 2\n            val n = arr2.length / 2\n            if (m + n < k) {\n                if (arr1(m) < arr2(n)) findKth(arr1.drop(m + 1), arr2, k - m - 1)\n                else findKth(arr1, arr2.drop(n + 1), k - n - 1)\n            }\n            else {\n                if (arr1(m) < arr2(n)) findKth(arr1, arr2.dropRight(n + 1), k)\n                else findKth(arr1.dropRight(m + 1), arr2, k)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6042_fak.scala:22)\n\tat Problem.main(tmp6042_fak.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (k == 1) min(arr1.head, arr2.head)\n        else {\n            val m = min(arr1.length, arr2.length)\n            val n = min(k / 2, m)\n            if (arr1(n - 1) < arr2(n - 1)) findKth(arr1.drop(n), arr2, k - n)\n            else findKth(arr1, arr2.drop(n), k - n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123440,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4mc_ow9i.scala:10:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(n - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(n), arr2, k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Long\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4mc_ow9i.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(n - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(n), arr2, k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4mc_ow9i.scala:10:61 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(n - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(n), arr2, k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4mc_ow9i.scala:11:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(n), k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length).toInt\n        val mid2 = min(k / 2, arr2.length).toInt\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc2zhoh8_.scala:21)\n\tat Problem.main(tmpc2zhoh8_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (k <= (mid1 + mid2 + 1)) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1 + 1), arr2.slice(0, mid2), k)\n                else findKth(arr1.slice(0, mid1), arr2.slice(0, mid2 + 1), k)\n            }\n            else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n                else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg3x5orrr.scala:22)\n\tat Problem.main(tmpg3x5orrr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val a = arr1(min(k.toInt / 2 - 1, arr1.length - 1))\n        val b = arr2(min(k.toInt / 2 - 1, arr2.length - 1))\n        if (a < b) findKth(arr1.drop(min(k.toInt / 2, arr1.length)), arr2, k - min(k.toInt / 2, arr1.length))\n        else findKth(arr1, arr2.drop(min(k.toInt / 2, arr2.length)), k - min(k.toInt / 2, arr2.length))\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        val n = arr1.length\n        val m = arr2.length\n        if (n == 0) return arr2(k.toInt - 1)\n        if (m == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val i = min(n, k / 2)\n        val j = min(m, k / 2)\n        if (arr1(i - 1) < arr2(j - 1)) findKth(arr1.drop(i), arr2, k - i)\n        else findKth(arr1, arr2.drop(j), k - j)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2g4wh34g.scala:13:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(i - \u001b[31m1\u001b[0m) < arr2(j - \u001b[31m1\u001b[0m)) findKth(arr1.drop(i), arr2, k - i)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2g4wh34g.scala:13:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(i - \u001b[31m1\u001b[0m) < arr2(j - \u001b[31m1\u001b[0m)) findKth(arr1.drop(i), arr2, k - i)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2g4wh34g.scala:13:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(i - \u001b[31m1\u001b[0m) < arr2(j - \u001b[31m1\u001b[0m)) findKth(arr1.drop(i), arr2, k - i)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (i : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2g4wh34g.scala:14:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(j), k - j)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (j : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val m = min(i + k / 2, arr1.length)\n                val n = min(j + k / 2, arr2.length)\n                if (arr1(m.toInt) < arr2(n.toInt)) findKth(arr1, arr2, k - (m - i), m, j)\n                else findKth(arr1, arr2, k - (n - j), i, n)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvmie7_z.scala:18)\n\tat Problem.main(tmppvmie7_z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        val n = arr1.length\n        val m = arr2.length\n        if (n == 0) return arr2(k.toInt - 1)\n        if (m == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val i = min(n, k / 2)\n        val j = min(m, k / 2)\n        if (arr1(i - 1) > arr2(j - 1)) findKth(arr1, arr2.slice(j, m), k - j)\n        else findKth(arr1.slice(i, n), arr2, k - i)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplaeuujog.scala:13:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(i - \u001b[31m1\u001b[0m) > arr2(j - \u001b[31m1\u001b[0m)) findKth(arr1, arr2.slice(j, m), k - j)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplaeuujog.scala:13:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(i - \u001b[31m1\u001b[0m) > arr2(j - \u001b[31m1\u001b[0m)) findKth(arr1, arr2.slice(j, m), k - j)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplaeuujog.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(i - \u001b[31m1\u001b[0m) > arr2(j - \u001b[31m1\u001b[0m)) findKth(arr1, arr2.slice(j, m), k - j)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (j : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplaeuujog.scala:14:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1.slice(i, n), arr2, k - i)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (i : Long)\n\u001b[31m   |\u001b[0m                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        if (arr1.length == 1 && arr2.length == 1) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk14qush1.scala:22)\n\tat Problem.main(tmpk14qush1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) < arr2(mid2)) {\n            if (k <= mid1 + mid2 + 1) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (k <= mid1 + mid2 + 1) findKth(arr1, arr2.slice(0, mid2), k)\n            else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppylh2q2k.scala:21)\n\tat Problem.main(tmppylh2q2k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (k <= (mid1 + mid2 + 1)) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1 + 1), arr2.slice(0, mid2), k)\n            else findKth(arr1.slice(0, mid1), arr2.slice(0, mid2 + 1), k)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n            else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123446,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long) : Long = {\n            if (i == k) {\n                if (arr1.head < arr2.head) arr1.head else arr2.head\n            } else {\n                if (arr1.head < arr2.head) findKth(arr1.tail, arr2, k, i + 1) else findKth(arr1, arr2.tail, k, i + 1)\n            }\n        }\n        findKth(arr1, arr2, k, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbrggj9ky.scala:16)\n\tat Problem.main(tmpbrggj9ky.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjy6_wbgy.scala:20)\n\tat Problem.main(tmpjy6_wbgy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, (k / 2).toInt)\n        val n = min(arr2.length, (k / 2).toInt)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.drop(m), arr2, k - m)\n        else findKth(arr1, arr2.drop(n), k - n)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc2zhoh8_.scala:21)\n\tat Problem.main(tmpc2zhoh8_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0532qoej.scala:20)\n\tat Problem.main(tmp0532qoej.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (arr1(mid1) <= arr2(mid2)) {\n                if (mid1 + mid2 + 1 >= k) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            } else {\n                if (mid1 + mid2 + 1 >= k) findKth(arr1, arr2.slice(0, mid2), k)\n                else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0xstp96b.scala:22)\n\tat Problem.main(tmp0xstp96b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, k / 2)\n        val mid2 = min(arr2.length, k / 2)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5cpabar.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5cpabar.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5cpabar.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5cpabar.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (k == 1) {\n            min(arr1(0), arr2(0))\n        } else {\n            val l1 = arr1.size\n            val l2 = arr2.size\n            if (l1 == 0) {\n                arr2(k.toInt - 1)\n            } else if (l2 == 0) {\n                arr1(k.toInt - 1)\n            } else {\n                val m1 = min(l1, k / 2)\n                val m2 = min(l2, k / 2)\n                if (arr1(m1.toInt - 1) < arr2(m2.toInt - 1)) {\n                    findKth(arr1.slice(m1.toInt, l1), arr2, k - m1)\n                } else {\n                    findKth(arr1, arr2.slice(m2.toInt, l2), k - m2)\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val a = arr1(min(k.toInt / 2, arr1.length - 1))\n        val b = arr2(min(k.toInt / 2, arr2.length - 1))\n        if (a < b) findKth(arr1.slice(min(k.toInt / 2, arr1.length - 1), arr1.length), arr2, k - min(k.toInt / 2, arr1.length))\n        else findKth(arr1, arr2.slice(min(k.toInt / 2, arr2.length - 1), arr2.length), k - min(k.toInt / 2, arr2.length))\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123446,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, k.toInt / 2)\n        val n = min(arr2.length, k.toInt / 2)\n        if (arr1(m) < arr2(n)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n        else findKth(arr1, arr2.slice(n, arr2.length), k - n)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123446,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val i = min(k / 2, arr1.length).toInt\n        val j = min(k / 2, arr2.length).toInt\n        if (arr1(i - 1) < arr2(j - 1)) findKth(arr1.drop(i), arr2, k - i)\n        else findKth(arr1, arr2.drop(j), k - j)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) arr2(j.toInt + k.toInt - 1)\n            else if (j >= arr2.length) arr1(i.toInt + k.toInt - 1)\n            else if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo2av7zup.scala:21)\n\tat Problem.main(tmpo2av7zup.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (k == 1) {\n            min(arr1.head, arr2.head)\n        } else {\n            val m = min(arr1.length, arr2.length)\n            val n = max(arr1.length, arr2.length)\n            if (k <= m) {\n                if (arr1.length == m) findKth(arr1.tail, arr2, k - 1)\n                else findKth(arr1, arr2.tail, k - 1)\n            } else {\n                if (arr1.length == m) findKth(arr1, arr2.tail, k - 1)\n                else findKth(arr1.tail, arr2, k - 1)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7x23azzw.scala:21)\n\tat Problem.main(tmp7x23azzw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.size == 0) return arr2(k.toInt - 1)\n        if (arr2.size == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.size, k / 2)\n        val mid2 = min(arr2.size, k / 2)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123451,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpre5289yi.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpre5289yi.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpre5289yi.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpre5289yi.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        var k1 = min(k / 2, arr1.length - 1)\n        var k2 = min(k / 2, arr2.length - 1)\n        if (arr1(k1) < arr2(k2)) {\n            findKth(arr1.slice(k1 + 1, arr1.length), arr2, k - k1 - 1)\n        } else {\n            findKth(arr1, arr2.slice(k2 + 1, arr2.length), k - k2 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4jp9u5vi.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(k1) < arr2(k2)) {\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (k1 : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4jp9u5vi.scala:11:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(k1) < arr2(k2)) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (k2 : Long)\n\u001b[31m   |\u001b[0m                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4jp9u5vi.scala:12:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            findKth(arr1.slice(k1 + \u001b[31m1\u001b[0m, arr1.length), arr2, k - k1 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4jp9u5vi.scala:14:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            findKth(arr1, arr2.slice(k2 + \u001b[31m1\u001b[0m, arr2.length), k - k2 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    Long\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val a = min(arr1.length, (k / 2).toInt)\n        val b = min(arr2.length, (k / 2).toInt)\n        if (arr1(a - 1) < arr2(b - 1)) findKth(arr1.slice(a, arr1.length), arr2, k - a)\n        else findKth(arr1, arr2.slice(b, arr2.length), k - b)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length)\n        val k2 = min(k / 2, arr2.length)\n        if (arr1(k1.toInt - 1) < arr2(k2.toInt - 1)) findKth(arr1.slice(k1.toInt, arr1.length), arr2, k - k1)\n        else findKth(arr1, arr2.slice(k2.toInt, arr2.length), k - k2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1.toInt), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2.toInt), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpowggfzc0.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1.toInt), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpowggfzc0.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1.toInt), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo2av7zup.scala:21)\n\tat Problem.main(tmpo2av7zup.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val i = min(arr1.length, (k / 2).toInt)\n        val j = min(arr2.length, (k / 2).toInt)\n        if (arr1(i - 1) > arr2(j - 1)) findKth(arr1, arr2.slice(j, arr2.length), k - j)\n        else findKth(arr1.slice(i, arr1.length), arr2, k - i)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc2zhoh8_.scala:21)\n\tat Problem.main(tmpc2zhoh8_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1.head, arr2.head)\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) > arr2(mid2 - 1)) findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        else findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (mid1 + mid2 < k) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n            else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1, arr2.slice(0, mid2), k)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.findKth(tmpr92wv2tw.scala:7)\n\tat Problem$.main(tmpr92wv2tw.scala:22)\n\tat Problem.main(tmpr92wv2tw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (mid1 + mid2 < k) {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n            else {\n                if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1, arr2.slice(0, mid2), k)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.findKth(tmpr92wv2tw.scala:7)\n\tat Problem$.main(tmpr92wv2tw.scala:22)\n\tat Problem.main(tmpr92wv2tw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph8v5vmzm.scala:20)\n\tat Problem.main(tmph8v5vmzm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length - 1, (k / 2).toInt)\n        val mid2 = min(arr2.length - 1, (k / 2).toInt)\n        if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9b7jgcvt.scala:15)\n\tat Problem.main(tmp9b7jgcvt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo2av7zup.scala:21)\n\tat Problem.main(tmpo2av7zup.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i == arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j == arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + (k / 2).toInt - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + (k / 2).toInt - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:71 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:12:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length - 1, (k / 2).toInt)\n        val mid2 = min(arr2.length - 1, (k / 2).toInt)\n        if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9b7jgcvt.scala:15)\n\tat Problem.main(tmp9b7jgcvt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.size / 2\n        val mid2 = arr2.size / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdr6tk5ke.scala:20)\n\tat Problem.main(tmpdr6tk5ke.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1.head, arr2.head)\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuzvwe4r1.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuzvwe4r1.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuzvwe4r1.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuzvwe4r1.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc2zhoh8_.scala:21)\n\tat Problem.main(tmpc2zhoh8_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.size == 0) return arr2(k.toInt - 1)\n        if (arr2.size == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.size)\n        val mid2 = min(k / 2, arr2.size)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.size), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.size), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiqxno5qy.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.size), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiqxno5qy.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.size), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiqxno5qy.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.size), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiqxno5qy.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.size), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (k == 1) min(arr1.head, arr2.head)\n        else {\n            val m = min(arr1.length, arr2.length)\n            val n = min(k / 2, m)\n            if (arr1(n - 1) < arr2(n - 1)) findKth(arr1.drop(n), arr2, k - n)\n            else findKth(arr1, arr2.drop(n), k - n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123440,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4mc_ow9i.scala:10:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(n - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(n), arr2, k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Long\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4mc_ow9i.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(n - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(n), arr2, k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4mc_ow9i.scala:10:61 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(n - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(n), arr2, k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4mc_ow9i.scala:11:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(n), k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) > arr2(mid2 - 1)) {\n            findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        } else {\n            findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1iihs5qq.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) > arr2(mid2 - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1iihs5qq.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) > arr2(mid2 - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1iihs5qq.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1iihs5qq.scala:14:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val a = arr1(min(k.toInt / 2, arr1.length - 1).toInt)\n        val b = arr2(min(k.toInt / 2, arr2.length - 1).toInt)\n        if (a < b) findKth(arr1.drop(min(k.toInt / 2, arr1.length - 1).toInt), arr2, k - min(k.toInt / 2, arr1.length - 1))\n        else findKth(arr1, arr2.drop(min(k.toInt / 2, arr2.length - 1).toInt), k - min(k.toInt / 2, arr2.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123456,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:71 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:12:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:71 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:12:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplbx0injy.scala:21)\n\tat Problem.main(tmplbx0injy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (arr2.length == 0) arr1(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val mid1 = arr1.length / 2\n            val mid2 = arr2.length / 2\n            if (arr1(mid1) <= arr2(mid2)) {\n                if (k <= mid1 + mid2 + 1) findKth(arr1.slice(0, mid1), arr2, k)\n                else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n            }\n            else {\n                if (k <= mid1 + mid2 + 1) findKth(arr1, arr2.slice(0, mid2), k)\n                else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqtm9_wx.scala:23)\n\tat Problem.main(tmpkqtm9_wx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) > arr2(mid2 - 1)) return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        else return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplbx0injy.scala:21)\n\tat Problem.main(tmplbx0injy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) {\n            findKth(arr1.drop(mid1), arr2, k - mid1)\n        } else {\n            findKth(arr1, arr2.drop(mid2), k - mid2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.size == 0) return arr2(k.toInt)\n        if (arr2.size == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.size / 2\n        val mid2 = arr2.size / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.size), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.size), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptqsz9l_a.scala:21)\n\tat Problem.main(tmptqsz9l_a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, k / 2)\n        val n = min(arr2.length, k / 2)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n        else findKth(arr1, arr2.slice(n, arr2.length), k - n)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpep8olnxa.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpep8olnxa.scala:11:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpep8olnxa.scala:11:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (m : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpep8olnxa.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(n, arr2.length), k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length)\n        val k2 = min(k / 2, arr2.length)\n        if (arr1(k1.toInt - 1) < arr2(k2.toInt - 1)) findKth(arr1.drop(k1.toInt), arr2, k - k1)\n        else findKth(arr1, arr2.drop(k2.toInt), k - k2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnct66bpq.scala:21)\n\tat Problem.main(tmpnct66bpq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123452,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplbx0injy.scala:21)\n\tat Problem.main(tmplbx0injy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length)\n        val k2 = min(k / 2, arr2.length)\n        if (arr1(k1.toInt - 1) < arr2(k2.toInt - 1)) findKth(arr1.slice(k1.toInt, arr1.length), arr2, k - k1)\n        else findKth(arr1, arr2.slice(k2.toInt, arr2.length), k - k2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        var i = 0\n        var j = 0\n        var kth = 0L\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1(i) < arr2(j)) {\n                kth = arr1(i)\n                i += 1\n            } else {\n                kth = arr2(j)\n                j += 1\n            }\n            if (i + j == k) return kth\n        }\n        if (i < arr1.length) kth = arr1(i + k - j - 1)\n        else kth = arr2(j + k - i - 1)\n        kth\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq6b3fomq.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mif\u001b[0m (i < arr1.length) kth = arr1(i + k - j - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq6b3fomq.scala:20:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33melse\u001b[0m kth = arr2(j + k - i - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    Long\n\u001b[31m   |\u001b[0m                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val n = arr1.length\n            val m = arr2.length\n            val i = min(k / 2, n).toInt\n            val j = min(k / 2, m).toInt\n            if (arr1(i - 1) < arr2(j - 1)) findKth(arr1.slice(i, n), arr2, k - i)\n            else findKth(arr1, arr2.slice(j, m), k - j)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1(arr1.length / 2)\n        val mid2 = arr2(arr2.length / 2)\n        if (mid1 < mid2) {\n            if (k <= arr1.length / 2 + arr2.length / 2) findKth(arr1.slice(0, arr1.length / 2 + 1), arr2, k)\n            else findKth(arr1, arr2.slice(arr2.length / 2 + 1, arr2.length), k - arr2.length / 2 - 1)\n        } else {\n            if (k <= arr1.length / 2 + arr2.length / 2) findKth(arr1, arr2.slice(0, arr2.length / 2 + 1), k)\n            else findKth(arr1.slice(arr1.length / 2 + 1, arr1.length), arr2, k - arr1.length / 2 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123457,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptx76bkd4.scala:20)\n\tat Problem.main(tmptx76bkd4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val a = arr1.length\n        val b = arr2.length\n        val mid1 = min(a - 1, (k / 2).toInt)\n        val mid2 = min(b - 1, (k / 2).toInt)\n        if (arr1(mid1) < arr2(mid2)) findKth(arr1.slice(mid1 + 1, a), arr2, k - mid1 - 1)\n        else findKth(arr1, arr2.slice(mid2 + 1, b), k - mid2 - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpquh_f0nu.scala:17)\n\tat Problem.main(tmpquh_f0nu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc2zhoh8_.scala:21)\n\tat Problem.main(tmpc2zhoh8_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo2av7zup.scala:21)\n\tat Problem.main(tmpo2av7zup.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, k / 2)\n        val n = min(arr2.length, k / 2)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n        else findKth(arr1, arr2.slice(n, arr2.length), k - n)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123463,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvv0h5pt1.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvv0h5pt1.scala:11:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvv0h5pt1.scala:11:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.slice(m, arr1.length), arr2, k - m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (m : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvv0h5pt1.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(n, arr2.length), k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0532qoej.scala:20)\n\tat Problem.main(tmp0532qoej.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) {\n            findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        } else {\n            findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8u1gil9q.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8u1gil9q.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8u1gil9q.scala:12:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8u1gil9q.scala:14:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) arr2(k.toInt - 1)\n        else if (arr2.isEmpty) arr1(k.toInt - 1)\n        else {\n            val m = arr1.length / 2\n            val n = arr2.length / 2\n            if (m + n < k) {\n                if (arr1(m) > arr2(n)) findKth(arr1, arr2.drop(n + 1), k - n - 1)\n                else findKth(arr1.drop(m + 1), arr2, k - m - 1)\n            }\n            else {\n                if (arr1(m) > arr2(n)) findKth(arr1.take(m), arr2, k)\n                else findKth(arr1, arr2.take(n), k)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123464,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.findKth(tmp3jj1lbvl.scala:7)\n\tat Problem$.main(tmp3jj1lbvl.scala:22)\n\tat Problem.main(tmp3jj1lbvl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (k == 1) {\n            min(arr1.head, arr2.head)\n        } else {\n            val m = min(arr1.length, arr2.length)\n            val n = min(k / 2, m)\n            if (arr1(n - 1) < arr2(n - 1)) findKth(arr1.drop(n), arr2, k - n)\n            else findKth(arr1, arr2.drop(n), k - n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123464,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetxqtzvm.scala:11:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(n - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(n), arr2, k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Long\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetxqtzvm.scala:11:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(n - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(n), arr2, k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetxqtzvm.scala:11:61 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mif\u001b[0m (arr1(n - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(n), arr2, k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetxqtzvm.scala:12:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(n), k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKthRec(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n            if (arr1.length > arr2.length) findKthRec(arr2, arr1, k)\n            else if (arr1.length == 0) arr2(k.toInt - 1)\n            else if (k == 1) min(arr1(0), arr2(0))\n            else {\n                val i = min(k / 2, arr1.length).toInt\n                val j = min(k / 2, arr2.length).toInt\n                if (arr1(i - 1) < arr2(j - 1)) findKthRec(arr1.drop(i), arr2, k - i)\n                else findKthRec(arr1, arr2.drop(j), k - j)\n            }\n        }\n        findKthRec(arr1, arr2, k)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1(min(k / 2, arr1.length - 1).toInt)\n        val mid2 = arr2(min(k / 2, arr2.length - 1).toInt)\n        if (mid1 < mid2) findKth(arr1.drop(min(k / 2, arr1.length - 1).toInt), arr2, k - min(k / 2, arr1.length - 1))\n        else findKth(arr1, arr2.drop(min(k / 2, arr2.length - 1).toInt), k - min(k / 2, arr2.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123467,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc2zhoh8_.scala:21)\n\tat Problem.main(tmpc2zhoh8_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:71 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:12:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length > arr2.length) findKth(arr2, arr1, k)\n        else if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val i = min(k / 2, arr1.length).toInt\n            val j = min(k / 2, arr2.length).toInt\n            if (arr1(i - 1) > arr2(j - 1)) findKth(arr1, arr2.slice(j, arr2.length), k - j)\n            else findKth(arr1.slice(i, arr1.length), arr2, k - i)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc2zhoh8_.scala:21)\n\tat Problem.main(tmpc2zhoh8_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) return arr2(j.toInt + k.toInt - 1)\n            if (j >= arr2.length) return arr1(i.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(i.toInt), arr2(j.toInt))\n            val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n            if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n            else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, k / 2)\n        val n = min(arr2.length, k / 2)\n        if (arr1(m - 1) < arr2(n - 1)) findKth(arr1.drop(m), arr2, k - m)\n        else findKth(arr1, arr2.drop(n), k - n)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123464,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo9e0xllt.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(m), arr2, k - m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo9e0xllt.scala:11:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(m), arr2, k - m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo9e0xllt.scala:11:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(m - \u001b[31m1\u001b[0m) < arr2(n - \u001b[31m1\u001b[0m)) findKth(arr1.drop(m), arr2, k - m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (m : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo9e0xllt.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(n), k - n)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) return findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else return findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:11:71 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) \u001b[33mreturn\u001b[0m findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe834qz49.scala:12:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mreturn\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123464,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.findKth(tmpqds8vlkc.scala:7)\n\tat Problem$.main(tmpqds8vlkc.scala:19)\n\tat Problem.main(tmpqds8vlkc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) arr2(j.toInt + k.toInt - 1)\n            else if (j >= arr2.length) arr1(i.toInt + k.toInt - 1)\n            else if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + (k / 2).toInt - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + (k / 2).toInt - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, start1 : Long, start2 : Long) : Long = {\n            if (start1 >= arr1.length) return arr2(start2.toInt + k.toInt - 1)\n            if (start2 >= arr2.length) return arr1(start1.toInt + k.toInt - 1)\n            if (k == 1) return min(arr1(start1.toInt), arr2(start2.toInt))\n            val mid1 = min(start1 + k / 2, arr1.length) - 1\n            val mid2 = min(start2 + k / 2, arr2.length) - 1\n            if (arr1(mid1.toInt) <= arr2(mid2.toInt)) findKth(arr1, arr2, k - (mid1 - start1 + 1), mid1 + 1, start2)\n            else findKth(arr1, arr2, k - (mid2 - start2 + 1), start1, mid2 + 1)\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (i >= arr1.length) arr2(j.toInt + k.toInt - 1)\n            else if (j >= arr2.length) arr1(i.toInt + k.toInt - 1)\n            else if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val m = k / 2\n                val mid1 = if (i + m - 1 < arr1.length) arr1(i.toInt + m.toInt - 1) else Long.MaxValue\n                val mid2 = if (j + m - 1 < arr2.length) arr2(j.toInt + m.toInt - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - m, i + m, j)\n                else findKth(arr1, arr2, k - m, i, j + m)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2 + 1) return findKth(arr1.slice(0, mid1), arr2, k)\n            else return findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2 + 1) return findKth(arr1, arr2.slice(0, mid2), k)\n            else return findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxjako29x.scala:20)\n\tat Problem.main(tmpxjako29x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1.head, arr2.head)\n        val mid1 = arr1.size / 2\n        val mid2 = arr2.size / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpts90ewv9.scala:21)\n\tat Problem.main(tmpts90ewv9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2) return findKth(arr1.slice(0, mid1), arr2, k)\n            else return findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2) return findKth(arr1, arr2.slice(0, mid2), k)\n            else return findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7ioe5ohi.scala:20)\n\tat Problem.main(tmp7ioe5ohi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val a = arr1(min(k.toInt / 2, arr1.length - 1).toInt)\n        val b = arr2(min(k.toInt / 2, arr2.length - 1).toInt)\n        if (a < b) findKth(arr1.drop(min(k.toInt / 2, arr1.length - 1).toInt), arr2, k - min(k.toInt / 2, arr1.length - 1))\n        else findKth(arr1, arr2.drop(min(k.toInt / 2, arr2.length - 1).toInt), k - min(k.toInt / 2, arr2.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123456,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, i : Long, j : Long) : Long = {\n            if (k == 1) min(arr1(i.toInt), arr2(j.toInt))\n            else {\n                val mid1 = if (i + k / 2 - 1 < arr1.length) arr1(i.toInt + k.toInt / 2 - 1) else Long.MaxValue\n                val mid2 = if (j + k / 2 - 1 < arr2.length) arr2(j.toInt + k.toInt / 2 - 1) else Long.MaxValue\n                if (mid1 < mid2) findKth(arr1, arr2, k - k / 2, i + k / 2, j)\n                else findKth(arr1, arr2, k - k / 2, i, j + k / 2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val k1 = min(k / 2, arr1.length)\n        val k2 = min(k / 2, arr2.length)\n        if (arr1(k1.toInt - 1) < arr2(k2.toInt - 1)) findKth(arr1.slice(k1.toInt, arr1.length), arr2, k - k1)\n        else findKth(arr1, arr2.slice(k2.toInt, arr2.length), k - k2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = (arr1.length - 1) / 2\n        val mid2 = (arr2.length - 1) / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpose05k6i.scala:21)\n\tat Problem.main(tmpose05k6i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val i = min(arr1.length - 1, k / 2)\n        val j = min(arr2.length - 1, k / 2)\n        if (arr1(i) < arr2(j)) findKth(arr1.slice(i + 1, arr1.length), arr2, k - i - 1)\n        else findKth(arr1, arr2.slice(j + 1, arr2.length), k - j - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw89ek1q.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(i) < arr2(j)) findKth(arr1.slice(i + \u001b[31m1\u001b[0m, arr1.length), arr2, k - i - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (i : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw89ek1q.scala:11:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(i) < arr2(j)) findKth(arr1.slice(i + \u001b[31m1\u001b[0m, arr1.length), arr2, k - i - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (j : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw89ek1q.scala:11:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(i) < arr2(j)) findKth(arr1.slice(i + \u001b[31m1\u001b[0m, arr1.length), arr2, k - i - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    Long\n\u001b[31m   |\u001b[0m                                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplw89ek1q.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(j + \u001b[31m1\u001b[0m, arr2.length), k - j - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length > arr2.length) findKth(arr2, arr1, k)\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val i = min(k / 2, arr1.length).toInt\n        val j = (k - i).toInt\n        if (arr1(i - 1) > arr2(j - 1)) findKth(arr1, arr2.slice(j, arr2.length), k - j)\n        else findKth(arr1.slice(i, arr1.length), arr2, k - i)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) {\n            findKth(arr1.drop(mid1), arr2, k - mid1)\n        } else {\n            findKth(arr1, arr2.drop(mid2), k - mid2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzp6_ze7.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzp6_ze7.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzp6_ze7.scala:12:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzp6_ze7.scala:14:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length > arr2.length) findKth(arr2, arr1, k)\n        else if (arr1.length == 0) arr2(k.toInt - 1)\n        else if (k == 1) min(arr1(0), arr2(0))\n        else {\n            val i = min(k / 2, arr1.length).toInt\n            val j = min(k / 2, arr2.length).toInt\n            if (arr1(i - 1) > arr2(j - 1)) findKth(arr1, arr2.drop(j), k - j)\n            else findKth(arr1.drop(i), arr2, k - i)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1.head, arr2.head)\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (arr1(mid1) <= arr2(mid2)) {\n            if (k <= mid1 + mid2 + 1) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n        } else {\n            if (k <= mid1 + mid2 + 1) findKth(arr1, arr2.slice(0, mid2), k)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpje780bsm.scala:20)\n\tat Problem.main(tmpje780bsm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        def findKth(arr1 : List[Long], arr2 : List[Long], k : Long, start1 : Int, end1 : Int, start2 : Int, end2 : Int) : Long = {\n            if (start1 > end1) return arr2(start2 + k.toInt - 1)\n            if (start2 > end2) return arr1(start1 + k.toInt - 1)\n            val mid1 = (start1 + end1) / 2\n            val mid2 = (start2 + end2) / 2\n            if (arr1(mid1) <= arr2(mid2)) {\n                if (k <= (mid1 - start1) + (mid2 - start2) + 1) findKth(arr1, arr2, k, start1, end1, start2, mid2 - 1)\n                else findKth(arr1, arr2, k - (mid2 - start2) - 1, mid1 + 1, end1, start2, end2)\n            } else {\n                if (k <= (mid1 - start1) + (mid2 - start2) + 1) findKth(arr1, arr2, k, start1, mid1 - 1, start2, end2)\n                else findKth(arr1, arr2, k - (mid1 - start1) - 1, start1, end1, mid2 + 1, end2)\n            }\n        }\n        findKth(arr1, arr2, k, 0, arr1.length - 1, 0, arr2.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpci8psycl.scala:22)\n\tat Problem.main(tmpci8psycl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length - 1)\n        val mid2 = min(k / 2, arr2.length - 1)\n        if (arr1(mid1) < arr2(mid2)) findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        else findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123467,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplkp6hmyk.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1) < arr2(mid2)) findKth(arr1.slice(mid1 + \u001b[31m1\u001b[0m, arr1.length), arr2, k - mid1 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplkp6hmyk.scala:11:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1) < arr2(mid2)) findKth(arr1.slice(mid1 + \u001b[31m1\u001b[0m, arr1.length), arr2, k - mid1 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplkp6hmyk.scala:11:56 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1) < arr2(mid2)) findKth(arr1.slice(mid1 + \u001b[31m1\u001b[0m, arr1.length), arr2, k - mid1 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Found:    Long\n\u001b[31m   |\u001b[0m                                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplkp6hmyk.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2 + \u001b[31m1\u001b[0m, arr2.length), k - mid2 - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling wit",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt)\n        if (arr2.length == 0) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.drop(mid2 + 1), k - mid2 - 1)\n            else findKth(arr1.drop(mid1 + 1), arr2, k - mid1 - 1)\n        }\n        else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.take(mid1), arr2, k)\n            else findKth(arr1, arr2.take(mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc2zhoh8_.scala:21)\n\tat Problem.main(tmpc2zhoh8_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(arr1.length, (k / 2).toInt)\n        val mid2 = min(arr2.length, (k / 2).toInt)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt)\n        if (arr2.isEmpty) return arr1(k.toInt)\n        if (k == 0) return min(arr1(0), arr2(0))\n        val mid1 = arr1.length / 2\n        val mid2 = arr2.length / 2\n        if (mid1 + mid2 < k) {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1, arr2.slice(mid2 + 1, arr2.length), k - mid2 - 1)\n            else findKth(arr1.slice(mid1 + 1, arr1.length), arr2, k - mid1 - 1)\n        } else {\n            if (arr1(mid1) > arr2(mid2)) findKth(arr1.slice(0, mid1), arr2, k)\n            else findKth(arr1, arr2.slice(0, mid2), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8e1bfm8u.scala:20)\n\tat Problem.main(tmp8e1bfm8u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val m = min(arr1.length, (k / 2).toInt)\n        val n = min(arr2.length, (k / 2).toInt)\n        if (arr1(m - 1) < arr2(n - 1)) return findKth(arr1.slice(m, arr1.length), arr2, k - m)\n        else return findKth(arr1, arr2.slice(n, arr2.length), k - n)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.isEmpty) return arr2(k.toInt - 1)\n        if (arr2.isEmpty) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9vdwhwo.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.drop(mid1), arr2, k - mid1)\n        else findKth(arr1, arr2.drop(mid2), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:11:63 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.drop(mid1), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmknw4na9.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.drop(mid2), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        if (arr1.length == 0) return arr2(k.toInt - 1)\n        if (arr2.length == 0) return arr1(k.toInt - 1)\n        if (k == 1) return min(arr1(0), arr2(0))\n        val mid1 = min(k / 2, arr1.length)\n        val mid2 = min(k / 2, arr2.length)\n        if (arr1(mid1 - 1) < arr2(mid2 - 1)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n        else findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    Long\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:11:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (arr1(mid1 - \u001b[31m1\u001b[0m) < arr2(mid2 - \u001b[31m1\u001b[0m)) findKth(arr1.slice(mid1, arr1.length), arr2, k - mid1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (mid1 : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcedz344e.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33melse\u001b[0m findKth(arr1, arr2.slice(mid2, arr2.length), k - mid2)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (mid2 : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 error",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}