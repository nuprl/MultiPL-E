{
  "name": "mbpp_598_armstrong_number",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val digits = number.toString.map(_.asDigit)\n        val length = digits.length\n        val sum = digits.map(pow(_, length)).sum\n        sum == number",
    "        var n = number\n        var sum = 0\n        while (n > 0) {\n            val d = n % 10\n            sum += pow(d, 3).toLong\n            n /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var n = number\n        var sum = 0\n        while (n > 0) {\n            val d = n % 10\n            sum += pow(d, 3).toInt\n            n /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val n = digits.length\n        digits.map(pow(_, n)).sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var n = number\n        while (n != 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val len = digits.length\n        val sum = digits.map(pow(_, len)).sum\n        sum == number",
    "        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = digits :+ (n % 10).toInt\n            n = n / 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power)).sum\n        sum == number",
    "        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = digits :+ (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        var sum = 0L\n        var number2 = number\n        while (number2 != 0) {\n            sum += pow(number2 % 10, 3).toLong\n            number2 /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val n = digits.length\n        val sum = digits.map(pow(_, n)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (i <- digits) {\n            sum += pow(i, digits.length).toInt\n        }\n        return sum == number",
    "        var n = number\n        var digits = ListBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp != 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            val d = n % 10\n            sum += d * d * d\n            n /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var digits = new ArrayBuffer[Int]\n        var n = number\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        sum == number",
    "        var sum = 0L\n        var n = number\n        while (n != 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.size).toLong\n        }\n        return sum == number",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (i <- 0 until digits.length) {\n            sum += pow(digits(i), digits.length).toLong\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.toString.toInt)\n        val sum = digits.map(pow(_, digits.length)).sum\n        number == sum",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.foldLeft(0)((acc, digit) => acc + pow(digit, digits.length).toLong)\n        sum == number",
    "        val digits = number.toString.map(_.toString.toInt).toList\n        val length = digits.length\n        val sum = digits.map(pow(_, length)).sum\n        sum == number",
    "        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = (n % 10).toInt :: digits\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) sum += pow(digit, digits.length).toInt\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(x => pow(x, digits.length)).sum\n        sum == number",
    "        var sum = 0\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toInt\n            temp /= 10\n        }\n        return sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var digits = new ArrayBuffer[Int]()\n        var temp = number\n        while (temp > 0) {\n            digits += (temp % 10).toInt\n            temp /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var digits = number.toString.toList.map(_.asDigit)\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.foldLeft(0)((sum, digit) => sum + pow(digit, digits.length).toInt)\n        sum == number",
    "        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = digits :+ (n % 10).toInt\n            n = n / 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp != 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var sum = 0L\n        var n = number\n        while (n != 0) {\n            val d = n % 10\n            sum += d * d * d\n            n /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        number == sum",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var number1 = number\n        while (number1 > 0) {\n            sum += pow(number1 % 10, 3).toLong\n            number1 /= 10\n        }\n        sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        var digits = number.toString.map(_.toInt - '0')\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (i <- digits) {\n            sum += pow(i, digits.length).toInt\n        }\n        return sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp != 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number",
    "        var digits = new ArrayBuffer[Int]()\n        var n = number\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        val sum = digits.map(x => pow(x, digits.length)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.size)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(x => pow(x, digits.length)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(x => pow(x, power)).sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (i <- 0 until digits.length) {\n            sum += pow(digits(i), digits.length).toLong\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            val digit = temp % 10\n            sum += digit * digit * digit\n            temp /= 10\n        }\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp != 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var n = digits.length\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, n).toLong\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var digits = new ArrayBuffer[Int]()\n        var n = number\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (i <- 0 until digits.length) {\n            sum += pow(digits(i), digits.length).toInt\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val sum = digits.map(x => pow(x, digits.length).toLong).sum\n        sum == number",
    "        val digits = number.toString.map(_.toString.toInt)\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        number == digits.map(pow(_, power)).sum",
    "        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = (n % 10).toInt :: digits\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        sum == number",
    "        var n = number\n        var sum = 0\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toLong\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = digits :+ (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        var digits = new ArrayBuffer[Int]()\n        var n = number\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var digits = new ArrayBuffer[Int]()\n        var n = number\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (i <- 0 until digits.length) {\n            sum += pow(digits(i), digits.length).toInt\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val length = digits.length\n        val sum = digits.map(pow(_, length)).sum\n        return sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toLong\n        }\n        return sum == number",
    "        var n = number\n        var sum = 0\n        while (n > 0) {\n            val digit = n % 10\n            sum += pow(digit, 3).toLong\n            n /= 10\n        }\n        sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power).toLong).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        number == sum",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val n = digits.length\n        val sum = digits.map(pow(_, n)).sum\n        sum == number",
    "        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = digits :+ (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        var n = number\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = digits :+ (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val power = digits.length\n        number == digits.map(pow(_, power)).sum",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            val digit = n % 10\n            sum += digit * digit * digit\n            n /= 10\n        }\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.toString.toInt)\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (i <- digits) {\n            sum += pow(i, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(pow(_, digits.length)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        return sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        digits.map(pow(_, power)).sum == number",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            val digit = temp % 10\n            sum += pow(digit, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toLong\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp != 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit)\n        val length = digits.length\n        val sum = digits.map(pow(_, length).toLong).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp != 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val length = digits.length\n        val sum = digits.map(pow(_, length)).sum\n        sum == number",
    "        var sum = 0L\n        var num = number\n        while (num > 0) {\n            val digit = num % 10\n            sum += digit * digit * digit\n            num /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val len = digits.length\n        digits.map(pow(_, len)).sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toLong\n        }\n        return sum == number",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var digits = number.toString.map(_.asDigit).toList\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toLong\n        }\n        return sum == number",
    "        var n = number\n        var sum = 0\n        var digits = 0\n        while (n != 0) {\n            digits += 1\n            n /= 10\n        }\n        n = number\n        while (n != 0) {\n            sum += pow(n % 10, digits).toLong\n            n /= 10\n        }\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var n = number\n        var digits = new ArrayBuffer[Int]\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var sum = 0\n        for (digit <- digits) {\n            sum += pow(digit, digits.length).toInt\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp != 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val sum = digits.map(x => pow(x, digits.length)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val n = digits.length\n        digits.map(x => pow(x, n)).sum == number",
    "        val digits = number.toString.map(x => x.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(x => pow(x, power)).sum\n        sum == number",
    "        var temp = number\n        var sum = 0\n        var length = 0\n        while (temp > 0) {\n            length += 1\n            temp /= 10\n        }\n        temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, length).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        var sum = 0L\n        var n = number\n        while (n > 0) {\n            sum += pow(n % 10, 3).toLong\n            n /= 10\n        }\n        sum == number",
    "        var sum = 0L\n        var temp = number\n        while (temp > 0) {\n            sum += pow(temp % 10, 3).toLong\n            temp /= 10\n        }\n        return sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number",
    "        val digits = number.toString.map(_.asDigit).toList\n        val power = digits.length\n        val sum = digits.map(pow(_, power)).sum\n        sum == number"
  ]
}