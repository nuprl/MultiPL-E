{
  "name": "mbpp_593_removezero_ip",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 to s.length - 1) {\n            val num = s(i).toInt\n            if (num == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(num.toString)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                if (i == ipArray.length - 1) result.append(num)\n                else result.append(num + \".\")\n            }\n            else {\n                result.append(num)\n                if (i != ipArray.length - 1) result.append(\".\")\n            }\n        }\n        result.toString",
    "        var result = \"\"\n        var i = 0\n        while (i < ip.length) {\n            if (ip(i) == '0') {\n                i += 1\n                while (i < ip.length && ip(i) == '0') i += 1\n            }\n            if (i < ip.length) result += ip(i)\n            i += 1\n        }\n        result",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n == 0) {\n                if (sb.length > 0) sb.append(\".\")\n                sb.append(\"0\")\n            } else {\n                sb.append(n)\n                if (i < s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString",
    "        val ipArr = ip.split(\"\\\\.\")\n        val newIpArr = ipArr.map(x => x.toInt)\n        val newIp = newIpArr.map(x => x.toString).mkString(\".\")\n        newIp",
    "        val iparr = ip.split(\"\\\\.\")\n        val newiparr = iparr.map(x => x.toInt.toString)\n        newiparr.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val result = new StringBuilder\n        for (i <- 0 until ipArray.length) {\n            val num = ipArray(i).toInt\n            if (num == 0) {\n                if (i == 0) result.append(num)\n                else result.append(\".\" + num)\n            }\n            else {\n                if (i == 0) result.append(num)\n                else result.append(\".\" + num)\n            }\n        }\n        result.toString",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n != 0) {\n                sb.append(n)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString",
    "        val s = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            val n = s(i).toInt\n            if (n == 0) {\n                sb.append(\"0\")\n            } else {\n                sb.append(n)\n                if (i != s.length - 1) sb.append(\".\")\n            }\n        }\n        sb.toString",
    "        val ipList = ip.split(\"\\\\.\")\n        val newIpList = ipList.map(x => x.toInt.toString)\n        newIpList.mkString(\".\")",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        ipArray4",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => if (x == 0) \"\" else x.toString)\n        val ipArray4 = ipArray3.mkString(\".\")\n        return ipArray4",
    "        val ipArray = ip.split(\"\\\\.\")\n        ipArray.map(x => x.toInt).mkString(\".\")",
    "        var result = \"\"\n        var count = 0\n        for (i <- 0 until ip.length) {\n            if (ip(i) == '0') {\n                count += 1\n            } else {\n                result += ip.substring(i)\n                return result\n            }\n        }\n        return result",
    "        val ips = ip.split(\"\\\\.\")\n        val sb = new StringBuilder\n        for (i <- 0 until ips.length) {\n            sb.append(ips(i).toInt)\n            if (i != ips.length - 1) sb.append(\".\")\n        }\n        sb.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val newIpArray = ipArray.map(x => x.toInt.toString)\n        newIpArray.mkString(\".\")",
    "        val arr = ip.split(\"\\\\.\")\n        val res = new StringBuilder\n        for (i <- 0 to 3) {\n            val num = arr(i).toInt\n            if (num == 0) {\n                res.append(\"0\")\n            } else {\n                res.append(num)\n            }\n            if (i != 3) res.append(\".\")\n        }\n        res.toString",
    "        val ipArray = ip.split(\"\\\\.\")\n        val ipArray2 = ipArray.map(x => x.toInt)\n        val ipArray3 = ipArray2.map(x => x.toString)\n        val ipArray4 = ipArray3.map(x => x.replaceFirst(\"^0+(?!$)\", \"\"))\n        val ipArray5 = ipArray4.mkString(\".\")\n        ipArray5"
  ]
}