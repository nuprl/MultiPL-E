{
  "name": "mbpp_759_is_decimal",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(0).length > 0 && parts(1).length == 2) {\n                    for (i <- 0 until parts(0).length) {\n                        if (!Character.isDigit(parts(0)(i))) return false\n                    }\n                    for (i <- 0 until parts(1).length) {\n                        if (!Character.isDigit(parts(1)(i))) return false\n                    }\n                    return true\n                }\n            }\n        }\n        false",
    "        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        parts(0).toInt\n                        parts(1).toInt\n                        return true\n                    } catch {\n                        case e : Exception => return false\n                    }\n                }\n            }\n        }\n        return false",
    "        val pattern = \"^\\\\d+\\\\.\\\\d{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        regex.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        if (num.contains('.')) {\n            val parts = num.split('.')\n            if (parts.length != 2) return false\n            if (parts(0).length > 0 && parts(0).forall(c => c >= '0' && c <= '9')) {\n                if (parts(1).length == 2 && parts(1).forall(c => c >= '0' && c <= '9')) return true\n            }\n        }\n        false",
    "        val regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        regex.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        if (num.length == 0) return false\n        if (num.length == 1) return num.charAt(0).isDigit\n        if (num.length == 2) return num.charAt(0).isDigit && num.charAt(1).isDigit\n        if (num.length == 3) return num.charAt(0).isDigit && num.charAt(1).isDigit && num.charAt(2) == '.'\n        if (num.length == 4) return num.charAt(0).isDigit && num.charAt(1).isDigit && num.charAt(2) == '.' && num.charAt(3).isDigit\n        if (num.length == 5) return num.charAt(0).isDigit && num.charAt(1).isDigit && num.charAt(2) == '.' && num.charAt(3).isDigit && num.charAt(4).isDigit\n        return false",
    "        if (num.length == 0) return false\n        val parts = num.split(\"\\\\.\")\n        if (parts.length > 2) return false\n        if (parts.length == 2) {\n            if (parts(1).length > 2) return false\n        }\n        for (i <- 0 until num.length) {\n            if (!(num(i) >= '0' && num(i) <= '9')) {\n                if (num(i) != '.') return false\n            }\n        }\n        true",
    "        if (num.length == 0) return false\n        val arr = num.split(\"\\\\.\")\n        if (arr.length == 1) return true\n        if (arr.length == 2) {\n            if (arr(1).length == 0) return false\n            if (arr(1).length > 2) return false\n            return true\n        }\n        return false",
    "        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        val n = num.toDouble\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false",
    "        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length != 2) return false\n            if (parts(0).length == 0) return false\n            if (parts(1).length != 2) return false\n            if (parts(0).forall(c => c.isDigit)) {\n                if (parts(1).forall(c => c.isDigit)) {\n                    return true\n                }\n            }\n        }\n        return false",
    "        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"[0-9]+(\\\\.[0-9]{1,2})?\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[+-]?[0-9]*\\\\.?[0-9]{0,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length > 0 && right.length == 2) {\n                    if (left.forall(c => c.isDigit) && right.forall(c => c.isDigit)) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false",
    "        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        if (num.length == 0) return false\n        var i = 0\n        var decimal = false\n        while (i < num.length) {\n            if (num(i) == '.') {\n                if (decimal) return false\n                decimal = true\n            }\n            else if (!num(i).isDigit) return false\n            i += 1\n        }\n        if (decimal && num.length - num.indexOf('.') - 1 > 2) return false\n        return true",
    "        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[-+]?[0-9]*\\\\.?[0-9]{0,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        if (num.length == 0) return false\n        val nums = num.split(\"\\\\.\")\n        if (nums.length > 2) return false\n        if (nums.length == 2) {\n            if (nums(1).length > 2) return false\n            if (nums(1).length == 0) return false\n        }\n        if (nums(0).length == 0) return false\n        for (i <- 0 until nums(0).length) {\n            if (!nums(0)(i).isDigit) return false\n        }\n        if (nums.length == 2) {\n            for (i <- 0 until nums(1).length) {\n                if (!nums(1)(i).isDigit) return false\n            }\n        }\n        true"
  ]
}