{
  "name": "mbpp_57_find_Max_Num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the largest number that can be formed with the given list of digits.\n    def findMaxNum(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (321l));\n    assert(findMaxNum((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (6541l));\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 9l.toLong))) == (9321l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val s = arr.sorted.reverse.mkString\n        s.toLong",
    "        val sorted = arr.sorted\n        val result = new StringBuilder\n        for (i <- sorted.length - 1 to 0 by -1) result.append(sorted(i))\n        result.toLong",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        max",
    "        val sorted = arr.sorted\n        val len = sorted.length\n        var max = sorted(len - 1)\n        for (i <- len - 2 to 0 by -1) {\n            if (sorted(i) != 0 && sorted(i) * pow(10, len - i - 1).toLong > max) {\n                max = sorted(i) * pow(10, len - i - 1).toLong + max\n            }\n        }\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = arr(i)\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    temp = temp * 10 + arr(j)\n                }\n            }\n            if (temp > maxNum) {\n                maxNum = temp\n            }\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > maxNum) maxNum = num\n        }\n        maxNum",
    "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        reversed.mkString.toLong",
    "        return 0",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        val result = reversed.mkString\n        result.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i + 1 to arr.length - 1) {\n                val num = arr(i) * pow(10, j - i).toLong + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- sorted.length - 1 to 0 by -1) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    val num = arr(i) * 10 + arr(j)\n                    if (num > maxNum) maxNum = num\n                }\n            }\n        }\n        maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            maxNum = max(maxNum, arr(i))\n        }\n        return maxNum",
    "        arr.sorted.reverse.foldLeft(\"\")(_ + _).toLong",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        val sorted = arr.sorted.reverse\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        max",
    "        val sorted = arr.sorted.reverse\n        sorted.foldLeft(\"\")((acc, x) => acc + x.toString).toLong",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.foldLeft(0L)((x, y) => x * 10 + y)",
    "        val sorted = arr.sortWith(_ > _)\n        val str = sorted.foldLeft(\"\")((acc, x) => acc + x.toString)\n        str.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                val num = arr(i).toString + arr(j).toString\n                if (num.toLong > max) max = num.toLong\n            }\n        }\n        return max",
    "        val sorted = arr.sorted.reverse\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                val num = arr(i).toString + arr(j).toString\n                if (num.toLong > max) max = num.toLong\n            }\n        }\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        val sorted = arr.sorted\n        val max = sorted.last\n        val min = sorted.head\n        if (max == min) return max\n        val maxDigits = max.toString.length\n        val minDigits = min.toString.length\n        val maxDigit = max.toString.charAt(0).toString.toLong\n        val minDigit = min.toString.charAt(0).toString.toLong\n        if (maxDigits == minDigits) return max\n        val maxDigitCount = sorted.count(_.toString.charAt(0).toString.toLong == maxDigit)\n        val minDigitCount = sorted.count(_.toString.charAt(0).toString.toLong == minDigit)\n        if (maxDigitCount > minDigitCount) {\n            val maxDigitList = sorted.filter(_.toString.charAt(0).toString.toLong == maxDigit)\n            val minDigitList = sorted.filter(_.toString.charAt(0).toString.toLong == minDigit)\n            val maxDigitListSorted = maxDigitList.sorted\n            val minDigitListSorted = minDigitList.sorted\n            val maxDigitListSortedReversed = maxDigitListSorted.reverse\n            val minDigitListSortedReversed = minDigitListSorted.reverse\n            val maxDigitListSortedReversedString = maxDigitListSortedReversed.map(_.toString).mkString(\"\")\n            val minDigitListSortedReversedString = minDigitListSortedReversed.map(_.toString).mkString(\"\")\n            val maxDigitListSortedReversedStringLong = maxDigitListSortedReversedString.toLong\n            val minDigitListSortedReversedStringLong = minDigitListSortedReversedString.toLong\n            val maxDigitListSortedReversedStringLongDigits = maxDigitListSortedReversedStringLong.toString.length\n            val minDigitListSortedReversedStringLongDigits = minDigitList",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * pow(10, (arr.length - j)).toLong + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = 0L\n            for (j <- i until arr.length) {\n                temp = temp * 10 + arr(j)\n                if (temp > maxNum) maxNum = temp\n            }\n        }\n        maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) < arr(j)) {\n                    var temp = arr(i)\n                    arr(i) = arr(j)\n                    arr(j) = temp\n                }\n            }\n        }\n        for (i <- 0 until arr.length) {\n            maxNum = maxNum * 10 + arr(i)\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            maxNum = max(maxNum, arr(i))\n        }\n        maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        max",
    "        // Write your code here\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    var num = arr(i).toString + arr(j).toString\n                    if (num.toLong > max) max = num.toLong\n                }\n            }\n        }\n        return max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * 10 + arr(j)\n                if (num > maxNum) maxNum = num\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sortWith(_ > _).mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    var num = arr(i) * 10 + arr(j)\n                    if (num > maxNum) maxNum = num\n                }\n            }\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sortedArr = arr.sortWith(_ > _)\n        val maxNum = sortedArr.foldLeft(0L)((a, b) => a * 10 + b)\n        return maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                val num = arr(i).toString + arr(j).toString\n                if (num.toLong > max) max = num.toLong\n            }\n        }\n        max",
    "        val sorted = arr.sorted\n        val max = sorted.last\n        val maxIndex = sorted.indexOf(max)\n        val left = sorted.slice(0, maxIndex)\n        val right = sorted.slice(maxIndex + 1, sorted.length)\n        val leftSorted = left.sorted.reverse\n        val rightSorted = right.sorted\n        val leftStr = leftSorted.mkString\n        val rightStr = rightSorted.mkString\n        val result = max.toString + leftStr + rightStr\n        result.toLong",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                val num = arr(i).toString + arr(j).toString\n                if (num.toLong > maxNum) maxNum = num.toLong\n            }\n        }\n        maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                if (num > maxNum) maxNum = num\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sorted\n        val max = sorted.last\n        val min = sorted.head\n        val maxIndex = arr.indexOf(max)\n        val minIndex = arr.indexOf(min)\n        val maxIndex2 = arr.lastIndexOf(max)\n        val minIndex2 = arr.lastIndexOf(min)\n        if (maxIndex == maxIndex2) {\n            if (minIndex == minIndex2) {\n                val newArr = arr.updated(maxIndex, min).updated(minIndex, max)\n                return newArr.mkString.toLong\n            } else {\n                val newArr = arr.updated(maxIndex, min).updated(minIndex2, max)\n                return newArr.mkString.toLong\n            }\n        } else {\n            if (minIndex == minIndex2) {\n                val newArr = arr.updated(maxIndex2, min).updated(minIndex, max)\n                return newArr.mkString.toLong\n            } else {\n                val newArr = arr.updated(maxIndex2, min).updated(minIndex2, max)\n                return newArr.mkString.toLong\n            }\n        }",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            maxNum = max(maxNum, num)\n        }\n        maxNum",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        if (arr.length == 0) return 0\n        val max = arr.max\n        val maxIndex = arr.indexOf(max)\n        val left = arr.slice(0, maxIndex)\n        val right = arr.slice(maxIndex + 1, arr.length)\n        val leftMax = findMaxNum(left)\n        val rightMax = findMaxNum(right)\n        val leftMaxStr = leftMax.toString\n        val rightMaxStr = rightMax.toString\n        val maxStr = max.toString\n        val leftMaxStrLen = leftMaxStr.length\n        val rightMaxStrLen = rightMaxStr.length\n        val maxStrLen = maxStr.length\n        val leftMaxStrFirst = leftMaxStr.slice(0, 1)\n        val rightMaxStrFirst = rightMaxStr.slice(0, 1)\n        val maxStrFirst = maxStr.slice(0, 1)\n        val leftMaxStrLast = leftMaxStr.slice(leftMaxStrLen - 1, leftMaxStrLen)\n        val rightMaxStrLast = rightMaxStr.slice(rightMaxStrLen - 1, rightMaxStrLen)\n        val maxStrLast = maxStr.slice(maxStrLen - 1, maxStrLen)\n        val leftMaxStrFirstInt = leftMaxStrFirst.toInt\n        val rightMaxStrFirstInt = rightMaxStrFirst.toInt\n        val maxStrFirstInt = maxStrFirst.toInt\n        val leftMaxStrLastInt = leftMaxStrLast.toInt\n        val rightMaxStrLastInt = rightMaxStrLast.toInt\n        val maxStrLastInt = maxStrLast.toInt\n        val leftMaxStrFirstIntMax = max(leftMaxStrFirstInt, maxStrFirstInt)\n        val rightMaxStrFirstIntMax = max(rightMaxStrFirstInt, maxStrFirstInt)\n        val leftMaxStrLastIntMax = max(leftMaxStrLastInt, maxStrLastInt)\n        val rightMaxStrLastIntMax = max(rightMaxStrLastInt, maxStrLastInt)\n        val leftMaxStrFirstIntMaxStr = leftMaxStrFirstIntMax.toString\n        val rightMaxStrFirstIntMaxStr = rightMaxStrFirstIntMax.toString\n       ",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            maxNum = max(maxNum, arr(i))\n        }\n        maxNum",
    "        var maxNum = 0L\n        for(i <- 0 until arr.length) {\n            var num = 0L\n            for(j <- 0 until arr.length) {\n                if(i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if(num > maxNum) {\n                maxNum = num\n            }\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = arr(i)\n            for (j <- i + 1 until arr.length) {\n                num = num * 10 + arr(j)\n            }\n            maxNum = max(maxNum, num)\n        }\n        return maxNum",
    "        // We can use the fact that the largest number is the one with the largest digits in descending order\n        // So we sort the list in descending order and then concatenate the digits to form the largest number\n        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > maxNum) maxNum = num\n        }\n        return maxNum",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- 0 to arr.length - 1) {\n                if (i != j) {\n                    var num = arr(i) * 10 + arr(j)\n                    if (num > max) max = num\n                }\n            }\n        }\n        return max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                num = num * 10 + arr(j)\n            }\n            maxNum = max(maxNum, num)\n            var temp = arr(0)\n            for (j <- 0 until arr.length - 1) {\n                arr(j) = arr(j + 1)\n            }\n            arr(arr.length - 1) = temp\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    var num = arr(i).toString + arr(j).toString\n                    if (num.toLong > maxNum) maxNum = num.toLong\n                }\n            }\n        }\n        return maxNum",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > maxNum) maxNum = num\n        }\n        return maxNum",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        val sorted = arr.sorted\n        val num = sorted.mkString(\"\").toLong\n        num",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                num = num * 10 + arr(j)\n            }\n            maxNum = max(maxNum, num)\n            arr = arr.tail ::: List(arr.head)\n        }\n        return maxNum",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.foldLeft(\"\")((x, y) => x + y).toLong",
    "        val s = arr.sorted.reverse.mkString\n        s.toLong",
    "        val sorted = arr.sorted\n        val result = new StringBuilder\n        for (i <- sorted.length - 1 to 0 by -1) result.append(sorted(i))\n        result.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    val num = arr(i).toString + arr(j).toString\n                    if (num.toLong > max) max = num.toLong\n                }\n            }\n        }\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        return max",
    "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        val result = reversed.mkString\n        result.toLong",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = arr(i)\n            for (j <- i + 1 to arr.length - 1) {\n                num = num * 10 + arr(j)\n            }\n            maxNum = max(maxNum, num)\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i).toString + arr(j).toString\n                if (num.toLong > max) max = num.toLong\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * 10 + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.foldLeft(0L)((a, b) => a * 10 + b)",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i + 1 to arr.length - 1) {\n                val num = arr(i) * 10 + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > maxNum) {\n                maxNum = num\n            }\n        }\n        return maxNum",
    "        val sorted = arr.sorted\n        val s = sorted.mkString(\"\")\n        s.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    var num = arr(i).toString + arr(j).toString\n                    if (num.toLong > max) max = num.toLong\n                }\n            }\n        }\n        return max",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- sorted.length - 1 to 0 by -1) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                var num = arr(i).toString + arr(j).toString\n                if (num.toLong > max) max = num.toLong\n            }\n        }\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i + 1 to arr.length - 1) {\n                var num = arr(i) * 10 + arr(j)\n                if (num > maxNum) maxNum = num\n                num = arr(j) * 10 + arr(i)\n                if (num > maxNum) maxNum = num\n            }\n        }\n        return maxNum",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- i to arr.length - 1) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                var num = arr(i) * 10 + arr(j)\n                if (num > max) max = num\n            }\n        }\n        return max",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        max",
    "        // Write your code here\n        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sorted\n        val s = sorted.mkString\n        s.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        maxNum",
    "        val sorted = arr.sorted\n        val s = sorted.mkString(\"\")\n        s.toLong",
    "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        val result = reversed.mkString\n        result.toLong",
    "        val sorted = arr.sorted\n        val result = new StringBuilder\n        for (i <- sorted.length - 1 to 0 by -1) {\n            result.append(sorted(i))\n        }\n        result.toString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        return maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    max = max max (arr(i) * 10 + arr(j))\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        return max",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i).toString + arr(j).toString\n                if (num.toLong > maxNum) maxNum = num.toLong\n            }\n        }\n        maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i).toString + arr(j).toString\n                if (num.toLong > maxNum) maxNum = num.toLong\n            }\n        }\n        maxNum",
    "        val str = arr.sorted.reverse.mkString\n        str.toLong",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.foldLeft(0L)((a, b) => a * 10 + b)",
    "        arr.sorted.reverse.foldLeft(0L)((acc, x) => acc * 10 + x)",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * 10 + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                val num = arr.slice(i, j + 1).mkString.toLong\n                if (num > max) max = num\n            }\n        }\n        max",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        max",
    "        val sorted = arr.sorted.reverse\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        val sorted = arr.sorted.reverse\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * 10 + arr(j)\n                if (num > maxNum) maxNum = num\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- arr) {\n            maxNum = max(maxNum, i)\n        }\n        maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                if (num > maxNum) maxNum = num\n            }\n        }\n        maxNum",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i + 1 to arr.length - 1) {\n                var num1 = arr(i) * 10 + arr(j)\n                var num2 = arr(j) * 10 + arr(i)\n                if (num1 > max) max = num1\n                if (num2 > max) max = num2\n            }\n        }\n        return max",
    "        arr.sorted.reverse.mkString(\"\").toLong",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString(\"\").toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            maxNum = max(maxNum, arr(i))\n        }\n        maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                var num = arr(i) * pow(10, j - i).toLong + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        arr.sorted.reverse.foldLeft(0L)((r, c) => r * 10 + c)",
    "        var result = 0L\n        for (i <- 0 until arr.length) {\n            result = result * 10 + arr(i)\n        }\n        result",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            maxNum = max(maxNum, num)\n        }\n        maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    var num = arr(i) * 10 + arr(j)\n                    if (num > max) max = num\n                }\n            }\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sorted.reverse\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > maxNum) maxNum = num\n        }\n        maxNum",
    "        val str = arr.sorted.reverse.mkString(\"\")\n        str.toLong",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                num = num * 10 + arr(j)\n            }\n            if (num > max) max = num\n            var temp = arr(0)\n            for (j <- 0 to arr.length - 2) {\n                arr(j) = arr(j + 1)\n            }\n            arr(arr.length - 1) = temp\n        }\n        return max",
    "        arr.sortWith(_ > _).mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    var num = arr(i).toString + arr(j).toString\n                    if (num.toLong > max) max = num.toLong\n                }\n            }\n        }\n        return max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            max = max max num\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                var num = arr(i) * 10 + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sorted.reverse\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        val sorted = arr.sorted\n        val min = sorted.head\n        val max = sorted.last\n        val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        val first = arr.slice(0, minIndex)\n        val second = arr.slice(minIndex + 1, maxIndex)\n        val third = arr.slice(maxIndex + 1, arr.length)\n        val firstSorted = first.sorted\n        val secondSorted = second.sorted\n        val thirdSorted = third.sorted\n        val firstStr = firstSorted.mkString(\"\")\n        val secondStr = secondSorted.mkString(\"\")\n        val thirdStr = thirdSorted.mkString(\"\")\n        val result = (firstStr + max + secondStr + min + thirdStr).toLong\n        result",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                var a = arr(i)\n                var b = arr(j)\n                var c = a * pow(10, (b.toString.length)) + b\n                var d = b * pow(10, (a.toString.length)) + a\n                if (c > max) max = c\n                if (d > max) max = d\n            }\n        }\n        return max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * pow(10, floor(log10(arr(j))).toInt + 1).toLong + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * pow(10, j - i).toLong + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString(\"\").toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                val num = arr(i).toString + arr(j).toString\n                if (num.toLong > max) max = num.toLong\n            }\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        maxNum",
    "        val sorted = arr.sortWith((a, b) => a.toString + b.toString > b.toString + a.toString)\n        sorted.mkString(\"\").toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = arr(i)\n            for (j <- i + 1 to arr.length - 1) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        return max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                var num = arr(i).toString + arr(j).toString\n                if (num.toLong > max) max = num.toLong\n            }\n        }\n        return max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * pow(10, (arr.length - i - 1)).toLong + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        val s = arr.sorted.reverse.mkString(\"\")\n        s.toLong",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            maxNum = max(maxNum, arr(i))\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- i to arr.length - 1) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        val arr2 = arr.sortWith(_ > _)\n        arr2.foldLeft(0L)((a, b) => a * 10 + b)",
    "        val sorted = arr.sorted.reverse\n        val s = sorted.mkString(\"\")\n        s.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > maxNum) maxNum = num\n        }\n        return maxNum",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            maxNum = max(maxNum, num)\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.foldLeft(\"\")((x, y) => x + y).toLong",
    "        arr.sorted.reverse.reduceLeft(_ * 10 + _)",
    "        var result : Long = 0\n        for (i <- 0 until arr.length) {\n            result = result * 10 + arr(i)\n        }\n        return result",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * 10 + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- sorted.length - 1 to 0 by -1) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    var num = arr(i).toString + arr(j).toString\n                    if (num.toLong > maxNum) maxNum = num.toLong\n                }\n            }\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- arr) {\n            max = max * 10 + i\n        }\n        return max",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                num = num * 10 + arr(j)\n            }\n            if (num > maxNum) maxNum = num\n            var temp = arr(0)\n            for (j <- 0 to arr.length - 2) {\n                arr(j) = arr(j + 1)\n            }\n            arr(arr.length - 1) = temp\n        }\n        return maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var temp = arr(i)\n            for (j <- i + 1 until arr.length) {\n                temp = temp * 10 + arr(j)\n            }\n            if (temp > max) max = temp\n        }\n        return max",
    "        arr.sorted.reverse.mkString.toLong"
  ]
}