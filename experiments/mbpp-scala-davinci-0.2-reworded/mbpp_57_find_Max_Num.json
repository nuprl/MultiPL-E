{
  "name": "mbpp_57_find_Max_Num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the largest number that can be formed with the given list of digits.\n    def findMaxNum(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (321l));\n    assert(findMaxNum((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (6541l));\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 9l.toLong))) == (9321l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val s = arr.sorted.reverse.mkString\n        s.toLong",
    "        val sorted = arr.sorted\n        val result = new StringBuilder\n        for (i <- sorted.length - 1 to 0 by -1) result.append(sorted(i))\n        result.toLong",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        max",
    "        val sorted = arr.sorted\n        val len = sorted.length\n        var max = sorted(len - 1)\n        for (i <- len - 2 to 0 by -1) {\n            if (sorted(i) != 0 && sorted(i) * pow(10, len - i - 1).toLong > max) {\n                max = sorted(i) * pow(10, len - i - 1).toLong + max\n            }\n        }\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = arr(i)\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    temp = temp * 10 + arr(j)\n                }\n            }\n            if (temp > maxNum) {\n                maxNum = temp\n            }\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > maxNum) maxNum = num\n        }\n        maxNum",
    "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        reversed.mkString.toLong",
    "        return 0",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        val result = reversed.mkString\n        result.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i + 1 to arr.length - 1) {\n                val num = arr(i) * pow(10, j - i).toLong + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- sorted.length - 1 to 0 by -1) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    val num = arr(i) * 10 + arr(j)\n                    if (num > maxNum) maxNum = num\n                }\n            }\n        }\n        maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            maxNum = max(maxNum, arr(i))\n        }\n        return maxNum",
    "        arr.sorted.reverse.foldLeft(\"\")(_ + _).toLong",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong"
  ]
}