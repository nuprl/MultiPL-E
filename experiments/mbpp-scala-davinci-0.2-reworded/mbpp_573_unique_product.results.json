{
  "name": "mbpp_573_unique_product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        for (i <- list_data) {\n            product = product * i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3ngzbp9k.scala:13)\n\tat Problem.main(tmp3ngzbp9k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = List[Long]()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var result = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                result *= i\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var product : Long = 1\n        var set_data : Set[Long] = Set()\n        for(i <- 0 until list_data.length) {\n            if(!set_data.contains(list_data(i))) {\n                product *= list_data(i)\n                set_data.add(list_data(i))\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var result : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = List[Long]()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        return unique_list.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set += i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var result : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            result *= unique_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val set_data = list_data.toSet\n        set_data.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 to list_data.length - 1) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list ::: List(list_data(i))\n            }\n        }\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set.add(i)\n            }\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        list_data.toSet.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var product = 1L\n        var unique_list = list_data.distinct\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        return list_data.toSet.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_data = list_data.toSet\n        var product = 1L\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var result : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var product = 1L\n        var unique_list = list_data.distinct\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product : Long = 1\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = new ListBuffer[Long]()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list += i\n            }\n        }\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.distinct\n        unique_list.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var result : Long = 1\n        var set_data : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!set_data.contains(i)) {\n                set_data += i\n                result *= i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_list = list_data.distinct\n        for (i <- 0 until unique_list.length) {\n            product = product * unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 to list_data.length - 1) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = list_data(i) :: unique_list\n            }\n        }\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_data = list_data.distinct\n        for (i <- 0 until unique_data.length) {\n            product *= unique_data(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_numbers = new HashSet[Long]\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        val unique_list = list_data.distinct\n        unique_list.foreach(product *= _)\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 to list_data.length - 1) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = list_data(i) :: unique_list\n            }\n        }\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = List[Long]()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        return unique_list.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set += i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Your code here\n        0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt9lduige.scala:10)\n\tat Problem.main(tmpt9lduige.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var unique_list = list_data.distinct\n        var product = 1L\n        for(i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_list = list_data.toSet\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        return unique_list.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            product = product * i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product = product * i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var set_data = Set[Long]()\n        for (i <- list_data) {\n            if (!set_data.contains(i)) {\n                product *= i\n                set_data += i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 to list_data.length - 1) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = list_data(i) :: unique_list\n            }\n        }\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)((x, y) => x * y)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set += i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = list_data.distinct\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_list = list_data.distinct\n        for (i <- unique_list) {\n            product *= i\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = List[Long]()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product : Long = 1\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_data.contains(list_data(i))) {\n                unique_data = list_data(i) :: unique_data\n                product *= list_data(i)\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var product = 1L\n        var unique = new HashSet[Long]()\n        for (i <- list_data) {\n            if (!unique.contains(i)) {\n                unique += i\n                product *= i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 to list_data.length - 1) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var result = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                result *= i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var result : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_data.contains(i)) {\n                unique_data = i :: unique_data\n            }\n        }\n        for (i <- unique_data) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var result : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- 0 until unique_list.length) {\n            product = product * unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                product *= i\n            }\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = list_data(i) :: unique_list\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product : Long = 1\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        return list_data.toSet.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var list_data_new = list_data.distinct\n        var product = 1L\n        for (i <- list_data_new) {\n            product *= i\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                product *= i\n            }\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n                product *= i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_data = list_data.distinct\n        for (i <- 0 until unique_data.length) {\n            product *= unique_data(i)\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.foldLeft(1L)((a, b) => a * b)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8b2vdf1y.scala:9)\n\tat Problem.main(tmp8b2vdf1y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_list = list_data.distinct\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val list_data_set = list_data.toSet\n        list_data_set.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = ListBuffer[Long]()\n        for (i <- 0 to list_data.length - 1) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list += list_data(i)\n            }\n        }\n        var product = 1L\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.toSet\n        unique_list.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = List[Long]()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) unique_list = unique_list :+ i\n        }\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                product *= i\n            }\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var result : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var result : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.distinct\n        unique_list.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_data = list_data.distinct\n        var product = 1L\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_numbers = new HashSet[Long]\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers += i\n                product *= i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_*_)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = List[Long]()\n        for (i <- 0 to list_data.length - 1) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = list_data(i) :: unique_list\n            }\n        }\n        var product = 1L\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = List[Long]()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        return unique_list.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_list = list_data.distinct\n        for (i <- unique_list) {\n            product = product * i\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product : Long = 1\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var set_data : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!set_data.contains(i)) {\n                set_data += i\n                product *= i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var list_unique = list_data.distinct\n        var product = 1L\n        for (i <- 0 until list_unique.length) {\n            product *= list_unique(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_list = list_data.distinct\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var list_data_unique = list_data.distinct\n        var product = 1L\n        for(i <- 0 until list_data_unique.length) {\n            product = product * list_data_unique(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n                product *= i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                product *= i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_list = list_data.toSet\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        return list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var list_data_unique = list_data.distinct\n        var product = 1L\n        for (i <- list_data_unique) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set += i\n            }\n        }\n        product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var result = 1L\n        var set_data = Set[Long]()\n        for (i <- list_data) {\n            if (!set_data.contains(i)) {\n                set_data += i\n                result *= i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                product *= i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_list = list_data.distinct\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.toSet\n        unique_list.foldLeft(1L)((x, y) => x * y)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product = 1L\n        var unique_list = list_data.distinct\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product : Long = 1\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var set_data = Set[Long]()\n        for (i <- list_data) {\n            if (!set_data.contains(i)) {\n                set_data += i\n                product *= i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var list_unique : List[Long] = List()\n        for (i <- list_data) {\n            if (!list_unique.contains(i)) {\n                list_unique = i :: list_unique\n            }\n        }\n        for (i <- list_unique) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var list_unique = list_data.distinct\n        var product = 1L\n        for (i <- 0 to list_unique.length - 1) {\n            product *= list_unique(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123646,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 to list_data.length - 1) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = list_data(i) :: unique_list\n                product *= list_data(i)\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123646,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.toSet\n        var product : Long = 1\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123646,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_data = list_data.toSet\n        var product = 1L\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_data.contains(list_data(i))) {\n                unique_data = list_data(i) :: unique_data\n            }\n        }\n        for (i <- 0 until unique_data.length) {\n            product *= unique_data(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123646,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.distinct.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- 0 to unique_list.length - 1) {\n            product *= unique_list(i)\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        list_data.foldLeft(1L)((x, y) => x * y)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123646,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0ppkkqvf.scala:9)\n\tat Problem.main(tmp0ppkkqvf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        var unique_list = List[Long]()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        return unique_list.product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set += i\n            }\n        }\n        return product\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123646,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozu5x9xu.scala:10)\n\tat Problem.main(tmpozu5x9xu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}