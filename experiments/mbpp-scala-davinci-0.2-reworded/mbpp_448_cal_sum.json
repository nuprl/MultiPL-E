{
  "name": "mbpp_448_cal_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of perrin numbers.\n    def calSum(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(calSum((9l)) == (49l));\n    assert(calSum((10l)) == (66l));\n    assert(calSum((11l)) == (88l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var p = new Array[Long](n.toInt + 1)\n        p(0) = 3\n        p(1) = 0\n        p(2) = 2\n        for (i <- 3 to n.toInt) {\n            p(i) = p(i - 2) + p(i - 3)\n        }\n        p.sum",
    "        var a = 3L\n        var b = 0L\n        var c = 2L\n        var sum = 0L\n        for (i <- 3 to n.toInt) {\n            b = a\n            a = c\n            c = b + a\n            sum += c\n        }\n        sum",
    "        val perrin = new Array[Long](n.toInt + 1)\n        perrin(0) = 3\n        perrin(1) = 0\n        perrin(2) = 2\n        for (i <- 3 to n.toInt) {\n            perrin(i) = perrin(i - 2) + perrin(i - 3)\n        }\n        perrin(n.toInt)",
    "        var sum = 0L\n        var p = 3L\n        while (p <= n) {\n            sum += p\n            p = p + perrin(p)\n        }\n        sum",
    "        val mod = 1000000007L\n        val perrin = ArrayBuffer[Long](3, 0, 2)\n        var sum = 2L\n        for (i <- 3 to n.toInt) {\n            perrin += (perrin(i - 2) + perrin(i - 3)) % mod\n            sum += perrin(i)\n        }\n        sum",
    "        var p = ArrayBuffer[Long]()\n        p += 3\n        p += 0\n        p += 2\n        var i = 3\n        while (i <= n) {\n            p += 2 * p(i - 2) + p(i - 3)\n            i += 1\n        }\n        return p(n.toInt)",
    "        var sum = 0L\n        var p = 3L\n        while (p <= n) {\n            sum += p\n            p = p * 2 + 1\n        }\n        sum",
    "        var sum = 0L\n        var a = 3L\n        var b = 0L\n        var c = 2L\n        for (i <- 1 to n.toInt) {\n            sum += a\n            b = a\n            a = c\n            c = b + a\n        }\n        return sum",
    "        var perrin = new Array[Long](n.toInt + 1)\n        perrin(0) = 3\n        perrin(1) = 0\n        perrin(2) = 2\n        for (i <- 3 to n.toInt) {\n            perrin(i) = perrin(i - 2) + perrin(i - 3)\n        }\n        perrin.sum",
    "        var sum : Long = 0\n        var p : Long = 3\n        while (p <= n) {\n            sum += p\n            p = p + 2\n        }\n        return sum",
    "        var perrin = new Array[Long](n.toInt + 1)\n        perrin(0) = 3\n        perrin(1) = 0\n        perrin(2) = 2\n        for (i <- 3 to n.toInt) {\n            perrin(i) = perrin(i - 2) + perrin(i - 3)\n        }\n        perrin.sum",
    "        var a = 3L\n        var b = 0L\n        var c = 2L\n        var sum = 2L\n        for (i <- 3 to n.toInt) {\n            b = a\n            a = c\n            c = b + a\n            sum += c\n        }\n        sum",
    "        val perrin = ArrayBuffer.fill(3)(0)\n        perrin(0) = 3\n        perrin(1) = 0\n        perrin(2) = 2\n        var i = 3\n        while (i <= n) {\n            perrin(0) = perrin(1)\n            perrin(1) = perrin(2)\n            perrin(2) = perrin(0) + perrin(1)\n            i += 1\n        }\n        perrin(2)",
    "        val perrin = new Array[Long](100000)\n        perrin(0) = 3\n        perrin(1) = 0\n        perrin(2) = 2\n        for (i <- 3 to n.toInt) {\n            perrin(i) = perrin(i - 2) + perrin(i - 3)\n        }\n        perrin.take(n.toInt + 1).sum",
    "        var a = 3L\n        var b = 0L\n        var c = 2L\n        var sum = 2L\n        for (i <- 4 to n.toInt) {\n            b = a\n            a = c\n            c = b + a\n            sum += c\n        }\n        return sum",
    "        var sum = 0L\n        var i = 2L\n        while (i <= n) {\n            sum += perrin(i)\n            i += 1\n        }\n        return sum",
    "        var perrin = new Array[Long](3)\n        perrin(0) = 3\n        perrin(1) = 0\n        perrin(2) = 2\n        var sum = 2\n        var i = 3\n        while (i <= n) {\n            perrin(0) = perrin(1)\n            perrin(1) = perrin(2)\n            perrin(2) = perrin(0) + perrin(1)\n            sum += perrin(2)\n            i += 1\n        }\n        return sum",
    "        var sum : Long = 0\n        var a : Long = 2\n        var b : Long = 3\n        var c : Long = 5\n        while (c <= n) {\n            sum += c\n            a = b + c\n            b = c + a\n            c = a + b\n        }\n        return sum",
    "        var p = new Array[Long](n.toInt + 1)\n        p(0) = 3\n        p(1) = 0\n        p(2) = 2\n        for (i <- 3 to n.toInt) {\n            p(i) = p(i - 2) + p(i - 3)\n        }\n        p.sum",
    "        var sum = 0L\n        var p = 3L\n        var i = 0\n        while (i < n) {\n            sum += p\n            p = p + perrin(p)\n            i += 1\n        }\n        sum"
  ]
}