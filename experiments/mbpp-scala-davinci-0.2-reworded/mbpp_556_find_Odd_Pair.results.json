{
  "name": "mbpp_556_find_Odd_Pair",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0L\n        for (i <- 0L until N) {\n            for (j <- i+1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddCount += 1\n            }\n        }\n        oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var oddCount = 0L\n        var evenCount = 0L\n        for(i <- 0L until N) {\n            if(A(i.toInt) % 2 == 0) {\n                evenCount += 1\n            } else {\n                oddCount += 1\n            }\n        }\n        oddCount * evenCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val count = Array.fill(100000)(0)\n        var result = 0L\n        for (i <- 0 until N.toInt) {\n            val x = A(i).toInt\n            for (j <- 0 until 100000) {\n                if ((x & (1 << j)) != 0) {\n                    result += count(j)\n                    count(j) += 1\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp70c13du8.scala:20)\n\tat Problem.main(tmp70c13du8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until N) {\n            if (A(i) % 2 == 0) {\n                even += 1\n            } else {\n                odd += 1\n            }\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvkz0nv6_.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPair = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddPair += 1\n            }\n        }\n        oddPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i+1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var oddCount = 0\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddCount += 1\n            }\n        }\n        oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp05q9z4cx.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp05q9z4cx.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPairs = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddPairs += 1\n            }\n        }\n        oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) odd += 1\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuxeoxxv.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkuxeoxxv.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val M = A.map(x => x % 2).groupBy(x => x).mapValues(_.size)\n        val even = M.getOrElse(0, 0)\n        val odd = M.getOrElse(1, 0)\n        even * odd + even * (even - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt0i6620v.scala:12)\n\tat Problem.main(tmpt0i6620v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0\n        for (i <- 0 to N - 1) {\n            for (j <- i + 1 to N - 1) {\n                if ((A(i) ^ A(j)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbt9i6ri.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to N - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    Long\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbt9i6ri.scala:8:31 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m to N - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               Found:    Long\n\u001b[31m  |\u001b[0m                               Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddCount += 1\n            }\n        }\n        oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until N) {\n            if (A(i) % 2 == 0) even += 1\n            else odd += 1\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphimzctwp.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i+1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until A.length) {\n            if (A(i) % 2 == 0) even += 1\n            else odd += 1\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0L\n        var evenCount = 0L\n        for (i <- 0 until N) {\n            if (A(i) % 2 == 0) evenCount += 1\n            else oddCount += 1\n        }\n        oddCount * evenCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd22169r6.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            val x = A(i)\n            val y = x ^ 1\n            if (map.contains(y)) {\n                count += map(y)\n            }\n            if (map.contains(x)) {\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8ncg1qj2.scala:23)\n\tat Problem.main(tmp8ncg1qj2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddCount += 1\n            }\n        }\n        oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsicmzori.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsicmzori.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(_ % 2 == 1)\n        val even = A.filter(_ % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        val oddPair = oddCount * (oddCount - 1) / 2\n        val evenPair = evenCount * (evenCount - 1) / 2\n        oddPair + evenPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8mk7s22_.scala:15)\n\tat Problem.main(tmp8mk7s22_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddCount += 1\n            }\n        }\n        oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(_ % 2 == 1)\n        val even = A.filter(_ % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        val oddPair = oddCount * (oddCount - 1) / 2\n        val evenPair = evenCount * (evenCount - 1) / 2\n        oddPair + evenPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8mk7s22_.scala:15)\n\tat Problem.main(tmp8mk7s22_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(x => x % 2 == 1)\n        val even = A.filter(x => x % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        val oddPairCount = oddCount * evenCount\n        val evenPairCount = evenCount * (evenCount - 1) / 2\n        oddPairCount + evenPairCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_3e93zhe.scala:15)\n\tat Problem.main(tmp_3e93zhe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddCount += 1\n            }\n        }\n        oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsicmzori.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsicmzori.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPairCount = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddPairCount += 1\n            }\n        }\n        oddPairCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until N.toInt) {\n            if (A(i) % 2 == 0) even += 1\n            else odd += 1\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) odd += 1\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(x => x % 2 == 1)\n        val even = A.filter(x => x % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        val oddPair = oddCount * evenCount\n        val evenPair = (evenCount * (evenCount - 1)) / 2\n        oddPair + evenPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_jrmn8wo.scala:15)\n\tat Problem.main(tmp_jrmn8wo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPairCount = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddPairCount += 1\n            }\n        }\n        oddPairCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(x => x % 2 == 1)\n        val even = A.filter(x => x % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        val oddOdd = oddCount * (oddCount - 1) / 2\n        val evenEven = evenCount * (evenCount - 1) / 2\n        val oddEven = oddCount * evenCount\n        oddOdd + evenEven + oddEven\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1buzaext.scala:16)\n\tat Problem.main(tmp1buzaext.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0L\n        for (i <- 0 until N) {\n            for (j <- i+1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddCount += 1\n            }\n        }\n        oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwc2jfrud.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwc2jfrud.scala:8:32 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i+\u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(_ % 2 == 1)\n        val even = A.filter(_ % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        val oddPair = oddCount * evenCount\n        val evenPair = evenCount * (evenCount - 1) / 2\n        oddPair + evenPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphctxsoui.scala:15)\n\tat Problem.main(tmphctxsoui.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val count = Array.fill(100000)(0)\n        for (i <- 0 until N.toInt) {\n            count(A(i).toInt) += 1\n        }\n        var result = 0L\n        for (i <- 0 until 100000) {\n            if (count(i) > 0) {\n                val x = count(i)\n                result += x * (x - 1) / 2\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjspm0haf.scala:20)\n\tat Problem.main(tmpjspm0haf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0\n        for (i <- 0 until A.length) {\n            for (j <- i+1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddCount += 1\n            }\n        }\n        oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) odd += 1\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddCount += 1\n            }\n        }\n        oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsicmzori.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsicmzori.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddCount += 1\n            }\n        }\n        oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val B = A.map(x => x % 2)\n        val odd = B.count(x => x == 1)\n        val even = B.count(x => x == 0)\n        val oddPairs = odd * even\n        val evenPairs = (odd * (odd - 1)) / 2 + (even * (even - 1)) / 2\n        oddPairs + evenPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5hlqxef2.scala:14)\n\tat Problem.main(tmp5hlqxef2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            val x = A(i)\n            if (map.contains(x)) {\n                count += map(x)\n            }\n            val y = x ^ 1\n            if (map.contains(y)) {\n                map(y) += 1\n            } else {\n                map(y) = 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7xu3rzen.scala:23)\n\tat Problem.main(tmp7xu3rzen.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0L\n        for (i <- 0 until A.length - 1) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i+1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) odd += 1\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i+1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val oddCount = A.count(_ % 2 == 1)\n        val evenCount = N - oddCount\n        oddCount * evenCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPair = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddPair += 1\n            }\n        }\n        oddPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPairs = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddPairs += 1\n            }\n        }\n        oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprg4dnzya.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprg4dnzya.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(x => x % 2 == 1)\n        val even = A.filter(x => x % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        val oddPair = oddCount * (oddCount - 1) / 2\n        val evenPair = evenCount * (evenCount - 1) / 2\n        oddPair + evenPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp14qd72l2.scala:15)\n\tat Problem.main(tmp14qd72l2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(x => x % 2 == 1)\n        val even = A.filter(x => x % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        val oddPair = oddCount * (oddCount - 1) / 2\n        val evenPair = evenCount * (evenCount - 1) / 2\n        oddPair + evenPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp14qd72l2.scala:15)\n\tat Problem.main(tmp14qd72l2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val count = Array.fill[Long](64)(0)\n        for (i <- 0 until N.toInt) {\n            var x = A(i)\n            var j = 0\n            while (x > 0) {\n                if (x % 2 == 1) count(j) += 1\n                x /= 2\n                j += 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until 64) {\n            result += count(i) * (N - count(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123011,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdhzhgn7d.scala:23)\n\tat Problem.main(tmpdhzhgn7d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until N) {\n            if (A(i).toInt % 2 == 0) even += 1\n            else odd += 1\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3lno_1.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(_ % 2 == 1)\n        val even = A.filter(_ % 2 == 0)\n        val oddCount = odd.size\n        val evenCount = even.size\n        oddCount * evenCount + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpat1gygf8.scala:13)\n\tat Problem.main(tmpat1gygf8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        val odd = A.filter(_ % 2 == 1)\n        val even = A.filter(_ % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        val oddPair = oddCount * (oddCount - 1) / 2\n        val evenPair = evenCount * (evenCount - 1) / 2\n        oddPair + evenPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo37yxu0v.scala:16)\n\tat Problem.main(tmpo37yxu0v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until N) {\n            if (A(i) % 2 == 0) even += 1\n            else odd += 1\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphimzctwp.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val xor = A.foldLeft(0L)((x, y) => x ^ y)\n        if (xor % 2 == 1) {\n            N * (N - 1) / 2\n        } else {\n            val count = A.count(x => x % 2 == 1)\n            count * (N - count)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123011,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpql16b6d1.scala:15)\n\tat Problem.main(tmpql16b6d1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(_ % 2 == 1).length\n        val even = A.length - odd\n        val oddPair = odd * even\n        val evenPair = (even * (even - 1)) / 2\n        oddPair + evenPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnsp6pmna.scala:13)\n\tat Problem.main(tmpnsp6pmna.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        val odd = A.filter(x => x % 2 == 1)\n        val even = A.filter(x => x % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        oddCount * evenCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until N.toInt) {\n            if (A(i) % 2 == 0) even += 1\n            else odd += 1\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPair = 0L\n        for (i <- 0L to N - 1) {\n            for (j <- i + 1L to N - 1) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddPair += 1\n            }\n        }\n        oddPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(_ % 2 == 1)\n        val even = A.filter(_ % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        oddCount * evenCount + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnjciylvq.scala:13)\n\tat Problem.main(tmpnjciylvq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0L\n        var evenCount = 0L\n        for (i <- 0 until N) {\n            if (A(i) % 2 == 0) evenCount += 1\n            else oddCount += 1\n        }\n        oddCount * evenCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd22169r6.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(x => x % 2 == 1)\n        val even = A.filter(x => x % 2 == 0)\n        val oddCount = odd.size\n        val evenCount = even.size\n        val oddPair = oddCount * (oddCount - 1) / 2\n        val evenPair = evenCount * (evenCount - 1) / 2\n        oddPair + evenPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt9ea83zk.scala:15)\n\tat Problem.main(tmpt9ea83zk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until A.length) {\n            if (A(i) % 2 == 0) even += 1\n            else odd += 1\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val count = new Array[Long](100000)\n        for (i <- 0 until N.toInt) {\n            count(A(i).toInt) += 1\n        }\n        var result = 0L\n        for (i <- 0 until 100000) {\n            if (count(i) > 0) {\n                result += count(i) * (count(i) - 1) / 2\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp50asp0xc.scala:19)\n\tat Problem.main(tmp50asp0xc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(_ % 2 == 1)\n        val even = A.filter(_ % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        val oddPairCount = oddCount * evenCount\n        val evenPairCount = oddCount * (oddCount - 1) / 2 + evenCount * (evenCount - 1) / 2\n        oddPairCount + evenPairCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2skizi89.scala:15)\n\tat Problem.main(tmp2skizi89.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPairCount = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddPairCount += 1\n            }\n        }\n        return oddPairCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPairs = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddPairs += 1\n            }\n        }\n        oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length - 1) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPair = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddPair += 1\n            }\n        }\n        oddPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until N) {\n            if (A(i.toInt) % 2 == 0) even += 1\n            else odd += 1\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpitt60kn6.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until A.length) {\n            for (j <- i+1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPairCount = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddPairCount += 1\n            }\n        }\n        oddPairCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        0\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpny5g65m6.scala:10)\n\tat Problem.main(tmpny5g65m6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until N) {\n            if (A(i.toInt) % 2 == 0) even += 1\n            else odd += 1\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpitt60kn6.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var result = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) result += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp131a4hle.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp131a4hle.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxb4h4n5t.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPair = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddPair += 1\n            }\n        }\n        oddPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPairCount = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddPairCount += 1\n            }\n        }\n        oddPairCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1ltoxzd.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1ltoxzd.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val oddCount = A.filter(x => x % 2 == 1).length\n        val evenCount = A.filter(x => x % 2 == 0).length\n        oddCount * evenCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyzbndk6_.scala:10)\n\tat Problem.main(tmpyzbndk6_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPairs = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddPairs += 1\n            }\n        }\n        oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprg4dnzya.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprg4dnzya.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- 0L until N) {\n            val x = A(i.toInt)\n            if (map.contains(x)) {\n                count += map(x)\n            }\n            val xor = x ^ 1\n            if (map.contains(xor)) {\n                map(xor) += 1\n            } else {\n                map(xor) = 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123021,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpguh7zpg9.scala:23)\n\tat Problem.main(tmpguh7zpg9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count : Long = 0\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgn6x5ke.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgn6x5ke.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i+1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val odd = A.filter(x => x % 2 == 1)\n        val even = A.filter(x => x % 2 == 0)\n        val oddCount = odd.length\n        val evenCount = even.length\n        val oddPair = oddCount * (oddCount - 1) / 2\n        val evenPair = evenCount * (evenCount - 1) / 2\n        oddPair + evenPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp14qd72l2.scala:15)\n\tat Problem.main(tmp14qd72l2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until N) {\n            if (A(i) % 2 == 0) even += 1\n            else odd += 1\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphimzctwp.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddCount = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddCount += 1\n            }\n        }\n        oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsicmzori.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsicmzori.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPairs = 0\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddPairs += 1\n            }\n        }\n        oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1v3k0n1f.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1v3k0n1f.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguf1x_r_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguf1x_r_.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPair = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) oddPair += 1\n            }\n        }\n        oddPair\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var oddPairs = 0L\n        for (i <- 0 until N) {\n            for (j <- i + 1 until N) {\n                if ((A(i) ^ A(j)) % 2 == 1) oddPairs += 1\n            }\n        }\n        oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprg4dnzya.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (N : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprg4dnzya.scala:8:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i + \u001b[31m1\u001b[0m until N) {\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (N : Long)\n\u001b[31m  |\u001b[0m                                  Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        val B = A.map(x => x % 2)\n        val C = B.groupBy(x => x).map(x => x._2.length)\n        val D = C.map(x => x * (x - 1) / 2)\n        D.sum\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123024,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgqvnehpu.scala:12)\n\tat Problem.main(tmpgqvnehpu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0L until N) {\n            for (j <- i + 1L until N) {\n                if ((A(i.toInt) ^ A(j.toInt)) % 2 == 1) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until N.toInt) {\n            for (j <- i + 1 until N.toInt) {\n                if ((A(i) ^ A(j)) % 2 == 1) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        var odd = 0L\n        var even = 0L\n        for (i <- 0 until A.length) {\n            if (A(i) % 2 == 0) even += 1\n            else odd += 1\n        }\n        odd * even\n    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}