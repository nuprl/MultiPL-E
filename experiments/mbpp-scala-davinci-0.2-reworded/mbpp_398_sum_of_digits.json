{
  "name": "mbpp_398_sum_of_digits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the sum of digits of each number of a given list.\n    def sumOfDigits(nums : Any) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfDigits((Any(10l.toLong, 2l.toLong, 56l.toLong))) == (14l));\n    assert(sumOfDigits((Any(List[Any](10l, 20l, 4l, 5l, \"b\", 70l, \"a\")))) == (19l));\n    assert(sumOfDigits((Any(10l.toLong, 20l.toLong, -4l.toLong, 5l.toLong, -70l.toLong))) == (19l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case num : BigDecimal => num.toString.map(_.asDigit).sum\n            case num : List[Int] => num.map(sumOfDigits(_)).sum\n            case num : List[Long] => num.map(sumOfDigits(_)).sum\n            case num : List[BigInt] => num.map(sumOfDigits(_)).sum\n            case num : List[BigDecimal] => num.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        return sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        return sum",
    "        var sum = 0L\n        nums match {\n            case num : Int => sum = num.toString.map(_.asDigit).sum\n            case nums : List[Int] => sum = nums.map(_.toString.map(_.asDigit).sum).sum\n            case _ => sum = 0\n        }\n        sum",
    "        var sum : Long = 0\n        for (num <- nums.toString) {\n            sum += num.toString.toLong\n        }\n        return sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case x : Array[Int] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toLong\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }"
  ]
}