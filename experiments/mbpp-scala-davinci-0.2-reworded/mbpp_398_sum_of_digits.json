{
  "name": "mbpp_398_sum_of_digits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the sum of digits of each number of a given list.\n    def sumOfDigits(nums : Any) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfDigits((Any(10l.toLong, 2l.toLong, 56l.toLong))) == (14l));\n    assert(sumOfDigits((Any(List[Any](10l, 20l, 4l, 5l, \"b\", 70l, \"a\")))) == (19l));\n    assert(sumOfDigits((Any(10l.toLong, 20l.toLong, -4l.toLong, 5l.toLong, -70l.toLong))) == (19l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case num : BigDecimal => num.toString.map(_.asDigit).sum\n            case num : List[Int] => num.map(sumOfDigits(_)).sum\n            case num : List[Long] => num.map(sumOfDigits(_)).sum\n            case num : List[BigInt] => num.map(sumOfDigits(_)).sum\n            case num : List[BigDecimal] => num.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        return sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        return sum",
    "        var sum = 0L\n        nums match {\n            case num : Int => sum = num.toString.map(_.asDigit).sum\n            case nums : List[Int] => sum = nums.map(_.toString.map(_.asDigit).sum).sum\n            case _ => sum = 0\n        }\n        sum",
    "        var sum : Long = 0\n        for (num <- nums.toString) {\n            sum += num.toString.toLong\n        }\n        return sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case x : Array[Int] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toLong\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        if (nums.isInstanceOf[List[Int]]) {\n            val numsList = nums.asInstanceOf[List[Int]]\n            numsList.map(x => x.toString.map(_.asDigit).sum).sum\n        } else {\n            0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case x : List[Long] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case nums : List[Int] => nums.map(sumOfDigits(_)).sum\n            case nums : List[Long] => nums.map(sumOfDigits(_)).sum\n            case nums : List[BigInt] => nums.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        val list = nums.asInstanceOf[List[Int]]\n        list.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        var num = nums.toString\n        for (i <- 0 until num.length) {\n            sum += num(i).asDigit\n        }\n        sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        var sum = 0L\n        for (n <- nums.toString) {\n            sum += n.toString.toInt\n        }\n        sum",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[Long] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[BigInt] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[String] => nums.foreach(n => sum += n.map(_.asDigit).sum)\n            case nums : List[Double] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[Float] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[BigDecimal] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[BigInteger] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[Short] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[Byte] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[Char] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[Boolean] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[Unit] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List[Any] => nums.foreach(n => sum += n.toString.map(_.asDigit).sum)\n            case nums : List",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : Array[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : Set[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : Map[Int, Int] => {\n                for (num <- nums.keys) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : Vector[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : ArrayBuffer[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : HashSet[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : HashMap[Int, Int] => {\n                for (num <- nums.keys) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : LinkedHashSet[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : LinkedHashMap[Int, Int] => {\n                for (num <- nums.keys) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : ListBuffer[Int] => {\n                for (num <- nums) {\n                    sum +=",
    "        var sum : Long = 0\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var num_ = num\n                    while (num_ > 0) {\n                        sum += num_ % 10\n                        num_ /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var num_ = num\n                    while (num_ > 0) {\n                        sum += num_ % 10\n                        num_ /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var num_ = num\n                    while (num_ > 0) {\n                        sum += num_ % 10\n                        num_ /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        var sum = 0\n        nums match {\n            case num : Int => sum += num\n            case num : Long => sum += num\n            case num : Double => sum += num\n            case num : Float => sum += num\n            case num : String => sum += num.toInt\n            case num : Array[Int] => for (i <- num) sum += i\n            case num : Array[Long] => for (i <- num) sum += i\n            case num : Array[Double] => for (i <- num) sum += i\n            case num : Array[Float] => for (i <- num) sum += i\n            case num : Array[String] => for (i <- num) sum += i.toInt\n            case _ => sum += 0\n        }\n        sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        val sumOfDigitsList = numsList.map(x => x.toString.map(_.asDigit).sum)\n        sumOfDigitsList.sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInteger] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val list = nums.asInstanceOf[List[Int]]\n        var sum = 0\n        for (i <- list) {\n            var num = i\n            while (num > 0) {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n        }\n        return sum",
    "        def sumOfDigits(n : Long) : Long = {\n            if (n == 0) 0\n            else n % 10 + sumOfDigits(n / 10)\n        }\n        nums match {\n            case nums : List[Int] => nums.map(sumOfDigits(_)).sum\n            case nums : List[Long] => nums.map(sumOfDigits(_)).sum\n            case nums : List[BigInt] => nums.map(sumOfDigits(_)).sum\n            case nums : List[BigDecimal] => nums.map(sumOfDigits(_)).sum\n            case nums : List[String] => nums.map(sumOfDigits(_)).sum\n            case nums : Array[Int] => nums.map(sumOfDigits(_)).sum\n            case nums : Array[Long] => nums.map(sumOfDigits(_)).sum\n            case nums : Array[BigInt] => nums.map(sumOfDigits(_)).sum\n            case nums : Array[BigDecimal] => nums.map(sumOfDigits(_)).sum\n            case nums : Array[String] => nums.map(sumOfDigits(_)).sum\n            case nums : Vector[Int] => nums.map(sumOfDigits(_)).sum\n            case nums : Vector[Long] => nums.map(sumOfDigits(_)).sum\n            case nums : Vector[BigInt] => nums.map(sumOfDigits(_)).sum\n            case nums : Vector[BigDecimal] => nums.map(sumOfDigits(_)).sum\n            case nums : Vector[String] => nums.map(sumOfDigits(_)).sum\n            case nums : Seq[Int] => nums.map(sumOfDigits(_)).sum\n            case nums : Seq[Long] => nums.map(sumOfDigits(_)).sum\n            case nums : Seq[BigInt] => nums.map(sumOfDigits(_)).sum\n            case nums : Seq[BigDecimal] => nums.map(sumOfDigits(_)).sum\n            case nums : Seq[",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : Double => x.toString.map(_.asDigit).sum\n            case x : String => x.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case nums : List[Int] => nums.map(sumOfDigits).sum\n            case nums : List[Long] => nums.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        sum",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case num : BigDecimal => num.toString.map(_.asDigit).sum\n            case num : Double => num.toString.map(_.asDigit).sum\n            case num : Float => num.toString.map(_.asDigit).sum\n            case num : String => num.map(_.asDigit).sum\n            case num : List[Any] => num.map(sumOfDigits).sum\n            case num : Array[Any] => num.map(sumOfDigits).sum\n            case num : ArrayBuffer[Any] => num.map(sumOfDigits).sum\n            case num : Vector[Any] => num.map(sumOfDigits).sum\n            case num : Set[Any] => num.map(sumOfDigits).sum\n            case num : Map[Any, Any] => num.map(sumOfDigits).sum\n            case num : HashMap[Any, Any] => num.map(sumOfDigits).sum\n            case num : LinkedHashMap[Any, Any] => num.map(sumOfDigits).sum\n            case num : SortedMap[Any, Any] => num.map(sumOfDigits).sum\n            case num : TreeMap[Any, Any] => num.map(sumOfDigits).sum\n            case num : HashSet[Any] => num.map(sumOfDigits).sum\n            case num : LinkedHashSet[Any] => num.map(sumOfDigits).sum\n            case num : SortedSet[Any] => num.map(sumOfDigits).sum\n            case num : TreeSet[Any] => num.map(sumOfDigits).sum\n            case num : Queue[Any] => num.map(sumOfDigits).sum\n            case num : Stack[Any] => num.map(sumOfDigits).sum\n            case num : PriorityQueue[Any] => num.map(sumOfDigits).",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        def sumOfDigits(n : Long) : Long = {\n            if (n == 0) 0\n            else n % 10 + sumOfDigits(n / 10)\n        }\n        nums match {\n            case nums : List[Int] => nums.map(x => sumOfDigits(x)).sum\n            case nums : List[Long] => nums.map(x => sumOfDigits(x)).sum\n            case nums : List[BigInt] => nums.map(x => sumOfDigits(x.toLong)).sum\n            case nums : List[BigDecimal] => nums.map(x => sumOfDigits(x.toLong)).sum\n            case nums : List[Double] => nums.map(x => sumOfDigits(x.toLong)).sum\n            case nums : List[Float] => nums.map(x => sumOfDigits(x.toLong)).sum\n            case nums : List[String] => nums.map(x => sumOfDigits(x.toLong)).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        var num : Long = 0\n        nums match {\n            case x : List[Int] => {\n                for (i <- x) {\n                    num = i\n                    while (num > 0) {\n                        sum += num % 10\n                        num /= 10\n                    }\n                }\n            }\n            case x : List[Long] => {\n                for (i <- x) {\n                    num = i\n                    while (num > 0) {\n                        sum += num % 10\n                        num /= 10\n                    }\n                }\n            }\n            case x : List[Double] => {\n                for (i <- x) {\n                    num = i.toLong\n                    while (num > 0) {\n                        sum += num % 10\n                        num /= 10\n                    }\n                }\n            }\n            case x : List[Float] => {\n                for (i <- x) {\n                    num = i.toLong\n                    while (num > 0) {\n                        sum += num % 10\n                        num /= 10\n                    }\n                }\n            }\n            case x : List[BigInt] => {\n                for (i <- x) {\n                    num = i.toLong\n                    while (num > 0) {\n                        sum += num % 10\n                        num /= 10\n                    }\n                }\n            }\n            case x : List[BigDecimal] => {\n                for (i <- x) {\n                    num = i.toLong\n                    while (num > 0) {\n                        sum += num % 10\n                        num /= 10\n                    }\n                }\n            }\n            case _ => {\n                println(\"Error: Invalid input\")\n                return -1\n            }\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        var sum : Long = 0\n        nums match {\n            case num : Int => {\n                var n : Int = num\n                while (n > 0) {\n                    sum += n % 10\n                    n /= 10\n                }\n            }\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var n : Int = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case nums : List[Int] => nums.map(sumOfDigits(_)).sum\n            case nums : List[Long] => nums.map(sumOfDigits(_)).sum\n            case nums : List[BigInt] => nums.map(sumOfDigits(_)).sum\n            case _ => throw new Exception(\"Invalid input\")\n        }",
    "        var sum : Long = 0\n        nums match {\n            case x : Int => sum = x.toString.map(_.asDigit).sum\n            case x : List[Int] => sum = x.map(_.toString.map(_.asDigit).sum).sum\n            case _ => sum = 0\n        }\n        return sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case x : List[List[Int]] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        val sumOfDigits = numsList.map(x => x.toString.map(_.asDigit).sum)\n        sumOfDigits.sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Any] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- 0 until nums.toString.length) {\n            sum += nums.toString.charAt(i).toInt - 48\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Boolean] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- 0 until nums.toString.length) {\n            sum += nums.toString.charAt(i).asDigit\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(x => x.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.asDigit).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(x => x.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.asDigit).sum\n            case nums : Int => nums.toString.map(x => x.asDigit).",
    "        var sum : Long = 0\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigDecimal] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Double] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Float] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[String] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.asDigit).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case n : Int => n.toString.map(_.asDigit).sum\n            case n : Long => n.toString.map(_.asDigit).sum\n            case n : Double => n.toString.map(_.asDigit).sum\n            case n : String => n.map(_.asDigit).sum\n            case n : List[Any] => n.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(x => x.asDigit).sum).sum",
    "        var result : Long = 0\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp : Long = 0\n                    var n : Int = num\n                    while (n > 0) {\n                        temp += n % 10\n                        n /= 10\n                    }\n                    result += temp\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp : Long = 0\n                    var n : Long = num\n                    while (n > 0) {\n                        temp += n % 10\n                        n /= 10\n                    }\n                    result += temp\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var temp : Long = 0\n                    var n : BigInt = num\n                    while (n > 0) {\n                        temp += n % 10\n                        n /= 10\n                    }\n                    result += temp\n                }\n            }\n            case _ => result = -1\n        }\n        result",
    "        var sum = 0L\n        nums match {\n            case num : Int => sum = num.toString.map(_.asDigit).sum\n            case num : Long => sum = num.toString.map(_.asDigit).sum\n            case num : Double => sum = num.toString.map(_.asDigit).sum\n            case num : Float => sum = num.toString.map(_.asDigit).sum\n            case nums : List[Any] => nums.foreach(num => sum += sumOfDigits(num))\n            case nums : Array[Any] => nums.foreach(num => sum += sumOfDigits(num))\n            case nums : ArrayBuffer[Any] => nums.foreach(num => sum += sumOfDigits(num))\n            case nums : Vector[Any] => nums.foreach(num => sum += sumOfDigits(num))\n            case _ => sum = 0\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.toString.toLong\n        sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.toString.toLong\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val list = nums.asInstanceOf[List[Int]]\n        list.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        return sum",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case nums : List[Int] => nums.map(sumOfDigits(_)).sum\n            case nums : List[Long] => nums.map(sumOfDigits(_)).sum\n            case nums : List[BigInt] => nums.map(sumOfDigits(_)).sum\n        }",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case num : BigDecimal => num.toString.map(_.asDigit).sum\n            case num : String => num.map(_.asDigit).sum\n            case nums : List[Any] => nums.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        return sum",
    "        val digits = nums.toString.map(_.asDigit)\n        digits.sum",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case nums : List[Int] => nums.map(sumOfDigits(_)).sum\n            case nums : List[Long] => nums.map(sumOfDigits(_)).sum\n            case nums : List[BigInt] => nums.map(sumOfDigits(_)).sum\n            case _ => throw new IllegalArgumentException\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case num : BigDecimal => num.toString.map(_.asDigit).sum\n            case nums : List[Any] => nums.map(sumOfDigits(_)).sum\n        }",
    "        var sum = 0L\n        nums match {\n            case x : Int => sum = x.toString.map(_.asDigit).sum\n            case x : Long => sum = x.toString.map(_.asDigit).sum\n            case x : List[Any] => sum = x.map(sumOfDigits(_)).sum\n            case _ => sum = 0\n        }\n        return sum",
    "        var sum : Long = 0\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp : Long = num\n                    while (temp != 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp : Long = num\n                    while (temp != 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var temp : BigInt = num\n                    while (temp != 0) {\n                        sum += (temp % 10).toLong\n                        temp /= 10\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input.\")\n            }\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n        }\n        return sum",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(x => x.asDigit).sum\n            case x : Long => x.toString.map(x => x.asDigit).sum\n            case x : List[Int] => x.map(x => sumOfDigits(x)).sum\n            case x : List[Long] => x.map(x => sumOfDigits(x)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case num : Int => {\n                while (num != 0) {\n                    sum += num % 10\n                    num /= 10\n                }\n            }\n            case num : Long => {\n                while (num != 0) {\n                    sum += num % 10\n                    num /= 10\n                }\n            }\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp != 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp != 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n        }\n        return sum",
    "        val list = nums.asInstanceOf[List[Int]]\n        list.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case x : List[Long] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(n => n.toString.map(_.asDigit).sum).sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit",
    "        var sum = 0L\n        for (n <- nums.toString) {\n            sum += n.asDigit\n        }\n        sum",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : Double => num.toString.map(_.asDigit).sum\n            case num : String => num.map(_.asDigit).sum\n            case num : List[Int] => num.map(_.toString.map(_.asDigit).sum).sum\n            case num : List[Long] => num.map(_.toString.map(_.asDigit).sum).sum\n            case num : List[Double] => num.map(_.toString.map(_.asDigit).sum).sum\n            case num : List[String] => num.map(_.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        var num : Long = nums.asInstanceOf[Long]\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.toString.toInt\n        sum",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case num : BigDecimal => num.toString.map(_.asDigit).sum\n            case nums : List[Any] => nums.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        var sum : Long = 0\n        nums match {\n            case x : Int => sum = x.toString.map(_.asDigit).sum\n            case x : List[Int] => sum = x.map(_.toString.map(_.asDigit).sum).sum\n            case _ => sum = 0\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (i <- nums) {\n                    var temp = i\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (i <- nums) {\n                    var temp = i\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (i <- nums) {\n                    var temp = i\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Set[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Map[Int, Int] => nums.map(x => x._1.toString.map(_.asDigit).sum + x._2.toString.map(_.asDigit).sum).sum\n            case nums : Vector[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Int => nums.toString.map(_.asDigit).sum\n            case nums : String => nums.map(_.asDigit).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case x : Int => sum += x\n            case x : Long => sum += x\n            case x : Double => sum += x.toLong\n            case x : String => sum += x.toLong\n            case x : List[Any] => for (i <- x) sum += sumOfDigits(i)\n            case x : Array[Any] => for (i <- x) sum += sumOfDigits(i)\n            case x : Map[Any, Any] => for (i <- x) sum += sumOfDigits(i)\n            case _ => sum += 0\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Long]]\n        var sum = 0L\n        for (num <- numsList) {\n            var n = num\n            while (n > 0) {\n                sum += n % 10\n                n /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        nums match {\n            case x : Int => sum = x.toString.map(_.asDigit).sum\n            case x : Long => sum = x.toString.map(_.asDigit).sum\n            case x : Double => sum = x.toString.map(_.asDigit).sum\n            case x : Float => sum = x.toString.map(_.asDigit).sum\n            case x : BigInt => sum = x.toString.map(_.asDigit).sum\n            case x : BigDecimal => sum = x.toString.map(_.asDigit).sum\n            case x : List[Any] => sum = x.map(sumOfDigits(_)).sum\n            case x : Array[Any] => sum = x.map(sumOfDigits(_)).sum\n            case x : ArrayBuffer[Any] => sum = x.map(sumOfDigits(_)).sum\n            case x : Vector[Any] => sum = x.map(sumOfDigits(_)).sum\n            case x : Set[Any] => sum = x.map(sumOfDigits(_)).sum\n            case x : Map[Any, Any] => sum = x.map(sumOfDigits(_)).sum\n            case _ => sum = 0\n        }\n        sum",
    "        var sum = 0L\n        nums match {\n            case num : Int => {\n                while (num > 0) {\n                    sum += num % 10\n                    num /= 10\n                }\n            }\n            case num : Long => {\n                while (num > 0) {\n                    sum += num % 10\n                    num /= 10\n                }\n            }\n            case num : BigInt => {\n                while (num > 0) {\n                    sum += num % 10\n                    num /= 10\n                }\n            }\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    while (num > 0) {\n                        sum += num % 10\n                        num /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    while (num > 0) {\n                        sum += num % 10\n                        num /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    while (num > 0) {\n                        sum += num % 10\n                        num /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Vector[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Set[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Map[Int, Int] => nums.map(x => x._1.toString.map(_.asDigit).sum + x._2.toString.map(_.asDigit).sum).sum\n            case nums : Int => nums.toString.map(_.asDigit).sum\n            case nums : Long => nums.toString.map(_.asDigit).sum\n            case nums : Double => nums.toString.map(_.asDigit).sum\n            case nums : String => nums.map(_.asDigit).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case x : Array[Int] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum : Long = 0\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Long]]\n        numsList.map(num => num.toString.map(x => x.asDigit).sum).sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInteger] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInteger] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- 0 until nums.toString.length) {\n            sum += nums.toString.charAt(i).asDigit\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) sum += i.toString.toLong\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        if (nums.isInstanceOf[List[Int]]) {\n            var sum = 0\n            for (num <- nums.asInstanceOf[List[Int]]) {\n                var temp = num\n                while (temp > 0) {\n                    sum += temp % 10\n                    temp /= 10\n                }\n            }\n            sum\n        } else {\n            var sum = 0\n            var temp = nums.asInstanceOf[Int]\n            while (temp > 0) {\n                sum += temp % 10\n                temp /= 10\n            }\n            sum\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        var num = nums.toString\n        for (i <- 0 until num.length) {\n            sum += num(i).asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDig",
    "        var sum = 0L\n        var num = nums.toString\n        for (i <- 0 until num.length) {\n            sum += num(i).asDigit\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum : Long = 0\n        nums match {\n            case num : Int => {\n                var numStr : String = num.toString\n                for (i <- 0 until numStr.length) {\n                    sum += numStr(i).toString.toInt\n                }\n            }\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var numStr : String = num.toString\n                    for (i <- 0 until numStr.length) {\n                        sum += numStr(i).toString.toInt\n                    }\n                }\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigDecimal] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Double] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Float] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Short] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Byte] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Char] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n        }\n        return sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        var sum = 0L\n        for (num <- numsList) {\n            var numStr = num.toString\n            for (i <- 0 until numStr.length) {\n                sum += numStr(i).asDigit\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        return sum"
  ]
}