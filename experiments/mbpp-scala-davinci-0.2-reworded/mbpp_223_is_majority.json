{
  "name": "mbpp_223_is_majority",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n    def isMajority(arr : List[Long], n : Long, x : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isMajority((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 10l.toLong)), (7l), (3l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 6l.toLong, 6l.toLong)), (8l), (4l)) == (false));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else {\n            val count = arr.take(index).filter(_ == x).length\n            if (count > n / 2) true\n            else false\n        }",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        arr(index + n.toInt / 2) == x",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        return arr(index + n.toInt / 2) == x",
    "        if (arr.length == 0) return false\n        val count = arr.count(y => y == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (arr.length - index < n / 2) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        return arr.length - index > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(e => e == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(p => p == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2"
  ]
}