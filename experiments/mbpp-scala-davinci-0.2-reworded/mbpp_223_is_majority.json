{
  "name": "mbpp_223_is_majority",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n    def isMajority(arr : List[Long], n : Long, x : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isMajority((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 10l.toLong)), (7l), (3l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 6l.toLong, 6l.toLong)), (8l), (4l)) == (false));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else {\n            val count = arr.take(index).filter(_ == x).length\n            if (count > n / 2) true\n            else false\n        }",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        arr(index + n.toInt / 2) == x",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        return arr(index + n.toInt / 2) == x",
    "        if (arr.length == 0) return false\n        val count = arr.count(y => y == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (arr.length - index < n / 2) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        return arr.length - index > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(e => e == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(p => p == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val c = arr.count(_ == x)\n        c > n / 2",
    "        if (arr.length == 0) return false\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        return count > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val xIndex = arr.indexOf(x)\n        if (xIndex == -1) return false\n        if (xIndex + n / 2 >= arr.length) return false\n        if (arr(xIndex + n.toInt / 2) != x) return false\n        return true",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.filter(_ == x).length\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        return arr(index + n.toInt / 2) == x",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val count = arr.count(y => y == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else if (index + n / 2 >= arr.length) false\n        else arr(index + n.toInt / 2) == x",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        var count = 0\n        for (i <- arr) {\n            if (i == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n            if (count > n / 2) return true\n        }\n        return false",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        if (count > n / 2) return true\n        false",
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else if (index + n / 2 >= arr.length) false\n        else arr(index + n.toInt / 2) == x",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(y => y == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        return arr(index + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else if (index + n / 2 >= arr.length) false\n        else arr(index + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (arr.length - index < n / 2) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        if (arr.count(_ == x) > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        return count > n / 2",
    "        if (arr.length == 0) return false\n        val index = binarySearch(arr, 0, arr.length - 1, x)\n        if (index == -1) return false\n        val count = count(arr, index, x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n/2 >= arr.length) return false\n        if (arr(index + n.toInt/2) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        return count > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(y => y == x)\n        return count > n / 2",
    "        val count = arr.filter(_ == x).size\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(e => e == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.drop(index).takeWhile(_ == x).length\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        return arr(index + n.toInt / 2) == x",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val m = arr.count(a => a == x)\n        if (m > n / 2) true else false",
    "        if (arr.length == 0) return false\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val half = n / 2\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        return count > half",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(y => y == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        arr(index + n.toInt / 2) == x",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(a => a == x)\n        count > n / 2",
    "        val count = arr.filter(e => e == x).length\n        count > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        if (arr.length == 0) return false\n        val i = arr.indexOf(x)\n        if (i == -1) return false\n        if (i + n / 2 >= arr.length) return false\n        return arr(i + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.filter(e => e == x).length\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        if (count > n / 2) return true\n        return false",
    "        arr.count(_ == x) > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val count = arr.filter(e => e == x).length\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, index + n.toInt).count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n/2 >= arr.length) return false\n        if (arr(index + n.toInt/2) != x) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else if (arr(index + n.toInt / 2) == x) true\n        else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(e => e == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        return count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        if (arr.length == 0) return false\n        val mid = arr.length / 2\n        if (arr(mid) == x) {\n            val left = arr.slice(0, mid)\n            val right = arr.slice(mid, arr.length)\n            val leftCount = left.count(_ == x)\n            val rightCount = right.count(_ == x)\n            if (leftCount + rightCount > n / 2) return true\n            else return false\n        }\n        else if (arr(mid) > x) return isMajority(arr.slice(0, mid), n, x)\n        else return isMajority(arr.slice(mid, arr.length), n, x)",
    "        val c = arr.count(_ == x)\n        c > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        arr(index + n.toInt / 2) == x",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val count = arr.count(e => e == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.drop(index).takeWhile(y => y == x).length\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 < arr.length) return arr(index + n.toInt / 2) == x\n        return false",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        return arr(index + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        return count > n / 2",
    "        val count = arr.count(e => e == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val half = n / 2\n        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n            if (count > half) return true\n        }\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(e => e == x)\n        count > n / 2",
    "        val count = arr.filter(x == _).length\n        count > n / 2",
    "        val count = arr.count(e => e == x)\n        if (count > n / 2) true else false",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        count > n / 2",
    "        if (arr.length == 0) return false\n        val m = arr.length / 2\n        if (arr(m) == x) {\n            if (arr.length == 1) return true\n            if (arr(m - 1) == x) return isMajority(arr.slice(0, m), n, x)\n            if (arr(m + 1) == x) return isMajority(arr.slice(m + 1, arr.length), n, x)\n            return true\n        }\n        if (arr(m) > x) return isMajority(arr.slice(0, m), n, x)\n        return isMajority(arr.slice(m + 1, arr.length), n, x)",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        true",
    "        if (arr.length == 0) return false\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        return arr(index + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else if (index + n / 2 >= arr.length) false\n        else arr(index + n.toInt / 2) == x",
    "        val count = arr.filter(y => y == x).length\n        if (count > n / 2) true else false",
    "        val count = arr.count(e => e == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else if (index + n / 2 >= arr.length) false\n        else arr(index + n.toInt / 2) == x",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        return count > n / 2",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(e => e == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else if (index + n / 2 >= arr.length) false\n        else arr(index + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val half = n / 2\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        if (count > half) return true\n        else return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else if (index + n / 2 >= arr.length) false\n        else arr(index + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        arr(index + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false"
  ]
}