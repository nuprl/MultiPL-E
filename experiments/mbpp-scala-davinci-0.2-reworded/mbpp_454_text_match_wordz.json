{
  "name": "mbpp_454_text_match_wordz",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a word containing 'z'.\n    def textMatchWordz(text : String) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchWordz((\"pythonz.\")) == (true));\n    assert(textMatchWordz((\"xyz.\")) == (true));\n    assert(textMatchWordz((\"  lang  .\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val regex = \".*z.*\".r\n        regex.findFirstIn(text).isDefined",
    "        val pattern = \".*z.*\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"z\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \".*z.*\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \".*z.*\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        text.matches(\".*z.*\")",
    "        val pattern = \"z\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"z\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        text.matches(\".*z.*\")",
    "        text.matches(\"\\\\w*z\\\\w*\")",
    "        val pattern = \"z\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \".*z.*\".r\n        pattern.findFirstIn(text).isDefined",
    "        text.matches(\".*z.*\")",
    "        val pattern = \".*z.*\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \".*z.*\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \".*z.*\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        text.matches(\".*z.*\")",
    "        val pattern = \".*z.*\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \".*z.*\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \".*z.*\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }"
  ]
}