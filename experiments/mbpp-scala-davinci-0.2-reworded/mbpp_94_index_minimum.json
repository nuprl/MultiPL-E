{
  "name": "mbpp_94_index_minimum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    def indexMinimum(test_list : List[Either[String, Long]]) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(indexMinimum((List[Either[String, Long]]((\"Rash\", 143l), (\"Manjeet\", 200l), (\"Varsha\", 100l)))).equals((\"Varsha\")));\n    assert(indexMinimum((List[Either[String, Long]]((\"Yash\", 185l), (\"Dawood\", 125l), (\"Sanya\", 175l)))).equals((\"Dawood\")));\n    assert(indexMinimum((List[Either[String, Long]]((\"Sai\", 345l), (\"Salman\", 145l), (\"Ayesha\", 96l)))).equals((\"Ayesha\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = 0\n        var i = 0\n        for (e <- test_list) {\n            e match {\n                case Left(x) => {\n                    if (i < min) {\n                        min = i\n                        min_index = i\n                    }\n                }\n                case Right(x) => {\n                    if (x < min) {\n                        min = x\n                        min_index = i\n                    }\n                }\n            }\n            i += 1\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => \"\"\n        }",
    "        var index = 0\n        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- test_list) {\n            i match {\n                case Left(s) => {\n                    if (index < min) {\n                        min = index\n                        min_index = index\n                    }\n                    index += 1\n                }\n                case Right(l) => {\n                    index += l\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(s) => s\n            case Right(l) => \"error\"\n        }",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (min_value > 0) {\n                        min_value = 0\n                        min_index = i\n                    }\n                }\n                case Right(x) => {\n                    if (min_value > x) {\n                        min_value = x\n                        min_index = i\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => \"\"\n        }",
    "        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min_index = test_list.map(_.right.get).zipWithIndex.min._2\n        test_list(min_index).left.get",
    "        var min_index = 0\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < test_list(min_index).right.get) {\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = -1\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min_value) {\n                    min_index = i\n                    min_value = test_list(i).right.get\n                }\n            }\n        }\n        if (min_index == -1) {\n            return \"None\"\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        val min = test_list.map(_.right.get).min\n        test_list.filter(_.right.get == min).head.left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (test_list(i).right.get < min_value) {\n                        min_index = i\n                        min_value = test_list(i).right.get\n                    }\n                }\n                case Right(x) => {\n                    if (test_list(i).right.get < min_value) {\n                        min_index = i\n                        min_value = test_list(i).right.get\n                    }\n                }\n            }\n        }\n        test_list(min_index).left.get",
    "        val min_index = test_list.zipWithIndex.minBy(_._1.right.get)._2\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = -1\n        for (i <- 0 until test_list.length) {\n            test_list(i) match {\n                case Left(x) => {\n                    if (min_index == -1) {\n                        min_index = i\n                    }\n                }\n                case Right(x) => {\n                    if (x < min) {\n                        min = x\n                        min_index = i\n                    }\n                }\n            }\n        }\n        test_list(min_index) match {\n            case Left(x) => x\n            case Right(x) => \"error\"\n        }",
    "        var min_value : Long = Long.MaxValue\n        var min_index : Int = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isRight) {\n                if (test_list(i).right.get < min_value) {\n                    min_value = test_list(i).right.get\n                    min_index = i\n                }\n            }\n        }\n        test_list(min_index).left.get",
    "        var min = Long.MaxValue\n        var min_index = 0\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min) {\n                min = test_list(i).right.get\n                min_index = i\n            }\n        }\n        return test_list(min_index).left.get",
    "        var min_index = 0\n        var min_value = Long.MaxValue\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).right.get < min_value) {\n                min_index = i\n                min_value = test_list(i).right.get\n            }\n        }\n        test_list(min_index).left.get",
    "        var min_index = 0\n        for (i <- 1 until test_list.length) {\n            if (test_list(i).right.get < test_list(min_index).right.get) {\n                min_index = i\n            }\n        }\n        test_list(min_index).left.get"
  ]
}