{
  "name": "mbpp_564_count_Pairs",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        arr.foreach(x => map.put(x, map.getOrElse(x, 0) + 1))\n        var count = 0L\n        for (x <- map.keys) {\n            if (x != n) {\n                count += map.getOrElse(x, 0) * map.getOrElse(n - x, 0)\n            } else {\n                count += map.getOrElse(x, 0) * (map.getOrElse(x, 0) - 1) / 2\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count / 2",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val count = new Array[Long](n.toInt + 1)\n        for (i <- 0 until arr.length) {\n            count(arr(i).toInt) += 1\n        }\n        var result = 0L\n        for (i <- 0 until count.length) {\n            if (count(i) > 1) {\n                result += count(i) * (count(i) - 1) / 2\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val count = new HashMap[Long, Long]\n        var result = 0L\n        for (i <- 0 until arr.length) {\n            val x = arr(i)\n            if (count.contains(x)) {\n                result += count(x)\n                count(x) += 1\n            } else {\n                count(x) = 1\n            }\n        }\n        for (i <- 0 until arr.length) {\n            val x = arr(i)\n            if (count.contains(x)) {\n                count(x) -= 1\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count"
  ]
}