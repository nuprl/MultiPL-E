{
  "name": "mbpp_564_count_Pairs",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        arr.foreach(x => map.put(x, map.getOrElse(x, 0) + 1))\n        var count = 0L\n        for (x <- map.keys) {\n            if (x != n) {\n                count += map.getOrElse(x, 0) * map.getOrElse(n - x, 0)\n            } else {\n                count += map.getOrElse(x, 0) * (map.getOrElse(x, 0) - 1) / 2\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count / 2",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val count = new Array[Long](n.toInt + 1)\n        for (i <- 0 until arr.length) {\n            count(arr(i).toInt) += 1\n        }\n        var result = 0L\n        for (i <- 0 until count.length) {\n            if (count(i) > 1) {\n                result += count(i) * (count(i) - 1) / 2\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val count = new HashMap[Long, Long]\n        var result = 0L\n        for (i <- 0 until arr.length) {\n            val x = arr(i)\n            if (count.contains(x)) {\n                result += count(x)\n                count(x) += 1\n            } else {\n                count(x) = 1\n            }\n        }\n        for (i <- 0 until arr.length) {\n            val x = arr(i)\n            if (count.contains(x)) {\n                count(x) -= 1\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        arr.map(x => n - x).sum",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val m = arr.groupBy(identity).mapValues(_.size)\n        var count = 0L\n        for (i <- 0 until n) {\n            val x = arr(i)\n            if (m.contains(x)) {\n                val y = m(x)\n                count += y * (y - 1) / 2\n                m.remove(x)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var result = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) result += 1\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i + 1 to arr.length - 1) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val m = arr.groupBy(x => x).mapValues(_.size)\n        var count = 0L\n        for (i <- m.keys) {\n            if (i != n) {\n                count += m(i)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (i != n) count += map(i)\n        }\n        count",
    "        val m = new HashMap[Long, Long]()\n        for (i <- arr) {\n            if (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n        var count = 0L\n        for (i <- m.keys) {\n            if (m(i) > 1) {\n                val c = m(i)\n                count += c * (c - 1) / 2\n            }\n            if (m.contains(n - i)) {\n                if (i != n - i) count += m(i) * m(n - i)\n                else count += m(i) * (m(i) - 1) / 2\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) -= 1\n                if (map.contains(n - i)) count += map(n - i)\n                map(i) += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val count = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (count.contains(i)) count(i) += 1\n            else count(i) = 1\n        }\n        var result = 0L\n        for (i <- count.keys) {\n            if (count.contains(i + n)) result += count(i) * count(i + n)\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j && arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map.contains(i + n)) count += map(i) * map(i + n)\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j && arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j && arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val m = arr.groupBy(x => x).mapValues(_.size)\n        var c = 0L\n        for (i <- m.keys) {\n            val x = m(i)\n            if (x > 1) c += (x * (x - 1)) / 2\n        }\n        c",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val m = arr.groupBy(identity).mapValues(_.size)\n        var count = 0L\n        for (i <- m.keys) {\n            if (i != n) count += m(i)\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map.contains(i + n)) count += map(i) * map(i + n)\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until n) {\n            if (map.contains(arr(i.toInt))) map(arr(i.toInt)) += 1\n            else map(arr(i.toInt)) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1) / 2\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val m = new HashMap[Long, Long]()\n        for (i <- 0 until arr.length) {\n            val x = arr(i)\n            if (m.contains(x)) m(x) += 1 else m(x) = 1\n        }\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            val x = arr(i)\n            if (m.contains(x)) {\n                if (x != n) count += m(x)\n                m(x) -= 1\n                if (m(x) == 0) m.remove(x)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.size) {\n            for (j <- i + 1 until arr.size) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until n) {\n            if (map.contains(arr(i.toInt))) map(arr(i.toInt)) += 1\n            else map(arr(i.toInt)) = 1\n        }\n        var count = 0L\n        for (i <- map.values) {\n            count += i * (i - 1) / 2\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        if (n == 0) 0\n        else if (n == 1) 0\n        else {\n            val m = arr.length\n            val arr2 = arr.sorted\n            var count = 0\n            var i = 0\n            while (i < m - 1) {\n                var j = i + 1\n                while (j < m && arr2(j) - arr2(i) <= n) {\n                    if (arr2(j) - arr2(i) == n) count += 1\n                    j += 1\n                }\n                i += 1\n            }\n            count\n        }",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for(i <- 0 until arr.length) {\n            for(j <- i + 1 until arr.length) {\n                if(arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val m = arr.groupBy(identity).mapValues(_.size)\n        var count = 0L\n        for (i <- m.keys) {\n            if (i != n) {\n                count += m(i) * m(n)\n            }\n        }\n        count",
    "        val m = arr.groupBy(x => x).mapValues(_.size)\n        var count = 0L\n        for (i <- m.keys) {\n            if (i == n) {\n                count += m(i) * (m(i) - 1) / 2\n            } else {\n                count += m(i) * m(n)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.size) {\n            for (j <- i + 1 until arr.size) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        arr.map(x => n - x).sum",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) -= 1\n                if (map(arr(i)) == 0) map.remove(arr(i))\n                if (map.contains(n - arr(i))) {\n                    count += map(n - arr(i))\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- arr) {\n            if (map.contains(i)) {\n                val c = map(i)\n                if (c > 1) count += c * (c - 1) / 2\n                map.remove(i)\n            }\n            if (map.contains(n - i)) {\n                val c = map(n - i)\n                if (c > 1) count += c * (c - 1) / 2\n                map.remove(n - i)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val m = new HashMap[Long, Long]()\n        for (i <- arr) {\n            if (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n        var result = 0L\n        for (i <- m.keys) {\n            if (i != n) {\n                if (m.contains(n - i)) result += m(i) * m(n - i)\n            }\n            else {\n                result += m(i) * (m(i) - 1) / 2\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        val m = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n        var result = 0L\n        for (i <- m.keys) {\n            if (i != n) result += m(i)\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- map.keys) {\n            if (map(i) > 1) count += map(i) * (map(i) - 1)\n            if (map.contains(i + 1)) count += map(i) * map(i + 1)\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) != arr(j)) count += 1\n            }\n        }\n        count"
  ]
}