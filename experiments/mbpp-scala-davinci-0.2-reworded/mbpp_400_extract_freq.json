{
  "name": "mbpp_400_extract_freq",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var freq_map = Map[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map) {\n            freq_list = i._2 :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ > _)\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        result",
    "        val freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq.contains(key)) {\n                freq(key) += 1\n            } else {\n                freq(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq : Map[Long, Long] = Map()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        freq.values.foldLeft(0L)((x, y) => x + y * (y - 1) / 2)",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                result += freq_map(test_list(i))\n                freq_map(test_list(i)) = 0\n            }\n        }\n        result",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i > 1) {\n                count += 1\n            }\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var count = 0L\n        for ((key, value) <- freq_map) {\n            count += value * (value - 1) / 2\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.keys) {\n            val freq = freq_map(i)\n            result += freq * (freq - 1) / 2\n        }\n        result",
    "        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        test_list.distinct.length",
    "        var freq_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                freq_list = (test_list(i) * test_list(j)) :: freq_list\n            }\n        }\n        freq_list.distinct.length",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var freq_list = List[Long]()\n        for ((k, v) <- freq_map) {\n            freq_list = v :: freq_list\n        }\n        freq_list.sortWith(_ > _).head",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for ((key, value) <- freq_map) {\n            result += value * (value - 1) / 2\n        }\n        return result",
    "        val test_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                test_map(test_list(i)) += 1\n            } else {\n                test_map(test_list(i)) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- test_map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        freq_map.size",
    "        var freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Int]\n        for (i <- freq_map.keys) {\n            freq_list += freq_map(i)\n        }\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_sum = freq_list_sorted_rev.sum\n        var freq_list_sorted_rev_sum_half = freq_list_sorted_rev_sum / 2\n        var freq_list_sorted_rev_sum_half_index = freq_list_sorted_rev.indexOf(freq_list_sorted_rev_sum_half)\n        var freq_list_sorted_rev_sum_half_index_next = freq_list_sorted_rev_sum_half_index + 1\n        var freq_list_sorted_rev_sum_half_index_next_sum = 0\n        for (i <- freq_list_sorted_rev_sum_half_index_next until freq_list_sorted_rev.length) {\n            freq_list_sorted_rev_sum_half_index_next_sum += freq_list_sorted_rev(i)\n        }\n        var freq_list_sorted_rev_sum_half_index_next_sum_half = freq_list_sorted_rev_sum_half_index_next_sum / 2\n        var freq_list_sorted_rev_sum_half_index_next_sum_half_index = freq_list_sorted_rev.indexOf(freq_list_sorted_rev_",
    "        var freq_map = Map[Long, Long]()\n        test_list.foreach(x => freq_map(x) = freq_map.getOrElse(x, 0) + 1)\n        freq_map.values.map(x => x * (x - 1) / 2).sum",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size",
    "        return test_list.distinct.length",
    "        val freq = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var result = 0L\n        for ((k, v) <- freq) {\n            result += (v * (v - 1)) / 2\n        }\n        return result",
    "        test_list.groupBy(identity).mapValues(_.size).size",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var result = 0L\n        for (i <- freq_map.keys) {\n            val freq = freq_map(i)\n            result += freq * (freq - 1) / 2\n        }\n        return result",
    "        val freq_map = HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq_map.values) {\n            total += i * (i - 1) / 2\n        }\n        return total",
    "        var freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        test_list.distinct.length",
    "        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list.sortWith(_ > _).head",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size",
    "        val freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map) {\n            freq_list = freq_list :+ i._2\n        }\n        var result = 1L\n        for (i <- freq_list) {\n            result *= i + 1\n        }\n        result",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                test_map(i) += 1\n            }\n            else {\n                test_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        test_list.groupBy(identity).mapValues(_.size).size",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                test_map(i) += 1\n            }\n            else {\n                test_map(i) = 1\n            }\n        }\n        var result : Long = 0\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var count = 0\n            for (j <- 0 until test_list.length) {\n                if (test_list(i) == test_list(j)) count += 1\n            }\n            if (!freq_list.contains(count)) freq_list = freq_list :+ count\n        }\n        freq_list.length",
    "        val test_set = test_list.toSet\n        val test_map = new HashMap[Long, Long]()\n        for (i <- test_set) {\n            test_map(i) = test_list.count(_ == i)\n        }\n        var result = 0L\n        for (i <- test_set) {\n            result += test_map(i) * (test_map(i) - 1) / 2\n        }\n        return result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        test_list.groupBy(identity).mapValues(_.size).size",
    "        val freq_list = test_list.groupBy(identity).mapValues(_.size)\n        freq_list.size",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        result - 1",
    "        val freq_map = new HashMap[Long, Long]\n        test_list.foreach(x => {\n            if (freq_map.contains(x)) freq_map(x) += 1\n            else freq_map(x) = 1\n        })\n        freq_map.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) == 1) {\n                result += 1\n            }\n        }\n        result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val test_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size",
    "        val freq = test_list.groupBy(identity).mapValues(_.size).values.toList\n        freq.foldLeft(1L)(_ * _)",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.keys) {\n            result += (freq_map(i) * (freq_map(i) - 1)) / 2\n        }\n        result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list.sortWith(_ > _)(0)",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Long]()\n        for (i <- freq_map.keys) {\n            freq_list += freq_map(i)\n        }\n        freq_list.toList.sorted.reverse(0)",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result : Long = 0\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 1L\n        for (i <- freq_map.values) {\n            result *= (i + 1)\n        }\n        return result - 1",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq_map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum",
    "        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.reduceLeft(_ * _)",
    "        val freq_list = test_list.groupBy(identity).mapValues(_.size)\n        return freq_list.size",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        var freq = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        val freq_map = new HashMap[List[Long], Int]\n        for (i <- 0 until test_list.length - 2) {\n            val tuple = List(test_list(i), test_list(i + 1), test_list(i + 2))\n            if (freq_map.contains(tuple)) {\n                freq_map(tuple) += 1\n            } else {\n                freq_map(tuple) = 1\n            }\n        }\n        freq_map.size",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val test_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                test_map(test_list(i)) += 1\n            } else {\n                test_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        test_list.groupBy(identity).mapValues(_.size).size",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sortWith(_ > _)\n        var freq_list_sorted_unique = freq_list_sorted.distinct\n        var freq_list_sorted_unique_sum = freq_list_sorted_unique.sum\n        return freq_list_sorted_unique_sum",
    "        val freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq += (test_list(i) -> 1)\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq.contains(key)) freq(key) += 1\n            else freq(key) = 1\n        }\n        freq.values.foldLeft(0L)((x, y) => x + y * (y - 1) / 2)",
    "        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq.contains(key)) {\n                freq(key) += 1\n            } else {\n                freq(key) = 1\n            }\n        }\n        var result = 0L\n        for ((key, value) <- freq) {\n            result += value * (value - 1) / 2\n        }\n        return result",
    "        var freq = 0L\n        var map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (!map.contains(test_list(i))) {\n                map(test_list(i)) = 1L\n            }\n            else {\n                map(test_list(i)) += 1L\n            }\n        }\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (map(test_list(i)) > 0 && map(test_list(j)) > 0) {\n                    freq += 1\n                    map(test_list(i)) -= 1\n                    map(test_list(j)) -= 1\n                }\n            }\n        }\n        return freq",
    "        var freq = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var count = 0\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        count",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        freq_list.distinct.length",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (map.contains(key)) {\n                map(key) += 1\n            } else {\n                map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        var freq_list_sorted = freq_list.sortWith(_ > _)\n        var freq_list_sorted_unique = freq_list_sorted.distinct\n        var freq_list_sorted_unique_count = freq_list_sorted_unique.length\n        freq_list_sorted_unique_count",
    "        test_list.groupBy(identity).mapValues(_.size).size",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) -= 1\n            }\n        }\n        result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 1L\n        for (i <- freq_map.values) {\n            result *= (i + 1)\n        }\n        return result",
    "        val freq_list = test_list.groupBy(identity).mapValues(_.size)\n        freq_list.size",
    "        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            if (i > 1) count += i * (i - 1) / 2\n        }\n        count",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) freq_map(test_list(i)) += 1\n            else freq_map(test_list(i)) = 1\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        test_list.groupBy(identity).mapValues(_.size).values.sum",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                val value = freq_map(key)\n                freq_map(key) = value + 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for ((key, value) <- freq_map) {\n            result += value * (value - 1) / 2\n        }\n        result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        val freq_list = freq_map.values.toList\n        val freq_list_sorted = freq_list.sortWith(_ > _)\n        var result = 0L\n        for (i <- freq_list_sorted) {\n            result += i * (i - 1) / 2\n        }\n        result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        test_list.groupBy(identity).mapValues(_.size).size",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) {\n                count += 1\n            }\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) freq_map(test_list(i)) += 1\n            else freq_map(test_list(i)) = 1\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) count += 1\n        }\n        count",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val freq = freq_map(test_list(i))\n            result += freq * (freq - 1) / 2\n        }\n        result",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            for (j <- i + 1 until freq_list.length) {\n                result += freq_list(i) * freq_list(j)\n            }\n        }\n        result",
    "        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) freq_map(test_list(i)) += 1\n            else freq_map(test_list(i)) = 1\n        }\n        var total_freq = 0L\n        for (i <- freq_map.values) {\n            total_freq += i * (i - 1) / 2\n        }\n        total_freq",
    "        var freq = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq.values) {\n            sum += i * (i - 1) / 2\n        }\n        sum",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq_map.contains(tuple)) {\n                freq_map(tuple) += 1\n            } else {\n                freq_map(tuple) = 1\n            }\n        }\n        freq_map.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.foldLeft(0L)(_ + _)",
    "        var freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            }\n            else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var total_freq = 0L\n        for (i <- freq_map.values) {\n            total_freq += i * (i - 1) / 2\n        }\n        total_freq",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq_map = HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for ((key, value) <- freq_map) {\n            result += value * (value - 1) / 2\n        }\n        return result",
    "        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) > 1) {\n                result += freq_map(key) - 1\n            }\n        }\n        result",
    "        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) > 1) {\n                result += 1\n            }\n        }\n        result",
    "        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq.contains(tuple)) {\n                freq(tuple) += 1\n            } else {\n                freq(tuple) = 1\n            }\n        }\n        freq.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map += (i -> 1)\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        test_list.groupBy(identity).mapValues(_.size).size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var sum = 0L\n        for ((key, value) <- freq_map) {\n            sum += value * (value - 1) / 2\n        }\n        return sum",
    "        var freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for ((k, v) <- freq_map) {\n            result += (v * (v - 1) / 2)\n        }\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            if (i > 1) {\n                result += i * (i - 1)\n            }\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        val freq_list = freq_map.values.toList\n        var count = 0\n        for (i <- 0 until freq_list.length) {\n            for (j <- i + 1 until freq_list.length) {\n                count += freq_list(i) * freq_list(j)\n            }\n        }\n        count",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.values.sum",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val freq_map = HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        count",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (key <- freq_map.keys) {\n            val freq = freq_map(key)\n            result += freq * (freq - 1) / 2\n        }\n        result",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 to test_list.length - 1) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) = freq_map(test_list(i)) + 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count : Long = 0\n        for (i <- freq_map.keys) {\n            if (freq_map(i) > 1) {\n                count += (freq_map(i) * (freq_map(i) - 1)) / 2\n            }\n        }\n        return count",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq.values) {\n            total += i * (i - 1) / 2\n        }\n        return total",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sortWith(_ > _)\n        var freq_list_sorted_set = freq_list_sorted.toSet\n        var freq_list_sorted_set_list = freq_list_sorted_set.toList\n        var freq_list_sorted_set_list_sorted = freq_list_sorted_set_list.sortWith(_ > _)\n        var freq_list_sorted_set_list_sorted_map = new HashMap[Long, Long]\n        for (i <- 0 until freq_list_sorted_set_list_sorted.length) {\n            freq_list_sorted_set_list_sorted_map(freq_list_sorted_set_list_sorted(i)) = 0\n        }\n        for (i <- 0 until freq_list_sorted.length) {\n            freq_list_sorted_set_list_sorted_map(freq_list_sorted(i)) += 1\n        }\n        var freq_list_sorted_set_list_sorted_map_list = freq_list_sorted_set_list_sorted_map.values.toList\n        var freq_list_sorted_set_list_sorted_map_list_sorted = freq_list_sorted_set_list_sorted_map_list.sortWith(_ > _)\n        var freq_list_sorted_set_list_sorted_map_list_sorted_set = freq_list_sorted_set_list_sorted_map_list_sorted.toSet\n        var fre",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for ((key, value) <- freq_map) {\n            freq_list = value :: freq_list\n        }\n        freq_list.sortWith(_ < _)",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_unique = freq_list_sorted_rev.distinct\n        var freq_list_sorted_rev_unique_sum = freq_list_sorted_rev_unique.sum\n        freq_list_sorted_rev_unique_sum",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ < _)\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result",
    "        val unique_tuples = test_list.distinct\n        unique_tuples.length",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) freq_map(key) += 1\n            else freq_map(key) = 1\n        }\n        freq_map.values.foldLeft(0L)(_ + _)",
    "        val test_set = test_list.toSet\n        return test_set.size",
    "        test_list.groupBy(x => x).map(x => x._2.length).sum",
    "        var freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        test_list.groupBy(identity).mapValues(_.size).size",
    "        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                result += freq(test_list(i))\n                freq(test_list(i)) = 0\n            }\n        }\n        result",
    "        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1 else freq(i) = 1\n        }\n        freq.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                val tuple = (test_list(i), test_list(j))\n                if (freq_map.contains(tuple)) freq_map(tuple) += 1\n                else freq_map(tuple) = 1\n            }\n        }\n        freq_map.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq_map.contains(tuple)) {\n                freq_map(tuple) += 1\n            } else {\n                freq_map(tuple) = 1\n            }\n        }\n        return freq_map.size",
    "        val freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq.contains(key)) {\n                freq(key) += 1\n            }\n            else {\n                freq(key) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.keys) {\n            val value = freq(i)\n            count += value * (value - 1) / 2\n        }\n        return count",
    "        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        val freq_list = freq_map.values.toList\n        val freq_list_sorted = freq_list.sorted\n        val freq_list_sorted_rev = freq_list_sorted.reverse\n        val freq_list_sorted_rev_uniq = freq_list_sorted_rev.distinct\n        val freq_list_sorted_rev_uniq_sum = freq_list_sorted_rev_uniq.sum\n        freq_list_sorted_rev_uniq_sum",
    "        val freq = new HashMap[(Long, Long), Long]\n        for (i <- 0 until test_list.length - 1) {\n            val tuple = (test_list(i), test_list(i + 1))\n            if (freq.contains(tuple)) freq(tuple) += 1\n            else freq(tuple) = 1\n        }\n        freq.size",
    "        var freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        return freq.size",
    "        test_list.groupBy(identity).mapValues(_.size).values.sum",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (!freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) = 1\n            } else {\n                freq_map(test_list(i)) += 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            count += (i * (i - 1)) / 2\n        }\n        return count",
    "        var freq_map = Map[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ > _)\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result",
    "        // Write your code here\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.foldLeft(1L)(_ * _)",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_unique = freq_list_sorted_rev.distinct\n        var freq_list_sorted_rev_unique_sum = freq_list_sorted_rev_unique.sum\n        return freq_list_sorted_rev_unique_sum",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) > 1) {\n                result += freq_map(key)\n                freq_map(key) = 1\n            }\n        }\n        result",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        freq_map.size",
    "        var freq = 0L\n        var test_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                test_map(test_list(i)) += 1\n            } else {\n                test_map(test_list(i)) = 1\n            }\n        }\n        for (i <- test_map.values) {\n            freq += i * (i - 1) / 2\n        }\n        return freq",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        var freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Long]\n        for (i <- freq_map.keys) {\n            freq_list += freq_map(i)\n        }\n        freq_list.toList.sorted.reverse(0)",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        freq_list.sorted.reverse.head",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        return freq_map.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) freq_map(test_list(i)) += 1\n            else freq_map(test_list(i)) = 1\n        }\n        var result = 0L\n        for ((k, v) <- freq_map) {\n            if (v > 1) result += v * (v - 1) / 2\n        }\n        return result",
    "        var freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_sum = 0\n        for (i <- 0 until freq_list.length) {\n            freq_sum += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return freq_sum",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i > 1) count += 1\n        }\n        return count",
    "        val freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.toList\n        var freq_list_sorted = freq_list.sortBy(_._2)\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_head = freq_list_sorted_rev.head\n        var freq_list_sorted_rev_head_value = freq_list_sorted_rev_head._2\n        var freq_list_sorted_rev_head_value_count = 0\n        for (i <- 0 until freq_list_sorted_rev.length) {\n            if (freq_list_sorted_rev(i)._2 == freq_list_sorted_rev_head_value) {\n                freq_list_sorted_rev_head_value_count += 1\n            }\n        }\n        freq_list_sorted_rev_head_value_count",
    "        val l = test_list.sorted\n        var count = 0\n        for (i <- 0 until l.length - 1) {\n            if (l(i) != l(i + 1)) count += 1\n        }\n        count + 1",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val num = test_list(i)\n            if (freq_map.contains(num)) {\n                freq_map(num) += 1\n            } else {\n                freq_map(num) = 1\n            }\n        }\n        freq_map.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_set = freq_list.toSet\n        var freq_list_set_list = freq_list_set.toList\n        var freq_list_set_list_sorted = freq_list_set_list.sortWith(_ < _)\n        var freq_list_set_list_sorted_reverse = freq_list_set_list_sorted.reverse\n        var freq_list_set_list_sorted_reverse_map = Map[Long, Long]()\n        for (i <- 0 until freq_list_set_list_sorted_reverse.length) {\n            freq_list_set_list_sorted_reverse_map(freq_list_set_list_sorted_reverse(i)) = i\n        }\n        var freq_list_sorted = freq_list.sortWith(_ < _)\n        var freq_list_sorted_reverse = freq_list_sorted.reverse\n        var freq_list_sorted_reverse_map = Map[Long, Long]()\n        for (i <- 0 until freq_list_sorted_reverse.length) {\n            freq_list_sorted_reverse_map(freq_list_sorted_reverse(i)) = i\n        }\n        var freq_list_sorted_reverse_map_list = freq_list_sorted_reverse_map.values.toList\n        var freq_list_sorted_reverse_map_list_sorted = freq_list_sorted_reverse_map_list.sortWith(_ < _)\n        var freq_list_sorted_reverse_map_list_sorted_reverse = freq",
    "        var count = 0\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (key <- freq_map.keys) {\n            val freq = freq_map(key)\n            result += freq * (freq - 1) / 2\n        }\n        result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count = 0\n        for ((k, v) <- freq_map) {\n            if (v == 1) {\n                count += 1\n            }\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq_map.values) {\n            total += i * (i - 1) / 2\n        }\n        return total",
    "        val test_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        test_map.size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) > 1) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result"
  ]
}