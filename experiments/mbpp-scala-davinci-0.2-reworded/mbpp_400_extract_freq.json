{
  "name": "mbpp_400_extract_freq",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var freq_map = Map[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map) {\n            freq_list = i._2 :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ > _)\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        result",
    "        val freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq.contains(key)) {\n                freq(key) += 1\n            } else {\n                freq(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq : Map[Long, Long] = Map()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        freq.values.foldLeft(0L)((x, y) => x + y * (y - 1) / 2)",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                result += freq_map(test_list(i))\n                freq_map(test_list(i)) = 0\n            }\n        }\n        result",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i > 1) {\n                count += 1\n            }\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var count = 0L\n        for ((key, value) <- freq_map) {\n            count += value * (value - 1) / 2\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.keys) {\n            val freq = freq_map(i)\n            result += freq * (freq - 1) / 2\n        }\n        result",
    "        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        test_list.distinct.length",
    "        var freq_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                freq_list = (test_list(i) * test_list(j)) :: freq_list\n            }\n        }\n        freq_list.distinct.length",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var freq_list = List[Long]()\n        for ((k, v) <- freq_map) {\n            freq_list = v :: freq_list\n        }\n        freq_list.sortWith(_ > _).head",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for ((key, value) <- freq_map) {\n            result += value * (value - 1) / 2\n        }\n        return result",
    "        val test_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                test_map(test_list(i)) += 1\n            } else {\n                test_map(test_list(i)) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- test_map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        freq_map.size",
    "        var freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Int]\n        for (i <- freq_map.keys) {\n            freq_list += freq_map(i)\n        }\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_sum = freq_list_sorted_rev.sum\n        var freq_list_sorted_rev_sum_half = freq_list_sorted_rev_sum / 2\n        var freq_list_sorted_rev_sum_half_index = freq_list_sorted_rev.indexOf(freq_list_sorted_rev_sum_half)\n        var freq_list_sorted_rev_sum_half_index_next = freq_list_sorted_rev_sum_half_index + 1\n        var freq_list_sorted_rev_sum_half_index_next_sum = 0\n        for (i <- freq_list_sorted_rev_sum_half_index_next until freq_list_sorted_rev.length) {\n            freq_list_sorted_rev_sum_half_index_next_sum += freq_list_sorted_rev(i)\n        }\n        var freq_list_sorted_rev_sum_half_index_next_sum_half = freq_list_sorted_rev_sum_half_index_next_sum / 2\n        var freq_list_sorted_rev_sum_half_index_next_sum_half_index = freq_list_sorted_rev.indexOf(freq_list_sorted_rev_",
    "        var freq_map = Map[Long, Long]()\n        test_list.foreach(x => freq_map(x) = freq_map.getOrElse(x, 0) + 1)\n        freq_map.values.map(x => x * (x - 1) / 2).sum",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size"
  ]
}