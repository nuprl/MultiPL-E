{
  "name": "mbpp_131_reverse_vowels",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to reverse only the vowels of a given string (where y is not a vowel).\n    def reverseVowels(str1 : String) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reverseVowels((\"Python\")).equals((\"Python\")));\n    assert(reverseVowels((\"USA\")).equals((\"ASU\")));\n    assert(reverseVowels((\"ab\")).equals((\"ab\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val str2 = str1.toCharArray\n        var i = 0\n        var j = str2.length - 1\n        while (i < j) {\n            while (i < j && !vowels.contains(str2(i))) i += 1\n            while (i < j && !vowels.contains(str2(j))) j -= 1\n            if (i < j) {\n                val temp = str2(i)\n                str2(i) = str2(j)\n                str2(j) = temp\n                i += 1\n                j -= 1\n            }\n        }\n        str2.mkString",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        val str = str1.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            if (!vowels.contains(str(i))) {\n                i += 1\n            } else if (!vowels.contains(str(j))) {\n                j -= 1\n            } else {\n                val temp = str(i)\n                str(i) = str(j)\n                str(j) = temp\n                i += 1\n                j -= 1\n            }\n        }\n        str.mkString",
    "        val vowels = \"aeiouAEIOU\"\n        val str = str1.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            if (!vowels.contains(str(i))) {\n                i += 1\n            } else if (!vowels.contains(str(j))) {\n                j -= 1\n            } else {\n                val temp = str(i)\n                str(i) = str(j)\n                str(j) = temp\n                i += 1\n                j -= 1\n            }\n        }\n        str.mkString",
    "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val str2 = str1.toList\n        val str3 = str2.filter(vowels.contains(_))\n        val str4 = str2.map(x => if (vowels.contains(x)) str3.last else x)\n        str4.mkString",
    "        val vowels = \"aeiouAEIOU\"\n        val str = str1.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            while (i < j && !vowels.contains(str(i))) i += 1\n            while (i < j && !vowels.contains(str(j))) j -= 1\n            val temp = str(i)\n            str(i) = str(j)\n            str(j) = temp\n            i += 1\n            j -= 1\n        }\n        return str.mkString",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val str = str1.toLowerCase\n        val str2 = str.toCharArray\n        var i = 0\n        var j = str2.length - 1\n        while (i < j) {\n            if (!vowels.contains(str2(i))) {\n                i += 1\n            } else if (!vowels.contains(str2(j))) {\n                j -= 1\n            } else {\n                val temp = str2(i)\n                str2(i) = str2(j)\n                str2(j) = temp\n                i += 1\n                j -= 1\n            }\n        }\n        str2.mkString",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        val str = str1.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            while (i < j && !vowels.contains(str(i))) i += 1\n            while (i < j && !vowels.contains(str(j))) j -= 1\n            val temp = str(i)\n            str(i) = str(j)\n            str(j) = temp\n            i += 1\n            j -= 1\n        }\n        str.mkString",
    "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val str = str1.toLowerCase\n        val strArr = str.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while(i < j) {\n            if(!vowels.contains(strArr(i))) {\n                i += 1\n            } else if(!vowels.contains(strArr(j))) {\n                j -= 1\n            } else {\n                val temp = strArr(i)\n                strArr(i) = strArr(j)\n                strArr(j) = temp\n                i += 1\n                j -= 1\n            }\n        }\n        strArr.mkString",
    "        var str2 = \"\"\n        var vowels = List[Char]()\n        for (i <- 0 until str1.length) {\n            if (str1(i) == 'a' || str1(i) == 'e' || str1(i) == 'i' || str1(i) == 'o' || str1(i) == 'u') {\n                vowels = str1(i) :: vowels\n            }\n        }\n        var j = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) == 'a' || str1(i) == 'e' || str1(i) == 'i' || str1(i) == 'o' || str1(i) == 'u') {\n                str2 += vowels(j)\n                j += 1\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val str = str1.toLowerCase\n        val strArray = str.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            while (i < j && !vowels.contains(strArray(i))) i += 1\n            while (i < j && !vowels.contains(strArray(j))) j -= 1\n            val temp = strArray(i)\n            strArray(i) = strArray(j)\n            strArray(j) = temp\n            i += 1\n            j -= 1\n        }\n        strArray.mkString",
    "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val str = str1.toLowerCase\n        val strArray = str.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            if (vowels.contains(strArray(i)) && vowels.contains(strArray(j))) {\n                val temp = strArray(i)\n                strArray(i) = strArray(j)\n                strArray(j) = temp\n                i += 1\n                j -= 1\n            } else if (vowels.contains(strArray(i))) {\n                j -= 1\n            } else if (vowels.contains(strArray(j))) {\n                i += 1\n            } else {\n                i += 1\n                j -= 1\n            }\n        }\n        strArray.mkString",
    "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val str = str1.toLowerCase\n        var str2 = \"\"\n        var stack = new Stack[Char]\n        for (i <- 0 until str.length) {\n            if (vowels.contains(str(i))) stack.push(str(i))\n        }\n        for (i <- 0 until str.length) {\n            if (vowels.contains(str(i))) str2 += stack.pop\n            else str2 += str(i)\n        }\n        str2",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (str1(i) == 'a' || str1(i) == 'e' || str1(i) == 'i' || str1(i) == 'o' || str1(i) == 'u') {\n                str2 += str1(i)\n            }\n        }\n        str2 = str2.reverse\n        var str3 = \"\"\n        var j = 0\n        for (i <- 0 until str1.length) {\n            if (str1(i) == 'a' || str1(i) == 'e' || str1(i) == 'i' || str1(i) == 'o' || str1(i) == 'u') {\n                str3 += str2(j)\n                j += 1\n            } else {\n                str3 += str1(i)\n            }\n        }\n        str3",
    "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val str = str1.toLowerCase\n        val str2 = str.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            if (!vowels.contains(str2(i))) {\n                i += 1\n            } else if (!vowels.contains(str2(j))) {\n                j -= 1\n            } else {\n                val temp = str2(i)\n                str2(i) = str2(j)\n                str2(j) = temp\n                i += 1\n                j -= 1\n            }\n        }\n        str2.mkString",
    "        val vowels = \"aeiouAEIOU\"\n        val str = str1.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            while (i < j && !vowels.contains(str(i))) i += 1\n            while (i < j && !vowels.contains(str(j))) j -= 1\n            if (i < j) {\n                val temp = str(i)\n                str(i) = str(j)\n                str(j) = temp\n                i += 1\n                j -= 1\n            }\n        }\n        str.mkString",
    "        val vowels = \"aeiouAEIOU\"\n        val str = str1.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            while (i < j && !vowels.contains(str(i))) i += 1\n            while (i < j && !vowels.contains(str(j))) j -= 1\n            val temp = str(i)\n            str(i) = str(j)\n            str(j) = temp\n            i += 1\n            j -= 1\n        }\n        str.mkString",
    "        var str2 = \"\"\n        var vowels = List[Char]()\n        for (c <- str1) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowels = c :: vowels\n            }\n        }\n        var i = 0\n        for (c <- str1) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                str2 += vowels(i)\n                i += 1\n            } else {\n                str2 += c\n            }\n        }\n        return str2",
    "        val vowels = \"aeiouAEIOU\"\n        val str = str1.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            while (i < j && !vowels.contains(str(i))) i += 1\n            while (i < j && !vowels.contains(str(j))) j -= 1\n            val temp = str(i)\n            str(i) = str(j)\n            str(j) = temp\n            i += 1\n            j -= 1\n        }\n        str.mkString",
    "        val vowels = \"aeiouAEIOU\"\n        val str = str1.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            while (i < j && !vowels.contains(str(i))) i += 1\n            while (i < j && !vowels.contains(str(j))) j -= 1\n            if (i < j) {\n                val temp = str(i)\n                str(i) = str(j)\n                str(j) = temp\n            }\n            i += 1\n            j -= 1\n        }\n        str.mkString",
    "        var str2 = \"\"\n        var vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        for (i <- 0 until str1.length) {\n            if (vowels.contains(str1(i).toString)) {\n                str2 = str1(i) + str2\n            }\n        }\n        var str3 = \"\"\n        var j = 0\n        for (i <- 0 until str1.length) {\n            if (vowels.contains(str1(i).toString)) {\n                str3 = str3 + str2(j)\n                j += 1\n            } else {\n                str3 = str3 + str1(i)\n            }\n        }\n        return str3"
  ]
}