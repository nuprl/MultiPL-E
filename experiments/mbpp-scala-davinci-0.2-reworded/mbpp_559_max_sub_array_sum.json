{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far",
    "        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far",
    "        val sum = new Array[Long](size.toInt)\n        sum(0) = a(0)\n        var max = a(0)\n        for (i <- 1 until size.toInt) {\n            sum(i) = max(sum(i - 1) + a(i), a(i))\n            max = max(max, sum(i))\n        }\n        max",
    "        var max_so_far = 0L\n        var max_ending_here = 0L\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        max_so_far",
    "        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far",
    "        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far",
    "        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far",
    "        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far",
    "        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far"
  ]
}