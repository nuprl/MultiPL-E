{
  "name": "mbpp_586_split_Arr",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to split a list at the nth eelment and add the first part to the end.\n    def splitArr(l : List[Long], n : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(splitArr((List[Long](12l.toLong, 10l.toLong, 5l.toLong, 6l.toLong, 52l.toLong, 36l.toLong)), (2l)).equals((List[Long](5l.toLong, 6l.toLong, 52l.toLong, 36l.toLong, 12l.toLong, 10l.toLong))));\n    assert(splitArr((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong))));\n    assert(splitArr((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (3l)).equals((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 0l.toLong, 1l.toLong, 2l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val (a, b) = l.splitAt(n.toInt)\n        b ++ a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        var l1 = l.take(n.toInt)\n        var l2 = l.drop(n.toInt)\n        l2 ::: l1",
    "        if (n < 0) {\n            return l\n        }\n        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a,b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val nth = l(n.toInt)\n        val (first, second) = l.splitAt(n.toInt)\n        second ::: first",
    "        var ret = List[Long]()\n        var i = 0\n        while (i < l.length) {\n            if (i < n) ret = ret :+ l(i)\n            else ret = ret :+ l(i) :+ l(i)\n            i += 1\n        }\n        ret",
    "        val (first, second) = l.splitAt(n.toInt)\n        second ::: first",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a",
    "        val (a, b) = l.splitAt(n.toInt)\n        b ::: a"
  ]
}