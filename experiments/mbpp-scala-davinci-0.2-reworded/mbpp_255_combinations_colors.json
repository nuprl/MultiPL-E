{
  "name": "mbpp_255_combinations_colors",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    def combinationsColors(l : List[String], n : Long) : List[String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (1l)).equals((List[String]((\"Red\"), (\"Green\"), (\"Blue\")))));\n    assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (2l)).equals((List[String]((\"Red\", \"Red\"), (\"Red\", \"Green\"), (\"Red\", \"Blue\"), (\"Green\", \"Green\"), (\"Green\", \"Blue\"), (\"Blue\", \"Blue\")))));\n    assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (3l)).equals((List[String]((\"Red\", \"Red\", \"Red\"), (\"Red\", \"Red\", \"Green\"), (\"Red\", \"Red\", \"Blue\"), (\"Red\", \"Green\", \"Green\"), (\"Red\", \"Green\", \"Blue\"), (\"Red\", \"Blue\", \"Blue\"), (\"Green\", \"Green\", \"Green\"), (\"Green\", \"Green\", \"Blue\"), (\"Green\", \"Blue\", \"Blue\"), (\"Blue\", \"Blue\", \"Blue\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else if (l.isEmpty) acc\n            else combinationsColorsHelper(l.tail, n - 1, acc :+ l.head) ::: combinationsColorsHelper(l, n, acc)\n        }\n        combinationsColorsHelper(l, n, List())",
    "        if (n == 0) List(\"\")\n        else if (l.isEmpty) List()\n        else {\n            val x = combinationsColors(l.tail, n - 1)\n            x.map(l.head + _) ::: combinationsColors(l.tail, n)\n        }",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        if (n == 0) List(\"\")\n        else if (l.isEmpty) List()\n        else {\n            val c = combinationsColors(l.tail, n - 1)\n            c.map(l.head + _) ::: c\n        }",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        if (n == 0) return List(\"\")\n        val result = new ListBuffer[String]\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l, n - 1)\n            for (j <- 0 until subResult.length) {\n                result += l(i) + subResult(j)\n            }\n        }\n        return result.toList",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ (l(i) + l(j) + l(k))\n                }\n            }\n        }\n        return result",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        if (n == 0) List(\"\")\n        else l.flatMap(x => combinationsColors(l, n - 1).map(x + _))",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        if (n == 0) {\n            List(\"\")\n        } else {\n            for (i <- l; j <- combinationsColors(l, n - 1)) yield i + j\n        }",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else combinationsColors(l, n - 1, l.flatMap(x => acc.map(y => y + x)))\n        }\n        combinationsColors(l, n, List(\"\"))",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, List(\"\"))",
    "        if (n == 0) return List(\"\")\n        if (l.length == 0) return List()\n        val x = combinationsColors(l.tail, n - 1)\n        val y = combinationsColors(l.tail, n)\n        x.map(p => l.head + p) ::: y",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val temp = combinationsColors(l, n - 1)\n            for (j <- 0 until temp.length) {\n                result = result :+ l(i) + temp(j)\n            }\n        }\n        return result",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                for (i <- l) {\n                    combinationsColorsHelper(l, n - 1, acc :+ i)\n                }\n            }\n        }\n        combinationsColorsHelper(l, n, Nil)",
    "        if (n == 1) l\n        else {\n            val l2 = combinationsColors(l, n - 1)\n            for (e1 <- l; e2 <- l2) yield e1 + e2\n        }",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        if (n == 0) return List(\"\")\n        val result = new ListBuffer[String]\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l, n - 1)\n            for (j <- 0 until subResult.length) {\n                result += l(i) + subResult(j)\n            }\n        }\n        return result.toList",
    "        val colors = l.toArray\n        val size = colors.size\n        val result = new ArrayBuffer[String]\n        for (i <- 0 until pow(size, n).toInt) {\n            var temp = i\n            var s = \"\"\n            for (j <- 0 until n) {\n                s += colors(temp % size)\n                temp /= size\n            }\n            result += s\n        }\n        result.toList",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ (l(i) + l(j) + l(k))\n                }\n            }\n        }\n        return result",
    "        if (n == 0) return List(\"\")\n        if (l.isEmpty) return List()\n        val x = combinationsColors(l.tail, n - 1)\n        val y = combinationsColors(l.tail, n)\n        x.map(l.head + _) ::: y",
    "        if (n == 1) l\n        else {\n            var result = List[String]()\n            for (i <- 0 until l.length) {\n                val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until subResult.length) {\n                    result = result :+ (l(i) + subResult(j))\n                }\n            }\n            result\n        }",
    "        if (n == 0) return List(\"\")\n        val result = new ListBuffer[String]\n        for (i <- 0 until l.length) {\n            val sub = combinationsColors(l, n - 1)\n            for (s <- sub) {\n                result += (l(i) + s)\n            }\n        }\n        return result.toList",
    "        if (n == 1) l\n        else {\n            var result = List[String]()\n            for (i <- l) {\n                for (j <- combinationsColors(l, n - 1)) {\n                    result = (i + j) :: result\n                }\n            }\n            result\n        }",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, List(\"\"))",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield (x + y)\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        if (n == 1) l\n        else {\n            var result = List[String]()\n            for (i <- l) {\n                for (j <- combinationsColors(l, n - 1)) {\n                    result = result :+ i + j\n                }\n            }\n            result\n        }",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- acc; y <- l) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        result",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val sub = combinationsColors(l, n - 1)\n            for (j <- 0 until sub.length) {\n                result = result :+ l(i) + sub(j)\n            }\n        }\n        return result",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        var result = List[String]()\n        for (i <- 0 until l.length) {\n            for (j <- 0 until l.length) {\n                for (k <- 0 until l.length) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        result",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        if (n == 0) {\n            List(\"\")\n        } else {\n            for (i <- l; j <- combinationsColors(l, n - 1)) yield i + j\n        }",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else if (l.isEmpty) acc\n            else combinationsColorsHelper(l.tail, n, acc ++ combinationsColorsHelper(l, n - 1, List(l.head)))\n        }\n        combinationsColorsHelper(l, n, List())",
    "        if (n == 0) List(\"\")\n        else {\n            for {\n                i <- l\n                j <- combinationsColors(l, n - 1)\n            } yield i + j\n        }",
    "        var result = List[String]()\n        for (i <- 0 until l.length) {\n            for (j <- 0 until l.length) {\n                for (k <- 0 until l.length) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        result",
    "        if (n == 0) List(\"\")\n        else {\n            for {\n                i <- l\n                j <- combinationsColors(l, n - 1)\n            } yield i + j\n        }",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val acc2 = for (i <- l; j <- acc) yield i + j\n                combinationsColors(l, n - 1, acc2)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        if (n == 0) List(\"\")\n        else {\n            val list = l.flatMap(x => combinationsColors(l, n - 1).map(x + _))\n            list\n        }",
    "        if (n == 1) l\n        else {\n            val l2 = combinationsColors(l, n - 1)\n            for (x <- l; y <- l2) yield x + y\n        }",
    "        val combinations = new ListBuffer[String]\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    combinations += l(i) + l(j) + l(k)\n                }\n            }\n        }\n        combinations.toList",
    "        def combinationsColorsRec(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- acc; y <- l) yield x + \" \" + y\n                combinationsColorsRec(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsRec(l, n, l)",
    "        if (n == 0) List(\"\")\n        else l.flatMap(x => combinationsColors(l, n - 1).map(x + _))",
    "        l.combinations(n.toInt).toList.map(x => x.mkString(\"\"))",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        def combinationsColorsRec(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (i <- l; j <- acc) yield i + j\n                combinationsColorsRec(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsRec(l, n, l)",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l, n - 1)\n            for (j <- 0 until subResult.length) {\n                result = result :+ l(i) + subResult(j)\n            }\n        }\n        return result",
    "        if (n == 0) List(\"\")\n        else {\n            var result = List[String]()\n            for (i <- 0 until l.length) {\n                val subResult = combinationsColors(l.drop(i), n - 1)\n                for (j <- 0 until subResult.length) {\n                    result = result :+ (l(i) + subResult(j))\n                }\n            }\n            result\n        }",
    "        if (n == 0) return List(\"\")\n        if (l.length == 0) return List(\"\")\n        val x = combinationsColors(l.tail, n - 1)\n        val y = combinationsColors(l.tail, n)\n        x.map(l.head + _) ::: y",
    "        // Generate all combinations of the list with repetition\n        def combinations(l : List[String], n : Long) : List[List[String]] = {\n            if (n == 0) List(List())\n            else if (l.isEmpty) List()\n            else {\n                val x = combinations(l.tail, n - 1).map(l.head :: _)\n                x ::: combinations(l.tail, n)\n            }\n        }\n        // Convert the list of lists to a list of strings\n        combinations(l, n).map(x => x.mkString(\" \")).toList",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        if (n == 0) List(\"\")\n        else if (l.isEmpty) List()\n        else {\n            val x = combinationsColors(l, n - 1)\n            val y = combinationsColors(l.tail, n)\n            (for (i <- x; j <- l) yield i + j) ::: y\n        }",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        if (n == 0) List(\"\")\n        else if (l.isEmpty) List()\n        else {\n            val x = combinationsColors(l.tail, n - 1).map(l.head + _)\n            x ::: combinationsColors(l.tail, n)\n        }",
    "        val colors = List(\"red\", \"blue\", \"green\")\n        val combinations = ListBuffer[String]()\n        for (i <- 0 to colors.length - 1) {\n            for (j <- 0 to colors.length - 1) {\n                for (k <- 0 to colors.length - 1) {\n                    combinations += colors(i) + \" \" + colors(j) + \" \" + colors(k)\n                }\n            }\n        }\n        combinations.toList",
    "        if (n == 0) {\n            List(\"\")\n        } else {\n            for (x <- l; y <- combinationsColors(l, n - 1)) yield x + y\n        }",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                for (i <- l) {\n                    combinationsColorsHelper(l, n - 1, acc :+ i)\n                }\n            }\n        }\n        combinationsColorsHelper(l, n, List())",
    "        if (n == 1) l\n        else {\n            var result = List[String]()\n            for (i <- l) {\n                for (j <- combinationsColors(l, n - 1)) {\n                    result = (i + j) :: result\n                }\n            }\n            result\n        }",
    "        if (n == 0) List(\"\")\n        else l.flatMap(x => combinationsColors(l, n - 1).map(x + _))",
    "        if (n == 0) List(\"\")\n        else {\n            val result = new ListBuffer[String]\n            for (i <- 0 until l.length) {\n                val sub = combinationsColors(l.drop(i), n - 1)\n                for (j <- 0 until sub.length) result += l(i) + sub(j)\n            }\n            result.toList\n        }",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                var newAcc = acc\n                for (i <- l) {\n                    newAcc = combinationsColors(l, n - 1, i :: acc)\n                }\n                newAcc\n            }\n        }\n        combinationsColors(l, n, Nil)",
    "        val colors = List(\"red\", \"green\", \"blue\")\n        val combinations = colors.combinations(n.toInt)\n        combinations.toList.map(x => x.mkString(\"\"))",
    "        if (n == 1) l\n        else {\n            val result = new ListBuffer[String]\n            for (i <- 0 until l.length) {\n                val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until subResult.length) result += (l(i) + subResult(j))\n            }\n            result.toList\n        }",
    "        if (n == 0) List(\"\")\n        else if (l.isEmpty) List()\n        else combinationsColors(l.tail, n - 1).map(l.head + _) ::: combinationsColors(l.tail, n)",
    "        if (n == 0) List(\"\")\n        else if (l.length == 0) List()\n        else {\n            val x = combinationsColors(l.tail, n - 1).map(l.head + _)\n            x ::: combinationsColors(l.tail, n)\n        }",
    "        if (n == 0) return List(\"\")\n        val l2 = l.flatMap(x => combinationsColors(l, n - 1).map(y => x + y))\n        l2",
    "        if (n == 1) l\n        else {\n            var result = List[String]()\n            for (i <- 0 until l.length) {\n                val sub = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until sub.length) {\n                    result = result :+ l(i) + sub(j)\n                }\n            }\n            result\n        }",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- acc; y <- l) yield x + y\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        if (n == 0) List(\"\")\n        else l.flatMap(x => combinationsColors(l, n - 1).map(x + _))",
    "        if (n == 1) l\n        else {\n            val result = new ListBuffer[String]\n            for (i <- 0 until l.length) {\n                val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until subResult.length) result += l(i) + subResult(j)\n            }\n            result.toList\n        }",
    "        val colors = List(\"red\", \"green\", \"blue\")\n        val combinations = colors.combinations(2).toList\n        combinations.map(x => x.mkString(\"\"))",
    "        if (n == 0) {\n            List(\"\")\n        } else {\n            l.flatMap(x => combinationsColors(l, n - 1).map(x + _))\n        }",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n            for (j <- 0 until subResult.length) {\n                result = result :+ l(i) + subResult(j)\n            }\n        }\n        return result",
    "        if (n == 1) l\n        else {\n            var result = List[String]()\n            for (i <- l) {\n                for (j <- combinationsColors(l, n - 1)) {\n                    result = result :+ i + j\n                }\n            }\n            result\n        }",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n            for (j <- 0 until subResult.length) {\n                result = result :+ l(i) + subResult(j)\n            }\n        }\n        return result",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (e <- l; a <- acc) yield e + a\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        if (n == 0) {\n            List(\"\")\n        } else {\n            for (x <- l; y <- combinationsColors(l, n - 1)) yield x + y\n        }",
    "        if (n == 0) {\n            List(\"\")\n        } else {\n            for (x <- l; y <- combinationsColors(l, n - 1)) yield x + y\n        }",
    "        val colors = l.toArray\n        val combinations = new ArrayBuffer[String]\n        for (i <- 0 until colors.length) {\n            for (j <- 0 until colors.length) {\n                for (k <- 0 until colors.length) {\n                    combinations += colors(i) + colors(j) + colors(k)\n                }\n            }\n        }\n        combinations.toList",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (i <- l; j <- acc) yield i + j\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, List(\"\"))",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = (l(i) + l(j) + l(k)) :: result\n                }\n            }\n        }\n        return result",
    "        if (n == 1) l\n        else {\n            val temp = combinationsColors(l, n - 1)\n            for (x <- l; y <- temp) yield x + y\n        }",
    "        if (n == 0) List(\"\")\n        else l.flatMap(x => combinationsColors(l, n - 1).map(x + _))",
    "        def combinationsColorsRec(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsRec(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsRec(l, n, l)",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        if (n == 1) l\n        else {\n            val l2 = combinationsColors(l, n - 1)\n            l2 ::: (for (x <- l; y <- l2) yield x + y)\n        }",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val s = combinationsColors(l, n - 1)\n            for (j <- 0 until s.length) {\n                result = result :+ l(i) + s(j)\n            }\n        }\n        return result",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        if (n == 0) return List(\"\")\n        val result = new ListBuffer[String]\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l, n - 1)\n            for (j <- 0 until subResult.length) {\n                result += l(i) + subResult(j)\n            }\n        }\n        return result.toList",
    "        val colors = List(\"red\", \"green\", \"blue\")\n        val combinations = new ListBuffer[String]\n        for (i <- 0 to colors.length - 1) {\n            for (j <- 0 to colors.length - 1) {\n                for (k <- 0 to colors.length - 1) {\n                    combinations += colors(i) + colors(j) + colors(k)\n                }\n            }\n        }\n        combinations.toList",
    "        if (n == 1) l\n        else {\n            val temp = combinationsColors(l, n - 1)\n            for (i <- l; j <- temp) yield i + j\n        }",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else if (l.isEmpty) acc\n            else {\n                val newAcc = l.map(x => acc.map(y => y + x)).flatten\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, List(\"\"))",
    "        val result = new ListBuffer[String]\n        val colors = new ListBuffer[String]\n        for (i <- 0 until l.length) {\n            colors += l(i)\n        }\n        def combinations(l : ListBuffer[String], n : Long) : Unit = {\n            if (n == 0) {\n                result += colors.mkString(\"\")\n            } else {\n                for (i <- 0 until l.length) {\n                    colors += l(i)\n                    combinations(l, n - 1)\n                    colors -= l(i)\n                }\n            }\n        }\n        combinations(colors, n)\n        result.toList",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (i <- l; j <- acc) yield i + j\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        val colors = l.toArray\n        val result = new ListBuffer[String]\n        for (i <- 0 until colors.length) {\n            for (j <- 0 until colors.length) {\n                for (k <- 0 until colors.length) {\n                    result += colors(i) + colors(j) + colors(k)\n                }\n            }\n        }\n        result.toList",
    "        val colors = List(\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\")\n        val combinations = ListBuffer[String]()\n        for (i <- 0 to n.toInt) {\n            combinations += colors(i)\n        }\n        combinations.toList",
    "        val combinations = new ListBuffer[String]\n        def combinationsColorsHelper(l : List[String], n : Long, current : String) {\n            if (n == 0) combinations += current\n            else {\n                for (i <- 0 until l.length) {\n                    combinationsColorsHelper(l, n - 1, current + l(i))\n                }\n            }\n        }\n        combinationsColorsHelper(l, n, \"\")\n        combinations.toList",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ (l(i) + l(j) + l(k))\n                }\n            }\n        }\n        return result",
    "        if (n == 0) List(\"\")\n        else {\n            for {\n                i <- l\n                j <- combinationsColors(l, n - 1)\n            } yield i + j\n        }",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                var newAcc = List[String]()\n                for (i <- 0 until l.length) {\n                    newAcc = newAcc ++ combinationsColors(l, n - 1, acc.map(x => x + l(i)))\n                }\n                newAcc\n            }\n        }\n        combinationsColors(l, n, List(\"\"))",
    "        if (n == 1) l\n        else {\n            val l2 = combinationsColors(l, n - 1)\n            l2.flatMap(x => l.map(y => x + y))\n        }",
    "        if (n == 0) List(\"\")\n        else if (l.isEmpty) List()\n        else combinationsColors(l, n - 1).map(l(0) + _) ::: combinationsColors(l.tail, n)",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- acc; y <- l) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (i <- l; j <- acc) yield i + j\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else if (l.isEmpty) acc\n            else combinationsColors(l.tail, n - 1, acc :+ l.head) ::: combinationsColors(l, n, acc)\n        }\n        combinationsColors(l, n, List())",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ (l(i) + l(j) + l(k))\n                }\n            }\n        }\n        return result",
    "        var result = List[String]()\n        def combinationsColorsHelper(l : List[String], n : Long, current : String) : Unit = {\n            if (n == 0) result = current :: result\n            else {\n                for (i <- 0 until l.length) {\n                    combinationsColorsHelper(l, n - 1, current + l(i))\n                }\n            }\n        }\n        combinationsColorsHelper(l, n, \"\")\n        result",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (i <- l; j <- acc) yield i + j\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        if (n == 0) return List(\"\")\n        else {\n            var result = List[String]()\n            for (i <- 0 until l.length) {\n                val subResult = combinationsColors(l, n - 1)\n                for (j <- 0 until subResult.length) {\n                    result = result :+ l(i) + subResult(j)\n                }\n            }\n            return result\n        }",
    "        if (n == 0) List(\"\")\n        else if (l.length == 0) Nil\n        else combinationsColors(l, n - 1).map(l.head + _) ::: combinationsColors(l.tail, n)",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        if (n == 0) List(\"\")\n        else {\n            var result = List[String]()\n            for (i <- 0 until l.length) {\n                val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until subResult.length) {\n                    result = result :+ l(i) + subResult(j)\n                }\n            }\n            result\n        }",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l, n - 1)\n            for (j <- 0 until subResult.length) {\n                result = result :+ l(i) + subResult(j)\n            }\n        }\n        return result",
    "        if (n == 0) return List(\"\")\n        val result = new ListBuffer[String]\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n            for (j <- 0 until subResult.length) {\n                result += l(i) + subResult(j)\n            }\n        }\n        return result.toList",
    "        if (n == 0) return List(\"\")\n        val result = new ListBuffer[String]\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n            for (j <- 0 until subResult.length) {\n                result += l(i) + subResult(j)\n            }\n        }\n        return result.toList",
    "        val colors = List(\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\")\n        val combinations = colors.combinations(n.toInt)\n        combinations.map(x => x.mkString(\"\")).toList",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else if (l.isEmpty) acc\n            else {\n                val newAcc = acc ::: combinationsColorsHelper(l, n - 1, acc).map(x => x + l.head)\n                combinationsColorsHelper(l.tail, n, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, List())",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (i <- l; j <- acc) yield i + j\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, List(\"\"))",
    "        val colors = List(\"red\", \"green\", \"blue\")\n        val combinations = ListBuffer[String]()\n        for (i <- 0 to colors.length - 1) {\n            for (j <- 0 to colors.length - 1) {\n                for (k <- 0 to colors.length - 1) {\n                    combinations += colors(i) + colors(j) + colors(k)\n                }\n            }\n        }\n        combinations.toList",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                l.flatMap(x => combinationsColors(l, n - 1, x :: acc))\n            }\n        }\n        combinationsColors(l, n, List())",
    "        if (n == 0) return List(\"\")\n        if (l.length == 0) return List()\n        val x = combinationsColors(l, n - 1)\n        val y = combinationsColors(l.tail, n)\n        (for (i <- x; j <- y) yield i + l.head + j) ::: y",
    "        if (n == 0) List(\"\")\n        else l.flatMap(x => combinationsColors(l, n - 1).map(x + _))",
    "        if (n == 0) List(\"\")\n        else l.flatMap(x => combinationsColors(l, n - 1).map(x + _))",
    "        l.combinations(n.toInt).map(_.mkString).toList",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        if (n == 1) l\n        else {\n            var result = List[String]()\n            for (i <- 0 until l.length) {\n                val sub = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until sub.length) result = result :+ l(i) + sub(j)\n            }\n            result\n        }",
    "        if (n == 1) l\n        else {\n            val result = new ListBuffer[String]\n            for (i <- 0 until l.length) {\n                val sub = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until sub.length) result += l(i) + sub(j)\n            }\n            result.toList\n        }",
    "        if (n == 0) return List(\"\")\n        val result = new ListBuffer[String]\n        for (i <- 0 until l.length) {\n            val sub = combinationsColors(l, n - 1)\n            for (s <- sub) {\n                result += (l(i) + s)\n            }\n        }\n        return result.toList",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        if (n == 0) List(\"\")\n        else l.flatMap(x => combinationsColors(l, n - 1).map(x + _))",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else if (l.isEmpty) acc\n            else combinationsColorsHelper(l.tail, n - 1, acc :+ l.head) ::: combinationsColorsHelper(l, n, acc)\n        }\n        combinationsColorsHelper(l, n, List())",
    "        if (n == 0) List(\"\")\n        else l.flatMap(x => combinationsColors(l, n - 1).map(x + _))",
    "        if (n == 0) List(\"\")\n        else {\n            var result = List[String]()\n            for (i <- 0 until l.length) {\n                val subResult = combinationsColors(l.drop(i), n - 1)\n                for (j <- 0 until subResult.length) {\n                    result = (l(i) + subResult(j)) :: result\n                }\n            }\n            result\n        }",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val sub = combinationsColors(l, n - 1)\n            for (j <- 0 until sub.length) {\n                result = result :+ (l(i) + sub(j))\n            }\n        }\n        return result",
    "        var result = List[String]()\n        for (i <- 0 until l.length) {\n            for (j <- 0 until l.length) {\n                for (k <- 0 until l.length) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        result",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else if (l.isEmpty) acc\n            else combinationsColors(l.tail, n, acc ::: combinationsColors(l, n - 1, List(l.head)))\n        }\n        combinationsColors(l, n, List())",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        if (n == 1) l\n        else {\n            val result = new ListBuffer[String]\n            for (i <- 0 until l.length) {\n                val sub = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until sub.length) result += (l(i) + sub(j))\n            }\n            result.toList\n        }",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (i <- l; j <- acc) yield i + j\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (i <- 0 until l.length) yield {\n                    val newAcc2 = for (j <- 0 until acc.length) yield {\n                        l(i) + acc(j)\n                    }\n                    newAcc2.toList\n                }\n                combinationsColors(l, n - 1, newAcc.flatten.toList)\n            }\n        }\n        combinationsColors(l, n, List(\"\"))",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l.drop(i), n - 1)\n            for (j <- 0 until subResult.length) {\n                result = result :+ (l(i) + subResult(j))\n            }\n        }\n        return result",
    "        def combinationsColorsRec(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- acc; y <- l) yield x + y\n                combinationsColorsRec(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsRec(l, n, l)",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ (l(i) + l(j) + l(k))\n                }\n            }\n        }\n        return result",
    "        val combinations = new ListBuffer[String]\n        for (i <- 0 to l.length - 1) {\n            combinations += l(i)\n            for (j <- i + 1 to l.length - 1) {\n                combinations += l(i) + l(j)\n                for (k <- j + 1 to l.length - 1) {\n                    combinations += l(i) + l(j) + l(k)\n                }\n            }\n        }\n        combinations.toList",
    "        if (n == 0) List(\"\")\n        else {\n            var result = List[String]()\n            for (i <- 0 until l.length) {\n                val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until subResult.length) {\n                    result = (l(i) + subResult(j)) :: result\n                }\n            }\n            result\n        }",
    "        if (n == 0) return List(\"\")\n        val result = new ListBuffer[String]\n        for (i <- 0 to l.length - 1) {\n            val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n            for (j <- 0 to subResult.length - 1) {\n                result += l(i) + subResult(j)\n            }\n        }\n        return result.toList",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l, n - 1)\n            for (j <- 0 until subResult.length) {\n                result = result :+ (l(i) + subResult(j))\n            }\n        }\n        return result",
    "        var result = new ListBuffer[String]\n        for (i <- 0 to l.length - 1) {\n            for (j <- i to l.length - 1) {\n                result += l(i) + l(j)\n            }\n        }\n        return result.toList",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n            for (j <- 0 until subResult.length) {\n                result = result :+ l(i) + subResult(j)\n            }\n        }\n        return result",
    "        if (n == 0) List(\"\")\n        else {\n            val x = combinationsColors(l, n - 1)\n            val y = for (i <- l; j <- x) yield i + j\n            y\n        }",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        val combinations = new ListBuffer[String]\n        def combinationsColors(l : List[String], n : Long, current : String) {\n            if (n == 0) combinations += current\n            else {\n                for (i <- l) combinationsColors(l, n - 1, current + i)\n            }\n        }\n        combinationsColors(l, n, \"\")\n        combinations.toList",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val temp = for (i <- l; j <- acc) yield i + j\n                combinationsColors(l, n - 1, temp)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else if (l.isEmpty) acc\n            else combinationsColorsHelper(l.tail, n - 1, acc :+ l.head) ::: combinationsColorsHelper(l, n, acc)\n        }\n        combinationsColorsHelper(l, n, List())",
    "        if (n == 1) l\n        else {\n            var result = List[String]()\n            for (i <- 0 until l.length) {\n                val sublist = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until sublist.length) {\n                    result = result :+ l(i) + sublist(j)\n                }\n            }\n            result\n        }",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else if (l.isEmpty) acc\n            else combinationsColorsHelper(l.tail, n - 1, acc :+ l.head) ::: combinationsColorsHelper(l, n, acc)\n        }\n        combinationsColorsHelper(l, n, List())",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                for (i <- l) {\n                    combinationsColorsHelper(l, n - 1, i :: acc)\n                }\n                acc\n            }\n        }\n        combinationsColorsHelper(l, n, List())",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield (x + y)\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        if (n == 0) List(\"\")\n        else {\n            var result = List[String]()\n            for (i <- 0 until l.length) {\n                val subResult = combinationsColors(l, n - 1)\n                for (j <- 0 until subResult.length) {\n                    result = result :+ (l(i) + subResult(j))\n                }\n            }\n            result\n        }",
    "        if (n == 1) l\n        else {\n            val l2 = combinationsColors(l, n - 1)\n            l2 ::: (for (i <- l; j <- l2) yield i + j)\n        }",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        if (n == 0) {\n            List(\"\")\n        } else {\n            l.flatMap(x => combinationsColors(l, n - 1).map(x + _))\n        }",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n            for (j <- 0 until subResult.length) {\n                result = (l(i) + subResult(j)) :: result\n            }\n        }\n        return result",
    "        val combinations = new ListBuffer[String]\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    combinations += l(i) + l(j) + l(k)\n                }\n            }\n        }\n        combinations.toList",
    "        if (n == 1) l\n        else {\n            val result = new ListBuffer[String]\n            for (i <- 0 until l.length) {\n                val subResult = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until subResult.length) result += l(i) + subResult(j)\n            }\n            result.toList\n        }",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            result = result ::: combinationsColors(l.drop(i), n - 1).map(l(i) + _)\n        }\n        return result",
    "        var result = List[String]()\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result = result :+ l(i) + l(j) + l(k)\n                }\n            }\n        }\n        return result",
    "        if (n == 1) l\n        else l.flatMap(x => combinationsColors(l, n - 1).map(y => x + y))",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (i <- 0 until l.length) yield {\n                    for (j <- 0 until acc.length) yield {\n                        l(i) + acc(j)\n                    }\n                }\n                combinationsColors(l, n - 1, newAcc.flatten.toList)\n            }\n        }\n        combinationsColors(l, n, List(\"\"))",
    "        if (n == 0) return List(\"\")\n        val result = new ListBuffer[String]\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l, n - 1)\n            for (j <- 0 until subResult.length) {\n                result += l(i) + subResult(j)\n            }\n        }\n        return result.toList",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val subResult = combinationsColors(l.drop(i), n - 1)\n            for (j <- 0 until subResult.length) {\n                result = (l(i) + subResult(j)) :: result\n            }\n        }\n        return result",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (i <- l; j <- acc) yield i + j\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (i <- 0 until l.length) yield {\n                    val newAcc = for (j <- 0 until acc.length) yield {\n                        acc(j) + l(i)\n                    }\n                    newAcc.toList\n                }\n                combinationsColors(l, n - 1, acc ::: newAcc.toList.flatten)\n            }\n        }\n        combinationsColors(l, n, List(\"\"))",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        var result = new ListBuffer[String]\n        for (i <- 0 to l.length - 1) {\n            for (j <- 0 to l.length - 1) {\n                for (k <- 0 to l.length - 1) {\n                    result += l(i) + l(j) + l(k)\n                }\n            }\n        }\n        result.toList",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- acc; y <- l) yield x + y\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)",
    "        if (n == 0) return List(\"\")\n        var result = List[String]()\n        for (i <- 0 until l.length) {\n            val x = combinationsColors(l, n - 1)\n            for (j <- 0 until x.length) {\n                result = result :+ l(i) + x(j)\n            }\n        }\n        return result",
    "        if (n == 0) List(\"\")\n        else if (l.length == 0) List(\"\")\n        else combinationsColors(l.tail, n - 1).map(l.head + _) ::: combinationsColors(l.tail, n)",
    "        def combinationsColorsHelper(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColorsHelper(l, n - 1, newAcc)\n            }\n        }\n        combinationsColorsHelper(l, n, l)",
    "        if (n == 0) return List(\"\")\n        if (l.isEmpty) return List()\n        val x = combinationsColors(l.tail, n - 1)\n        x.map(l.head + _) ::: x",
    "        if (n == 1) l\n        else {\n            val result = new ListBuffer[String]\n            for (i <- 0 until l.length) {\n                val sub = combinationsColors(l.slice(i, l.length), n - 1)\n                for (j <- 0 until sub.length) result += l(i) + sub(j)\n            }\n            result.toList\n        }",
    "        if (n == 0) List(\"\")\n        else {\n            var result = List[String]()\n            for (i <- 0 until l.length) {\n                val subResult = combinationsColors(l.drop(i), n - 1)\n                for (j <- 0 until subResult.length) {\n                    result = result :+ (l(i) + subResult(j))\n                }\n            }\n            result\n        }",
    "        def combinationsColors(l : List[String], n : Long, acc : List[String]) : List[String] = {\n            if (n == 0) acc\n            else {\n                val newAcc = for (x <- l; y <- acc) yield x + y\n                combinationsColors(l, n - 1, newAcc)\n            }\n        }\n        combinationsColors(l, n, l)"
  ]
}