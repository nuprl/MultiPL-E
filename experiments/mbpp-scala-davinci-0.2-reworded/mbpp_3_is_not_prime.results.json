{
  "name": "mbpp_3_is_not_prime",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toInt\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpotj7qcdh.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toInt\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwyw4r97e.scala:8:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        var i = 3\n        while (i <= sqrt(n)) {\n            if (n % i == 0) return true\n            i += 2\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return true\n        }\n        if (n == 2) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return true\n        }\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) {\n                return true\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 2L to sqrt) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return true\n        }\n        if (n == 2) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return true\n        }\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) {\n                return true\n            }\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        var i = 2\n        while (i <= sqrt(n)) {\n            if (n % i == 0) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpacaf1jv4.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmydwmxpj.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 2L to sqrt) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if(n < 2) return true\n        if(n == 2) return false\n        if(n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for(i <- 3L to sqrt by 2) {\n            if(n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123987,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplvu9329h.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123987,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp6v_1xin_.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 2L to sqrt) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1zkstxtv.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3 to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ycxejh8.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to sqrtN by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmydwmxpj.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmydwmxpj.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        var i = 3\n        while (i <= sqrt(n)) {\n            if (n % i == 0) return true\n            i += 2\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        val sqrt = math.sqrt(n).toInt\n        for (i <- 2 to sqrt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpacaf1jv4.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmydwmxpj.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2L to sqrt(n).toLong) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3 to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ds1p9vb.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to sqrtN by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmydwmxpj.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuy96htbw.scala:8:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmydwmxpj.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        val sqrt_n = sqrt(n).toLong\n        for (i <- 2L to sqrt_n) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        val sqrtN = sqrt(n).toLong\n        for (i <- 2L to sqrtN) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpacaf1jv4.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        val sqrtN = sqrt(n).toLong\n        for (i <- 2 to sqrtN) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123996,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbsvdm19x.scala:9:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to sqrtN) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        var i = 2\n        while (i <= sqrt(n)) {\n            if (n % i == 0) return true\n            i += 1\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpacaf1jv4.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1zkstxtv.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmydwmxpj.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123996,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpq5fuo9ll.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwyw4r97e.scala:8:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpacaf1jv4.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3 to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ycxejh8.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to sqrtN by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpacaf1jv4.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpacaf1jv4.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmydwmxpj.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val max = sqrt(n).toLong\n        for (i <- 3L to max by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpacaf1jv4.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmydwmxpj.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppv3b5yu9.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to sqrt by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (sqrt : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1zkstxtv.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        val sqrtN = sqrt(n).toInt\n        for (i <- 2 to sqrtN) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2L to sqrt(n).toLong) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmydwmxpj.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        var i = 3\n        while (i <= sqrt(n).toInt) {\n            if (n % i == 0) return true\n            i += 2\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpacaf1jv4.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 2 to sqrt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123997,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpezavdr80.scala:7:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        var i = 3\n        while (i <= sqrt(n)) {\n            if (n % i == 0) return true\n            i += 2\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3 to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ds1p9vb.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to sqrtN by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnz4ognaf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        val sqrt = math.sqrt(n).toInt\n        for (i <- 2 to sqrt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwyw4r97e.scala:8:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}