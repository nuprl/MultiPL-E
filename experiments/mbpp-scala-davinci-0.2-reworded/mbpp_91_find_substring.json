{
  "name": "mbpp_91_find_substring",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if a string is present as a substring in a given list of string values.\n    def findSubstring(str1 : List[String], sub_str : String) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"ack\")) == (true));\n    assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"abc\")) == (false));\n    assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"ange\")) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        var found = false\n        for (s <- str1) {\n            if (s.contains(sub_str)) {\n                found = true\n            }\n        }\n        found",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        for (str <- str1) {\n            if (str.contains(sub_str)) return true\n        }\n        return false",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        for (s <- str1) {\n            if (s.contains(sub_str)) return true\n        }\n        false",
    "        str1.exists(x => x.contains(sub_str))",
    "        for (s <- str1) {\n            if (s.contains(sub_str)) return true\n        }\n        return false",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        for (str <- str1) {\n            if (str.contains(sub_str)) return true\n        }\n        return false",
    "        for (i <- 0 until str1.length) {\n            if (str1(i).contains(sub_str)) return true\n        }\n        return false",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        var flag = false\n        for (i <- 0 until str1.length) {\n            if (str1(i).contains(sub_str)) {\n                flag = true\n            }\n        }\n        return flag",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        for (str <- str1) {\n            if (str.contains(sub_str)) return true\n        }\n        return false",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        var found : Boolean = false\n        for (str <- str1) {\n            if (str.contains(sub_str)) {\n                found = true\n            }\n        }\n        return found",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        for (str <- str1) {\n            if (str.contains(sub_str)) return true\n        }\n        return false",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        for (str <- str1) {\n            if (str.contains(sub_str)) return true\n        }\n        return false",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        for (str <- str1) {\n            if (str.contains(sub_str)) return true\n        }\n        return false",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        for (s <- str1) {\n            if (s.contains(sub_str)) return true\n        }\n        return false",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        var result : Boolean = false\n        for(i <- 0 until str1.length) {\n            if(str1(i).contains(sub_str)) {\n                result = true\n            }\n        }\n        return result",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        if (str1.isEmpty) false\n        else if (str1.head.contains(sub_str)) true\n        else findSubstring(str1.tail, sub_str)",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        for (i <- str1) {\n            if (i.contains(sub_str)) return true\n        }\n        return false",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(_.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))",
    "        str1.exists(x => x.contains(sub_str))"
  ]
}