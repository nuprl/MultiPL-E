{
  "name": "mbpp_245_max_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            left(i) = max(left(i - 1) + arr(i), arr(i))\n        }\n        for (i <- n - 2 to 0 by -1) {\n            right(i) = max(right(i + 1) + arr(i), arr(i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplqs3grz7.scala:22)\n\tat Problem.main(tmplqs3grz7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max max (left(i) + right(i) - arr(i))\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2q0ew3z4.scala:22)\n\tat Problem.main(tmp2q0ew3z4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = new Array[Long](n)\n        val right = new Array[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && left(i) < left(j) + arr(i)) left(i) = left(j) + arr(i)\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && right(i) < right(j) + arr(i)) right(i) = right(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (max < left(i) + right(i) - arr(i)) max = left(i) + right(i) - arr(i)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdrjj4ube.scala:29)\n\tat Problem.main(tmpdrjj4ube.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            var sum = 0L\n            var j = i\n            while (j < arr.length && arr(j) > arr(j - 1)) {\n                sum += arr(j)\n                j += 1\n            }\n            while (j < arr.length && arr(j) < arr(j - 1)) {\n                sum += arr(j)\n                j += 1\n            }\n            max = max max sum\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.maxSum$$anonfun$1(tmpa8e8_w_j.scala:10)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.maxSum(tmpa8e8_w_j.scala:19)\n\tat Problem$.main(tmpa8e8_w_j.scala:23)\n\tat Problem.main(tmpa8e8_w_j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp1(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = arr(i)\n            for (j <- i + 1 until n) {\n                dp(i)(j) = max(dp(i)(j - 1), arr(j))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                max = max(max, dp(i)(j) * (j - i + 1))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp775zr0bl.scala:11:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                dp(i)(j) = max(dp(i)(j - \u001b[31m1\u001b[0m), arr(j))\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp775zr0bl.scala:17:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                max = max(max, dp(i)(j) * (j - i + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0) left(i) = max(left(i), left(i - 1) + arr(i))\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1) right(i) = max(right(i), right(i + 1) + arr(i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp29_z_yo0.scala:24)\n\tat Problem.main(tmp29_z_yo0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0) left(i) = max(left(i), left(i - 1) + arr(i))\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1) right(i) = max(right(i), right(i + 1) + arr(i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp29_z_yo0.scala:24)\n\tat Problem.main(tmp29_z_yo0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:12:47 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:18:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptoo7s_sx.scala:30)\n\tat Problem.main(tmptoo7s_sx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max max (left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl0os293c.scala:24)\n\tat Problem.main(tmpl0os293c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp1(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                if (arr(i) < arr(j)) dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpff_t7v02.scala:23)\n\tat Problem.main(tmpff_t7v02.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptoo7s_sx.scala:30)\n\tat Problem.main(tmptoo7s_sx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        left(0) = arr(0)\n        right(n - 1) = arr(n - 1)\n        for (i <- 1 until n) {\n            left(i) = max(left(i - 1) + arr(i), arr(i))\n            right(n - 1 - i) = max(right(n - i) + arr(n - 1 - i), arr(n - 1 - i))\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpurdcy0fm.scala:12:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            left(i) = max(left(i - \u001b[31m1\u001b[0m) + arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpurdcy0fm.scala:13:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            right(n - \u001b[31m1\u001b[0m - i) = max(right(n - i) + arr(n - \u001b[31m1\u001b[0m - i), arr(n - \u001b[31m1\u001b[0m - i))\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpurdcy0fm.scala:17:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val dp = Array.fill(arr.length)(0L)\n        for (i <- 0 until arr.length) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4mn7c_6q.scala:16)\n\tat Problem.main(tmp4mn7c_6q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmposxypxh8.scala:11:45 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmposxypxh8.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmposxypxh8.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, dp(i) + dp2(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max max (left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl0os293c.scala:24)\n\tat Problem.main(tmpl0os293c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, lis(i) + lds(i) - arr(i))\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphidsfglm.scala:12:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphidsfglm.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphidsfglm.scala:22:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) max = max(max, lis(i) + lds(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(j) > arr(i)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsxsp2_ml.scala:30)\n\tat Problem.main(tmpsxsp2_ml.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val l = Array.fill(n)(0L)\n        val r = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            l(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) l(i) = max(l(i), l(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            r(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) r(i) = max(r(i), r(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, l(i) + r(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:12:47 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:18:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = arr(i)\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                dp(i)(j) = max(dp(i)(j - 1) + arr(j), dp(i)(j))\n            }\n        }\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                dp(j)(i) = max(dp(j)(i), dp(j - 1)(i) + arr(j))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                max = max(max, dp(i)(j))\n            }\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphfgbldcf.scala:11:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                dp(i)(j) = max(dp(i)(j - \u001b[31m1\u001b[0m) + arr(j), dp(i)(j))\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphfgbldcf.scala:16:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                dp(j)(i) = max(dp(j)(i), dp(j - \u001b[31m1\u001b[0m)(i) + arr(j))\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphfgbldcf.scala:22:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                max = max(max, dp(i)(j))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val maxSum = Array.ofDim[Long](n)\n        for (i <- 0 until n) maxSum(i) = arr(i)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && maxSum(i) < maxSum(j) + arr(i)) maxSum(i) = maxSum(j) + arr(i)\n            }\n        }\n        maxSum.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6vslg9do.scala:17)\n\tat Problem.main(tmp6vslg9do.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    lis(i) = max(lis(i), lis(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    lds(i) = max(lds(i), lds(j) + arr(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, lis(i) + lds(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvw0kxq9p.scala:13:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    lis(i) = max(lis(i), lis(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvw0kxq9p.scala:21:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    lds(i) = max(lds(i), lds(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvw0kxq9p.scala:27:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            max = max(max, lis(i) + lds(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) max = max max dp(j)\n            }\n            dp(i) = max + arr(i)\n        }\n        dp.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxtktrtd2.scala:18)\n\tat Problem.main(tmpxtktrtd2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.size\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            val sum = left(i) + right(i) - arr(i)\n            if (sum > max) max = sum\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbgtnhy10.scala:25)\n\tat Problem.main(tmpbgtnhy10.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = 1\n            dp(i)(1) = 1\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk21awmb1.scala:33)\n\tat Problem.main(tmpk21awmb1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + arr(i)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max max dp(i)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjldm_u_0.scala:24)\n\tat Problem.main(tmpjldm_u_0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && lis(i) < lis(j) + arr(i)) {\n                    lis(i) = lis(j) + arr(i)\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j) && lds(i) < lds(j) + arr(i)) {\n                    lds(i) = lds(j) + arr(i)\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (max < lis(i) + lds(i) - arr(i)) max = lis(i) + lds(i) - arr(i)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && left(i) < left(j) + arr(i)) left(i) = left(j) + arr(i)\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j) && right(i) < right(j) + arr(i)) right(i) = right(j) + arr(i)\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max max (left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl0os293c.scala:24)\n\tat Problem.main(tmpl0os293c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp25pt2vtz.scala:13:30 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp25pt2vtz.scala:21:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp25pt2vtz.scala:27:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpujp4j92k.scala:17)\n\tat Problem.main(tmpujp4j92k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0) left(i) = max(left(i), left(i - 1) + arr(i))\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1) right(i) = max(right(i), right(i + 1) + arr(i))\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv08xagoa.scala:11:33 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mif\u001b[0m (i > \u001b[31m0\u001b[0m) left(i) = max(left(i), left(i - \u001b[31m1\u001b[0m) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv08xagoa.scala:15:38 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mif\u001b[0m (i < n - \u001b[31m1\u001b[0m) right(i) = max(right(i), right(i + \u001b[31m1\u001b[0m) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv08xagoa.scala:19:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = new Array[Long](n)\n        val lds = new Array[Long](n)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            lds(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && lis(i) < lis(j) + arr(i)) lis(i) = lis(j) + arr(i)\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && lds(i) < lds(j) + arr(i)) lds(i) = lds(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (lis(i) + lds(i) - arr(i) > max) max = lis(i) + lds(i) - arr(i)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) ans = max(ans, dp1(i) + dp2(i) - arr(i))\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:12:47 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:18:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    lis(i) = max(lis(i), lis(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    lds(i) = max(lds(i), lds(j) + arr(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, lis(i) + lds(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvw0kxq9p.scala:13:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    lis(i) = max(lis(i), lis(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvw0kxq9p.scala:21:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    lds(i) = max(lds(i), lds(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvw0kxq9p.scala:27:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            max = max(max, lis(i) + lds(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                if (arr(j) > arr(i)) dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqfa38mq.scala:23)\n\tat Problem.main(tmpkqfa38mq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = arr(i)\n        }\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                dp(i)(j) = max(dp(i)(j - 1) + arr(j), dp(i)(j))\n            }\n        }\n        for (i <- 0 until n) {\n            for (j <- i - 1 to 0 by -1) {\n                dp(i)(j) = max(dp(i)(j + 1) + arr(j), dp(i)(j))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                result = max(result, dp(i)(j))\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123889,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpprt6xty5.scala:30)\n\tat Problem.main(tmpprt6xty5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, left(i) + right(i) - arr(i))\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppcgfpprs.scala:12:47 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppcgfpprs.scala:18:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppcgfpprs.scala:22:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            val sum = left(i) + right(i) - arr(i)\n            if (sum > max) max = sum\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpttqyq63k.scala:25)\n\tat Problem.main(tmpttqyq63k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && left(i) < left(j) + arr(i)) left(i) = left(j) + arr(i)\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && right(i) < right(j) + arr(i)) right(i) = right(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (max < left(i) + right(i) - arr(i)) max = left(i) + right(i) - arr(i)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val maxSum = Array.fill(n)(0L)\n        val maxSumReverse = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            maxSum(i) = arr(i)\n            maxSumReverse(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    maxSum(i) = max(maxSum(i), maxSum(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(j) < arr(i)) {\n                    maxSumReverse(i) = max(maxSumReverse(i), maxSumReverse(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, maxSum(i) + maxSumReverse(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpai9ofo9y.scala:21)\n\tat Problem.main(tmpai9ofo9y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, dp(i) + dp2(i) - arr(i))\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphnqecogo.scala:11:45 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphnqecogo.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphnqecogo.scala:22:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) max = max(max, dp(i) + dp2(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcqas06rp.scala:12:47 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcqas06rp.scala:18:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcqas06rp.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp1(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            val sum = left(i) + right(i) - arr(i)\n            if (sum > max) max = sum\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpttqyq63k.scala:25)\n\tat Problem.main(tmpttqyq63k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcqas06rp.scala:12:47 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcqas06rp.scala:18:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcqas06rp.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && left(i) < left(j) + arr(i)) left(i) = left(j) + arr(i)\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && right(i) < right(j) + arr(i)) right(i) = right(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (max < left(i) + right(i) - arr(i)) max = left(i) + right(i) - arr(i)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            left(i) = max(left(i - 1) + arr(i), arr(i))\n        }\n        for (i <- n - 2 to 0 by -1) {\n            right(i) = max(right(i + 1) + arr(i), arr(i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplqs3grz7.scala:22)\n\tat Problem.main(tmplqs3grz7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, lis(i) + lds(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbx3x03au.scala:12:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbx3x03au.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbx3x03au.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, lis(i) + lds(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, dp(i) + dp2(i) - arr(i))\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphnqecogo.scala:11:45 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphnqecogo.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphnqecogo.scala:22:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) max = max(max, dp(i) + dp2(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val maxSum = Array.fill(n)(0L)\n        val maxSumRev = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            maxSum(i) = arr(i)\n            maxSumRev(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    maxSum(i) = max(maxSum(i), maxSum(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) {\n                    maxSumRev(i) = max(maxSumRev(i), maxSumRev(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, maxSum(i) + maxSumRev(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && lis(i) < lis(j) + arr(i)) lis(i) = lis(j) + arr(i)\n            }\n        }\n        for (i <- (n - 1) to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- (n - 1) to i by -1) {\n                if (arr(i) > arr(j) && lds(i) < lds(j) + arr(i)) lds(i) = lds(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (lis(i) + lds(i) - arr(i) > max) max = lis(i) + lds(i) - arr(i)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:12:47 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:18:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n            ans = max(ans, left(i) + right(i) - arr(i))\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            left(i) = max(left(i - 1), arr(i) + left(i - 1))\n        }\n        for (i <- n - 2 to 0 by -1) {\n            right(i) = max(right(i + 1), arr(i) + right(i + 1))\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbmn4uci7.scala:10:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            left(i) = max(left(i - \u001b[31m1\u001b[0m), arr(i) + left(i - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbmn4uci7.scala:13:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            right(i) = max(right(i + \u001b[31m1\u001b[0m), arr(i) + right(i + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbmn4uci7.scala:17:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, dp(i) + dp2(i) - arr(i))\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphnqecogo.scala:11:45 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphnqecogo.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphnqecogo.scala:22:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) max = max(max, dp(i) + dp2(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp1(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                if (arr(i) < arr(j)) dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgem2xviu.scala:26)\n\tat Problem.main(tmpgem2xviu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp0ld653zq.scala:12:45 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp0ld653zq.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp0ld653zq.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, dp(i) + dp2(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && left(i) < left(j) + arr(i)) left(i) = left(j) + arr(i)\n            }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- n - 1 to i + 1 by -1) {\n                if (arr(i) > arr(j) && right(i) < right(j) + arr(i)) right(i) = right(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (max < left(i) + right(i) - arr(i)) max = left(i) + right(i) - arr(i)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp1(i) = max(dp1(i), dp1(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp1(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpujp4j92k.scala:17)\n\tat Problem.main(tmpujp4j92k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123898,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max max (left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl0os293c.scala:24)\n\tat Problem.main(tmpl0os293c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, lis(i) + lds(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp99pp4kni.scala:12:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(i) > arr(j)) lis(i) = max(lis(i), lis(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp99pp4kni.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(i) > arr(j)) lds(i) = max(lds(i), lds(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp99pp4kni.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, lis(i) + lds(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpzu5866kk.scala:11:45 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpzu5866kk.scala:16:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            max = max(max, dp(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:12:47 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:18:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp1txxuq6h.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i) && lis(i) < lis(j) + arr(i)) lis(i) = lis(j) + arr(i)\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i) && lds(i) < lds(j) + arr(i)) lds(i) = lds(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (max < lis(i) + lds(i) - arr(i)) max = lis(i) + lds(i) - arr(i)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            val sum = left(i) + right(i) - arr(i)\n            if (sum > max) max = sum\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpttqyq63k.scala:25)\n\tat Problem.main(tmpttqyq63k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123895,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2blxuu7s.scala:12:47 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2blxuu7s.scala:18:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2blxuu7s.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (i > 0 && i < n - 1) max = max max (left(i - 1) + right(i + 1))\n            else if (i == 0) max = max max right(i + 1)\n            else max = max max left(i - 1)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjjijrbov.scala:26)\n\tat Problem.main(tmpjjijrbov.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp1(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmposxypxh8.scala:11:45 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmposxypxh8.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmposxypxh8.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, dp(i) + dp2(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) + dp2(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) ans = max(ans, dp1(i) + dp2(i) - arr(i))\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123901,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2h3h57h2.scala:17)\n\tat Problem.main(tmp2h3h57h2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            val sum = left(i) + right(i) - arr(i)\n            if (sum > max) max = sum\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpttqyq63k.scala:25)\n\tat Problem.main(tmpttqyq63k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            val sum = left(i) + right(i) - arr(i)\n            if (sum > result) result = sum\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123902,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppqq1hyt5.scala:25)\n\tat Problem.main(tmppqq1hyt5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, lis(i) + lds(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbx3x03au.scala:12:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbx3x03au.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbx3x03au.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, lis(i) + lds(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptoo7s_sx.scala:30)\n\tat Problem.main(tmptoo7s_sx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val increasing = Array.fill(n)(0L)\n        val decreasing = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            increasing(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) increasing(i) = max(increasing(i), increasing(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            decreasing(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) decreasing(i) = max(decreasing(i), decreasing(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, increasing(i) + decreasing(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, lis(i) + lds(i) - arr(i))\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphidsfglm.scala:12:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphidsfglm.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphidsfglm.scala:22:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) max = max(max, lis(i) + lds(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0)\n        val lds = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    lis(i) = max(lis(i), lis(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    lds(i) = max(lds(i), lds(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, lis(i) + lds(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123902,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjo53nda.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            lis(i) = arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Long\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjo53nda.scala:13:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    lis(i) = max(lis(i), lis(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    Long\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjo53nda.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            lds(i) = arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Long\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjo53nda.scala:21:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    lds(i) = max(lds(i), lds(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    Long\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, dp(i))\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123899,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpkej21xcj.scala:11:45 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mif\u001b[0m (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpkej21xcj.scala:15:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) max = max(max, dp(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp1(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0) + dp(i)(1) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdrjj4ube.scala:29)\n\tat Problem.main(tmpdrjj4ube.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        dp1(0) = arr(0)\n        dp2(n - 1) = arr(n - 1)\n        for (i <- 1 until n) {\n            dp1(i) = arr(i) + dp1(i - 1)\n            dp2(n - 1 - i) = arr(n - 1 - i) + dp2(n - i)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            val sum = dp1(i) + dp2(i) - arr(i)\n            if (sum > max) max = sum\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123903,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpugxlvz6x.scala:23)\n\tat Problem.main(tmpugxlvz6x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val increasing = Array.fill(n)(0L)\n        val decreasing = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            increasing(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) increasing(i) = max(increasing(i), increasing(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            decreasing(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) decreasing(i) = max(decreasing(i), decreasing(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, increasing(i) + decreasing(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpai9ofo9y.scala:21)\n\tat Problem.main(tmpai9ofo9y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max max (left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl0os293c.scala:24)\n\tat Problem.main(tmpl0os293c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp1(i) + dp2(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplxcpv19z.scala:12:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplxcpv19z.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplxcpv19z.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, dp1(i) + dp2(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max max (left(i) + right(i) - arr(i))\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2q0ew3z4.scala:22)\n\tat Problem.main(tmp2q0ew3z4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.ofDim[Long](n)\n        val right = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val increasing = Array.fill(n)(0L)\n        val decreasing = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            increasing(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) increasing(i) = max(increasing(i), increasing(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            decreasing(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) decreasing(i) = max(decreasing(i), decreasing(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, increasing(i) + decreasing(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpai9ofo9y.scala:21)\n\tat Problem.main(tmpai9ofo9y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123903,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4q1pygil.scala:18)\n\tat Problem.main(tmp4q1pygil.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val l = Array.fill(n)(0L)\n        val r = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            l(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) l(i) = max(l(i), l(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            r(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) r(i) = max(r(i), r(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, l(i) + r(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            right(i) = arr(i)\n            if (i > 0) {\n                if (arr(i) > arr(i - 1)) left(i) += left(i - 1)\n                if (arr(n - i - 1) > arr(n - i)) right(n - i - 1) += right(n - i)\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpci7119gh.scala:24)\n\tat Problem.main(tmpci7119gh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            lds(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n                if (arr(j) > arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        lis.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqp22sbs7.scala:20)\n\tat Problem.main(tmpqp22sbs7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            val sum = left(i) + right(i) - arr(i)\n            if (sum > max) max = sum\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpttqyq63k.scala:25)\n\tat Problem.main(tmpttqyq63k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123901,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2h3h57h2.scala:17)\n\tat Problem.main(tmp2h3h57h2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) + arr(i))\n                }\n            }\n        }\n        dp.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123906,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi50v0h1f.scala:19)\n\tat Problem.main(tmpi50v0h1f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = new Array[Long](n)\n        val right = new Array[Long](n)\n        left(0) = arr(0)\n        right(n - 1) = arr(n - 1)\n        for (i <- 1 until n) {\n            left(i) = max(left(i - 1), arr(i))\n        }\n        for (i <- n - 2 to 0 by -1) {\n            right(i) = max(right(i + 1), arr(i))\n        }\n        var sum = 0L\n        for (i <- 0 until n) {\n            sum += min(left(i), right(i))\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123906,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj831tpv1.scala:24)\n\tat Problem.main(tmpj831tpv1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, lis(i) + lds(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbx3x03au.scala:12:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbx3x03au.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpbx3x03au.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, lis(i) + lds(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptoo7s_sx.scala:30)\n\tat Problem.main(tmptoo7s_sx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, lis(i) + lds(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) max = max(max, lis(i) + lds(i) - arr(i))\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpkv217t9z.scala:12:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lis(i) = max(lis(i), lis(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpkv217t9z.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) lds(i) = max(lds(i), lds(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpkv217t9z.scala:22:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) max = max(max, lis(i) + lds(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n            ans = max(ans, dp(i) + dp2(i) - arr(i))\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123906,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            val sum = left(i) + right(i) - arr(i)\n            if (sum > max) max = sum\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123890,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpttqyq63k.scala:25)\n\tat Problem.main(tmpttqyq63k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp1 = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp1(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp1(i) = max(dp1(i), dp1(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp1(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val lis = Array.fill(n)(0L)\n        val lds = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            lis(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && lis(i) < lis(j) + arr(i)) lis(i) = lis(j) + arr(i)\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            lds(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j) && lds(i) < lds(j) + arr(i)) lds(i) = lds(j) + arr(i)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            if (lis(i) + lds(i) - arr(i) > max) max = lis(i) + lds(i) - arr(i)\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123906,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0 && arr(i) > arr(i - 1)) left(i) += left(i - 1)\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1 && arr(i) > arr(i + 1)) right(i) += right(i + 1)\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max max (left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl0os293c.scala:24)\n\tat Problem.main(tmpl0os293c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                }\n                if (arr(i) < arr(j)) {\n                    dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i)(0))\n            result = max(result, dp(i)(1))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptoo7s_sx.scala:30)\n\tat Problem.main(tmptoo7s_sx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            left(i) = max(left(i - 1) + arr(i), arr(i))\n        }\n        for (i <- n - 2 to 0 by -1) {\n            right(i) = max(right(i + 1) + arr(i), arr(i))\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmph_ibx_qn.scala:10:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            left(i) = max(left(i - \u001b[31m1\u001b[0m) + arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmph_ibx_qn.scala:13:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            right(i) = max(right(i + \u001b[31m1\u001b[0m) + arr(i), arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmph_ibx_qn.scala:17:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0) left(i) = max(left(i), left(i - 1) + arr(i))\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1) right(i) = max(right(i), right(i + 1) + arr(i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp29_z_yo0.scala:24)\n\tat Problem.main(tmp29_z_yo0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        val dp2 = Array.fill(n)(0L)\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, dp(i) + dp2(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmposxypxh8.scala:11:45 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmposxypxh8.scala:18:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmposxypxh8.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, dp(i) + dp2(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        val dp2 = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            dp2(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) dp2(i) = max(dp2(i), dp2(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i) + dp2(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    left(i) = max(left(i), left(j) + arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) {\n                    right(i) = max(right(i), right(j) + arr(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp25pt2vtz.scala:13:30 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp25pt2vtz.scala:21:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp25pt2vtz.scala:27:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpai9ofo9y.scala:21)\n\tat Problem.main(tmpai9ofo9y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = new Array[Long](n)\n        val right = new Array[Long](n)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- i + 1 until n) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            max = max(max, left(i) + right(i) - arr(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmgbod52y.scala:12:47 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmgbod52y.scala:18:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mif\u001b[0m (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmgbod52y.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            max = max(max, left(i) + right(i) - arr(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 1 until n) {\n            left(i) = max(left(i - 1), arr(i - 1))\n            right(n - i - 1) = max(right(n - i), arr(n - i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123906,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpel23slhu.scala:20)\n\tat Problem.main(tmpel23slhu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            if (i > 0) left(i) = max(left(i), left(i - 1) + arr(i))\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            if (i < n - 1) right(i) = max(right(i), right(i + 1) + arr(i))\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, left(i) + right(i) - arr(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510563,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp29_z_yo0.scala:24)\n\tat Problem.main(tmp29_z_yo0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            left(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) left(i) = max(left(i), left(j) + arr(i))\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            right(i) = arr(i)\n            for (j <- n - 1 to i by -1) {\n                if (arr(j) < arr(i)) right(i) = max(right(i), right(j) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, left(i) + right(i) - arr(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        val dp = Array.ofDim[Long](n, 2)\n        for (i <- 0 until n) {\n            dp(i)(0) = arr(i)\n            dp(i)(1) = arr(i)\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i)(0) = max(dp(i)(0), dp(j)(0) + arr(i))\n                if (arr(i) < arr(j)) dp(i)(1) = max(dp(i)(1), dp(j)(1) + arr(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result = max(result, dp(i)(0))\n        for (i <- 0 until n) result = max(result, dp(i)(1))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123906,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppj89pkpn.scala:24)\n\tat Problem.main(tmppj89pkpn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}