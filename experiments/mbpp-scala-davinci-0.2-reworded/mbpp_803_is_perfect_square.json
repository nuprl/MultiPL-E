{
  "name": "mbpp_803_is_perfect_square",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    def isPerfectSquare(n : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isPerfectSquare((10l)) == (false));\n    assert(isPerfectSquare((36l)) == (true));\n    assert(isPerfectSquare((14l)) == (false));\n    assert(isPerfectSquare((196l)) == (true));\n    assert(isPerfectSquare((125l)) == (false));\n    assert(isPerfectSquare((15625l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var l = 1L; var r = n;\n        while (l <= r) {\n            val mid = (l + r) / 2;\n            if (mid * mid == n) return true;\n            else if (mid * mid < n) l = mid + 1;\n            else r = mid - 1;\n        }\n        return false;",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var x = n\n        while (x * x > n) {\n            x = (x + n / x) >> 1\n        }\n        x * x == n",
    "        var l = 1L; var r = n;\n        while (l <= r) {\n            val mid = (l + r) / 2;\n            if (mid * mid == n) return true;\n            else if (mid * mid < n) l = mid + 1;\n            else r = mid - 1;\n        }\n        return false;",
    "        var l = 1L\n        var r = n\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (m * m == n) return true\n            else if (m * m < n) l = m + 1\n            else r = m - 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            i += 1\n        }\n        if (i * i == n) true else false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 1\n        while (i * i < n) {\n            i += 1\n        }\n        if (i * i == n) true else false",
    "        var x = n\n        while (x * x > n) {\n            x = (x + n / x) / 2\n        }\n        x * x == n",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var x = n\n        while (x * x > n) {\n            x = (x + n / x) / 2\n        }\n        return x * x == n",
    "        var l = 1L\n        var r = n\n        while (l <= r) {\n            val m = l + (r - l) / 2\n            if (m * m == n) return true\n            else if (m * m < n) l = m + 1\n            else r = m - 1\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        false",
    "        var x = n\n        while (x * x > n) {\n            x = (x + n / x) / 2\n        }\n        return x * x == n",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        false",
    "        var i = 1\n        while (i * i <= n) {\n            if (i * i == n) return true\n            i += 1\n        }\n        return false",
    "        var l = 1L; var r = n;\n        while (l <= r) {\n            val m = l + (r - l) / 2;\n            if (m * m == n) return true;\n            else if (m * m < n) l = m + 1;\n            else r = m - 1;\n        }\n        return false;",
    "        var x = n\n        while (x * x > n) {\n            x = (x + n / x) / 2\n        }\n        x * x == n",
    "        var l = 1L; var r = n;\n        while (l <= r) {\n            val mid = l + (r - l) / 2;\n            if (mid * mid == n) return true;\n            else if (mid * mid < n) l = mid + 1;\n            else r = mid - 1;\n        }\n        return false;"
  ]
}