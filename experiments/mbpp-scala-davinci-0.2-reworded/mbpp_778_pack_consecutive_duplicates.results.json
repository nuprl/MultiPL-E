{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        var current = list(0)\n        for (i <- 0 until list.length) {\n            if (list(i) == current) {\n                temp += list(i)\n            } else {\n                result += temp\n                temp = new ListBuffer[Any]\n                temp += list(i)\n                current = list(i)\n            }\n        }\n        result += temp\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp88dk72e.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp88dk72e.scala:24:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp.clear\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpefz324rg.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpefz324rg.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var result = ListBuffer[List[Any]]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (temp.length == 0) {\n                temp += list(i)\n            } else {\n                if (temp(0) == list(i)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = ListBuffer[Any]()\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6iy4cyup.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6iy4cyup.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        for (i <- 0 until list1.length) {\n            if (i == 0) {\n                list2 += list1(i)\n            }\n            else {\n                if (list1(i) == list1(i - 1)) {\n                    list2 += list1(i)\n                }\n                else {\n                    list3 += list2\n                    list2 = ListBuffer[Any]()\n                    list2 += list1(i)\n                }\n            }\n        }\n        list3 += list2\n        list3\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp071oi8yi.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until list1.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp071oi8yi.scala:10:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                list2 += list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp071oi8yi.scala:13:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                \u001b[33mif\u001b[0m (list1(i) == list1(i - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp071oi8yi.scala:14:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list2 += list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp071oi8yi.scala:19:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    list2 += list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp071oi8yi.scala:27:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (first, rest) = list1.span(_ == head)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123471,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnp1wrou_.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnp1wrou_.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnp1wrou_.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnp1wrou_.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnp1wrou_.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp\n                    temp = ListBuffer[Any]()\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzxjlervr.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzxjlervr.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        // list1.groupBy(x => x).map(x => x._2).toList\n        list1.groupBy(x => x).map(x => x._2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123470,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpihjbk23f.scala:7:14 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        list1.groupBy(\u001b[36mx\u001b[0m => x).map(\u001b[36mx\u001b[0m => x._2).toList\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        value groupBy is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihjbk23f.scala:10:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihjbk23f.scala:10:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt2s2su__.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt2s2su__.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var result = ListBuffer[List[Any]]()\n        var buffer = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (buffer.length == 0) buffer += list(i)\n            else if (buffer.last == list(i)) buffer += list(i)\n            else {\n                result += buffer.toList\n                buffer.clear\n                buffer += list(i)\n            }\n        }\n        result += buffer.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz0jiiw7c.scala:22:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz0jiiw7c.scala:22:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        var current = list(0)\n        var count = 0\n        for (i <- 0 to list.length - 1) {\n            if (list(i) == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = list(i)\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm97zuh57.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm97zuh57.scala:23:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var result = List[Any]()\n        var temp = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp = List[Any](list(i))\n            } else if (list(i) == list(i - 1)) {\n                temp = temp :+ list(i)\n            } else {\n                result = result :+ temp\n                temp = List[Any](list(i))\n            }\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmjzbpvd2.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmjzbpvd2.scala:23:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var result = List[List[Any]]()\n        var temp = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp = List(list(i))\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp = temp :+ list(i)\n                } else {\n                    result = result :+ temp\n                    temp = List(list(i))\n                }\n            }\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmx4yuvq0.scala:25:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmx4yuvq0.scala:25:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var list3 = new ListBuffer[Any]\n        list.foreach(x => {\n            if (list3.isEmpty) list3 += x\n            else if (list3.last == x) list3 += x\n            else {\n                list2 += list3.toList\n                list3.clear\n                list3 += x\n            }\n        })\n        list2 += list3.toList\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppzj9vwut.scala:22:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppzj9vwut.scala:22:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var result = List[Any]()\n        var temp = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp = List(list(i))\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp = temp :+ list(i)\n                } else {\n                    result = result :+ temp\n                    temp = List(list(i))\n                }\n            }\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7leigmyg.scala:25:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7leigmyg.scala:25:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var temp = list2(0)\n        for (i <- 0 until list2.length) {\n            if (list2(i) == temp) {\n                list4 += list2(i)\n            }\n            else {\n                list3 += list4\n                list4 = ListBuffer[Any]()\n                list4 += list2(i)\n                temp = list2(i)\n            }\n        }\n        list3 += list4\n        list3\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3t9oej_t.scala:25:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3t9oej_t.scala:25:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val list3 = new ListBuffer[Any]\n            list3 += list(i)\n            var j = i + 1\n            while (j < list.length && list(j) == list(i)) {\n                list3 += list(j)\n                j += 1\n            }\n            list2 += list3.toList\n            i = j\n        }\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7oitlk3.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7oitlk3.scala:23:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var list3 = new ListBuffer[Any]\n        list.foreach(x => {\n            if (list3.isEmpty) list3 += x\n            else if (list3.last == x) list3 += x\n            else {\n                list2 += list3.toList\n                list3 = new ListBuffer[Any]\n                list3 += x\n            }\n        })\n        list2 += list3.toList\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp148484wg.scala:22:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp148484wg.scala:22:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        val list3 = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) list2 += list(i)\n            else if (list(i) == list(i - 1)) list2 += list(i)\n            else {\n                list3 += list2.toList\n                list2.clear\n                list2 += list(i)\n            }\n        }\n        list3 += list2.toList\n        list3.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp489u6ecw.scala:22:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp489u6ecw.scala:22:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var list3 = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            if (i == 0) {\n                list3 += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    list3 += list(i)\n                } else {\n                    list2 += list3\n                    list3 = new ListBuffer[Any]\n                    list3 += list(i)\n                }\n            }\n            i += 1\n        }\n        list2 += list3\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplqucqsci.scala:28:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplqucqsci.scala:28:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (temp.length == 0 || temp(0) == list(i)) temp += list(i)\n            else {\n                result += temp.toList\n                temp = ListBuffer[Any]()\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg5r6d0tf.scala:21:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg5r6d0tf.scala:21:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            }\n            else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                }\n                else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1rkk9m14.scala:28:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1rkk9m14.scala:28:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (first, rest) = list1.span(_ == head)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123471,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnp1wrou_.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnp1wrou_.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnp1wrou_.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnp1wrou_.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnp1wrou_.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        for (i <- 0 until list1.length) {\n            if (i == 0) {\n                list2 += list1(i)\n            } else {\n                if (list1(i) == list1(i - 1)) {\n                    list2 += list1(i)\n                } else {\n                    list3 += list2\n                    list2 = ListBuffer[Any]()\n                    list2 += list1(i)\n                }\n            }\n        }\n        list3 += list2\n        list3\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123470,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnus96u9u.scala:8:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until list1.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpnus96u9u.scala:10:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                list2 += list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpnus96u9u.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mif\u001b[0m (list1(i) == list1(i - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpnus96u9u.scala:13:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list2 += list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpnus96u9u.scala:17:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    list2 += list1(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnus96u9u.scala:25:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x :: packConsecutiveDuplicates(xs.dropWhile(_ == x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123470,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsdsukqp9.scala:8:30 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: packConsecutiveDuplicates(xs.dropWhile(_ == x))\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsdsukqp9.scala:12:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsdsukqp9.scala:12:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var current = list.head\n        var count = 0\n        for (element <- list) {\n            if (element == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = element\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp70j68n3z.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp70j68n3z.scala:23:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (temp.length == 0) temp += list(i)\n            else if (temp(0) == list(i)) temp += list(i)\n            else {\n                result += temp.toList\n                temp.clear\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyhn4tlfk.scala:22:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyhn4tlfk.scala:22:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var temp = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else if (list(i) == list(i - 1)) temp += list(i)\n            else {\n                result += temp.toList\n                temp = ListBuffer[Any]()\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxb3hz6le.scala:22:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxb3hz6le.scala:22:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var result = List[List[Any]]()\n        var temp = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp = List(list(i))\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp = temp :+ list(i)\n                } else {\n                    result = result :+ temp\n                    temp = List(list(i))\n                }\n            }\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmx4yuvq0.scala:25:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmx4yuvq0.scala:25:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp.clear\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpefz324rg.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpefz324rg.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val list3 = new ListBuffer[Any]\n            list3 += list(i)\n            j = i + 1\n            while (j < list.length && list(j) == list(i)) {\n                list3 += list(j)\n                j += 1\n            }\n            i = j\n            list2 += list3.toList\n        }\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3wq2b2dg.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3wq2b2dg.scala:24:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail =>\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2ahhlf57.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp2ahhlf57.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp2ahhlf57.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2ahhlf57.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ahhlf57.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var current = list.head\n        var sublist = new ListBuffer[Any]\n        for (i <- list) {\n            if (i == current) {\n                sublist += i\n            } else {\n                result += sublist.toList\n                sublist = new ListBuffer[Any]\n                sublist += i\n                current = i\n            }\n        }\n        result += sublist.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123475,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbx0ed53w.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbx0ed53w.scala:24:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var current = list.head\n        var count = 0\n        for (i <- list) {\n            if (i == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = i\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7km59615.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7km59615.scala:23:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (duplicate, rest) = list1.span(_ == head)\n                duplicate :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpezldce9c.scala:9:46 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (duplicate, rest) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpezldce9c.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (duplicate, rest) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpezldce9c.scala:9:32 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (duplicate, rest) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpezldce9c.scala:10:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                duplicate :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpezldce9c.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ArrayBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val list3 = new ArrayBuffer[Any]\n            list3 += list(i)\n            var j = i + 1\n            while (j < list.length && list(j) == list(i)) {\n                list3 += list(j)\n                j += 1\n            }\n            list2 += list3\n            i = j\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkxi99ykz.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkxi99ykz.scala:23:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    list2 += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        list2 += temp.toList\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadk6x1ku.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadk6x1ku.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_xzr5cbn.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(\u001b[36my\u001b[0m => y == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_xzr5cbn.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(\u001b[36my\u001b[0m => y == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_xzr5cbn.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(\u001b[36my\u001b[0m => y == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_xzr5cbn.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xzr5cbn.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val buffer = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    buffer += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        buffer += temp.toList\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpacow2j8c.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpacow2j8c.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val sublist = new ListBuffer[Any]\n            sublist += list(i)\n            var j = i + 1\n            while (j < list.length && list(j) == list(i)) {\n                sublist += list(j)\n                j += 1\n            }\n            result += sublist.toList\n            i = j\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp332mwgrr.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp332mwgrr.scala:23:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var result = List[List[Any]]()\n        var temp = List[Any]()\n        for (i <- 0 to list.length - 1) {\n            if (temp.length == 0) {\n                temp = temp :+ list(i)\n            } else if (temp.head == list(i)) {\n                temp = temp :+ list(i)\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ list(i)\n            }\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphgn418xz.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphgn418xz.scala:24:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var result = List[Any]()\n        var temp = List[Any]()\n        var last = list(0)\n        for (i <- list) {\n            if (i == last) {\n                temp = temp :+ i\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ i\n                last = i\n            }\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp9ythtso.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp9ythtso.scala:24:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else {\n                if (list(i) == list(i - 1)) temp += list(i)\n                else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92s2xh3p.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92s2xh3p.scala:24:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var current = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                current += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    current += list(i)\n                } else {\n                    result += current.toList\n                    current.clear\n                    current += list(i)\n                }\n            }\n        }\n        result += current.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpndhp2avr.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpndhp2avr.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var sublist = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                sublist += list(i)\n            }\n            else {\n                if (list(i) == list(i - 1)) {\n                    sublist += list(i)\n                }\n                else {\n                    result += sublist.toList\n                    sublist = new ListBuffer[Any]\n                    sublist += list(i)\n                }\n            }\n        }\n        result += sublist.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplk8y16qf.scala:28:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplk8y16qf.scala:28:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        list1 match {\n            case Nil => list2\n            case head :: tail => {\n                list2 += head\n                list3 += head\n                for (i <- tail) {\n                    if (i == head) {\n                        list2 += i\n                    }\n                    else {\n                        list4 += list2\n                        list2.clear\n                        list2 += i\n                        list3 += i\n                    }\n                }\n                list4 += list2\n                list4\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qnltn3.scala:31:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8qnltn3.scala:31:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        var count = 1\n        while(i < list.length) {\n            j = i + 1\n            while(j < list.length && list(i) == list(j)) {\n                count += 1\n                j += 1\n            }\n            list2 += list.slice(i, i + count)\n            i = j\n            count = 1\n        }\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp68s04p3s.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp68s04p3s.scala:24:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) temp += list(i)\n            else if (list(i) == list(i - 1)) temp += list(i)\n            else {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7y3uu5ac.scala:22:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7y3uu5ac.scala:22:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val packedList = ListBuffer[List[Any]]()\n        var tempList = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                tempList += list(i)\n            }\n            else {\n                if (list(i) == list(i - 1)) {\n                    tempList += list(i)\n                }\n                else {\n                    packedList += tempList.toList\n                    tempList = ListBuffer[Any]()\n                    tempList += list(i)\n                }\n            }\n        }\n        packedList += tempList.toList\n        packedList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8expp1l7.scala:28:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8expp1l7.scala:28:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = ListBuffer[Any]()\n        var i = 0\n        while (i < list.length) {\n            var j = i\n            while (j < list.length && list(i) == list(j)) j += 1\n            list2 += list.slice(i, j)\n            i = j\n        }\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpewl_odgv.scala:18:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpewl_odgv.scala:18:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        // Create a list buffer to store the result.\n        val result = ListBuffer[Any]()\n        // Create a list buffer to store the current sublist.\n        val current = ListBuffer[Any]()\n        // Create a list buffer to store the previous element.\n        var previous = ListBuffer[Any]()\n        // Iterate through the list.\n        for (element <- list1.asInstanceOf[List[Any]]) {\n            // If the current element is different from the previous element, add the current sublist to the result and create a new sublist.\n            if (current.length != 0 && current(0) != element) {\n                result += current\n                current.clear\n            }\n            // Add the current element to the current sublist.\n            current += element\n            // Update the previous element.\n            previous = current\n        }\n        // Add the last sublist to the result.\n        result += current\n        // Return the result.\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmgsxcyma.scala:30:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmgsxcyma.scala:30:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = ListBuffer[Any]()\n        var i = 0\n        while (i < list.length) {\n            var j = i\n            var list3 = ListBuffer[Any]()\n            while (j < list.length && list(i) == list(j)) {\n                list3 += list(j)\n                j += 1\n            }\n            list2 += list3.toList\n            i = j\n        }\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7lvcgmoc.scala:22:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7lvcgmoc.scala:22:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8fcmy2x0.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8fcmy2x0.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var current = list(0)\n        var count = 0\n        for (i <- 0 to list.length - 1) {\n            if (list(i) == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = list(i)\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe3jua41d.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe3jua41d.scala:23:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        var prev = list(0)\n        for (i <- 0 until list.length) {\n            if (list(i) == prev) {\n                temp += list(i)\n            } else {\n                result += temp\n                temp = new ListBuffer[Any]\n                temp += list(i)\n            }\n            prev = list(i)\n        }\n        result += temp\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp644exwip.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp644exwip.scala:24:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        if (list.isEmpty) List()\n        else {\n            val (packed, next) = list.span(_ == list.head)\n            if (next == Nil) List(packed)\n            else packed :: packConsecutiveDuplicates(next)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_l_t9ezz.scala:11:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_l_t9ezz.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_l_t9ezz.scala:15:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        if (list.length == 0)\n            return List()\n        var result = ListBuffer[Any]()\n        var current = list(0)\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (list(i) == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = list(i)\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzf5g1lo4.scala:25:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzf5g1lo4.scala:25:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = xs.span(_ == x)\n                (x :: first) :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw2fkr7rn.scala:10:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                (x :: first) :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw2fkr7rn.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw2fkr7rn.scala:15:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var list3 = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                list3 += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    list3 += list(i)\n                } else {\n                    list2 += list3\n                    list3 = new ListBuffer[Any]\n                    list3 += list(i)\n                }\n            }\n        }\n        list2 += list3\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpidljquk7.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpidljquk7.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        if (list.isEmpty) Nil\n        else {\n            val (packed, next) = list.span(_ == list.head)\n            if (next == Nil) List(packed)\n            else packed :: packConsecutiveDuplicates(next)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7ao0wl27.scala:11:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7ao0wl27.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7ao0wl27.scala:15:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var current = list.head\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (list(i) == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = list(i)\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5hqdcwj5.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5hqdcwj5.scala:23:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_xzr5cbn.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(\u001b[36my\u001b[0m => y == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_xzr5cbn.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(\u001b[36my\u001b[0m => y == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_xzr5cbn.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(\u001b[36my\u001b[0m => y == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_xzr5cbn.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xzr5cbn.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        var current = list.head\n        var count = 0\n        for (i <- list) {\n            if (i == current) {\n                count += 1\n            } else {\n                result += List(current, count)\n                current = i\n                count = 1\n            }\n        }\n        result += List(current, count)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplsmjohye.scala:23:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplsmjohye.scala:23:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]()\n        var temp = new ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else if (list(i) == list(i - 1)) {\n                temp += list(i)\n            } else {\n                result += temp.toList\n                temp = new ListBuffer[Any]()\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprm848vvt.scala:24:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprm848vvt.scala:24:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var current = ListBuffer[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                current += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    current += list(i)\n                } else {\n                    result += current.toList\n                    current.clear\n                    current += list(i)\n                }\n            }\n        }\n        result += current.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123476,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpndhp2avr.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpndhp2avr.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(y => y == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_xzr5cbn.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(\u001b[36my\u001b[0m => y == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_xzr5cbn.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(\u001b[36my\u001b[0m => y == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_xzr5cbn.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(\u001b[36my\u001b[0m => y == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_xzr5cbn.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xzr5cbn.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: Nil => List(List(x))\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                if (rest == Nil) List(first)\n                else first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u3j_w_1.scala:10:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8u3j_w_1.scala:10:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8u3j_w_1.scala:10:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8u3j_w_1.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33melse\u001b[0m first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8u3j_w_1.scala:17:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        var last : Any = null\n        var count = 0\n        for (i <- 0 until list.length) {\n            if (last == null) {\n                last = list(i)\n                count = 1\n            } else if (last == list(i)) {\n                count += 1\n            } else {\n                result += (last, count)\n                last = list(i)\n                count = 1\n            }\n        }\n        if (last != null) result += (last, count)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp90rdablh.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp90rdablh.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        var list3 = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            if (i == 0) {\n                list3 += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    list3 += list(i)\n                } else {\n                    list2 += list3\n                    list3 = new ListBuffer[Any]\n                    list3 += list(i)\n                }\n            }\n            i += 1\n        }\n        list2 += list3\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123469,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplqucqsci.scala:28:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplqucqsci.scala:28:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (i == 0) {\n                temp += list(i)\n            } else {\n                if (list(i) == list(i - 1)) {\n                    temp += list(i)\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    temp += list(i)\n                }\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123468,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp73660ce.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var result = List[List[Any]]()\n        var temp = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) temp = List(list(i))\n            else if (list(i) == list(i - 1)) temp = temp :+ list(i)\n            else {\n                result = result :+ temp\n                temp = List(list(i))\n            }\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5fd_c2su.scala:21:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5fd_c2su.scala:21:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510500,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq6l3mf1.scala:51:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => {\n                val (packed, next) = list1.span(_ == head)\n                if (next == Nil) List(packed)\n                else packed :: packConsecutiveDuplicates(next)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:9:43 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuvf6s_8r.scala:9:29 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (packed, next) = list1.span(_ == head)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^\u001b[0m\n\u001b[31m  |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvf6s_8r.scala:11:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m packed :: packConsecutiveDuplicates(next)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuvf6s_8r.scala:16:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            if (temp.length == 0) {\n                temp += list(i)\n            }\n            else if (temp(0) == list(i)) {\n                temp += list(i)\n            }\n            else {\n                result += temp.toList\n                temp.clear\n                temp += list(i)\n            }\n        }\n        result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1666123482,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphd7oj4c7.scala:26:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m8l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphd7oj4c7.scala:26:228 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong), List[\u001b[35mLon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.span(_ == x)\n                first :: packConsecutiveDuplicates(rest)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:9:42 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    value span is not a member of Any\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:21 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^\u001b[0m\n\u001b[31m  |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr3iw42h7.scala:9:28 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mval\u001b[0m (first, rest) = list1.span(_ == x)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Recursive \u001b[33mvalue\u001b[0m \u001b[35m$1$\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3iw42h7.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                first :: packConsecutiveDuplicates(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr3iw42h7.scala:15:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(packConsecutiveDuplicates((Any(\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b[0m.toLong, \u001b[31m9l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong))).equals((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m0l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m2l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}