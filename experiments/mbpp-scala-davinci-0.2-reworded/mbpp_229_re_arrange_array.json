{
  "name": "mbpp_229_re_arrange_array",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sortWith(_ < _)\n        val posSorted = pos.sortWith(_ > _)\n        negSorted ::: posSorted",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos ++ arr.drop(n.toInt)",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sortWith(_ < _)\n        val posSorted = pos.sortWith(_ > _)\n        negSorted ::: posSorted",
    "        val (neg, pos) = arr.partition(_ < 0)\n        val (neg1, neg2) = neg.splitAt(n.toInt)\n        neg1 ::: pos ::: neg2",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val negative = arr.filter(x => x < 0).sorted\n        val positive = arr.filter(x => x >= 0).sorted\n        negative ::: positive",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(x => x < 0)\n        neg ::: pos ::: arr.drop(n.toInt)"
  ]
}