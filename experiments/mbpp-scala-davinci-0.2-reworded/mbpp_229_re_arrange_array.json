{
  "name": "mbpp_229_re_arrange_array",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sortWith(_ < _)\n        val posSorted = pos.sortWith(_ > _)\n        negSorted ::: posSorted",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos ++ arr.drop(n.toInt)",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sortWith(_ < _)\n        val posSorted = pos.sortWith(_ > _)\n        negSorted ::: posSorted",
    "        val (neg, pos) = arr.partition(_ < 0)\n        val (neg1, neg2) = neg.splitAt(n.toInt)\n        neg1 ::: pos ::: neg2",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val negative = arr.filter(x => x < 0).sorted\n        val positive = arr.filter(x => x >= 0).sorted\n        negative ::: positive",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(x => x < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos ++ arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: neg.filter(_ >= 0) ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val neg = arr.filter(_ < 0)\n        val pos = arr.filter(_ >= 0)\n        neg ::: pos",
    "        val neg = arr.filter(_ < 0)\n        val pos = arr.filter(_ >= 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        var neg = List[Long]()\n        var pos = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) neg = neg :+ arr(i)\n            else pos = pos :+ arr(i)\n        }\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        negSorted ::: posSorted",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val neg = arr.filter(x => x < 0).sorted\n        val pos = arr.filter(x => x >= 0).sorted\n        (neg ::: pos).take(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        var result = new ListBuffer[Long]()\n        var negative = new ListBuffer[Long]()\n        var positive = new ListBuffer[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative += arr(i)\n            else positive += arr(i)\n        }\n        for (i <- n.toInt until arr.length) {\n            if (arr(i) < 0) negative += arr(i)\n            else positive += arr(i)\n        }\n        result ++= negative\n        result ++= positive\n        result.toList",
    "        val arr1 = arr.slice(0, n.toInt)\n        val arr2 = arr.slice(n.toInt, arr.length)\n        val arr3 = arr1.filter(_ < 0) ++ arr1.filter(_ >= 0)\n        arr3 ++ arr2",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val negative = arr.slice(0, n.toInt).filter(_ < 0)\n        val positive = arr.slice(0, n.toInt).filter(_ >= 0)\n        negative ::: positive ::: arr.slice(n.toInt, arr.length)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ++ pos.filter(_ >= 0) ++ neg.filter(_ >= 0) ++ pos.filter(_ < 0)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val positive = arr.filter(x => x >= 0)\n        val negative = arr.filter(x => x < 0)\n        negative ::: positive",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        var negative = List[Long]()\n        var positive = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative = negative :+ arr(i)\n            else positive = positive :+ arr(i)\n        }\n        negative ::: positive",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val neg = arr.filter(x => x < 0)\n        val pos = arr.filter(x => x >= 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        negSorted ::: posSorted",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        negSorted ::: posSorted",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: neg.filter(_ >= 0) ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos ++ arr.drop(n.toInt)",
    "        val negative = arr.filter(_ < 0).sorted\n        val positive = arr.filter(_ >= 0).sorted\n        negative ::: positive",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val positive = arr.filter(x => x > 0)\n        val negative = arr.filter(x => x < 0)\n        val zero = arr.filter(x => x == 0)\n        val result = negative ::: zero ::: positive\n        result.take(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        var negative = List[Long]()\n        var positive = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative = negative :+ arr(i)\n            else positive = positive :+ arr(i)\n        }\n        negative ::: positive",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sortWith(_ < _)\n        val posSorted = pos.sortWith(_ > _)\n        negSorted ::: posSorted",
    "        val neg = arr.filter(_ < 0).sorted\n        val pos = arr.filter(_ >= 0).sorted\n        neg ::: pos",
    "        var i = 0\n        var j = n - 1\n        while (i < j) {\n            while (arr(i.toInt) < 0 && i < j) i += 1\n            while (arr(j.toInt) >= 0 && i < j) j -= 1\n            if (i < j) {\n                val temp = arr(i.toInt)\n                arr(i.toInt) = arr(j.toInt)\n                arr(j.toInt) = temp\n            }\n        }\n        arr",
    "        val negative = arr.filter(x => x < 0)\n        val positive = arr.filter(x => x >= 0)\n        val result = negative ++ positive\n        result.take(n.toInt)",
    "        val neg = arr.filter(_ < 0).sorted\n        val pos = arr.filter(_ >= 0).sorted\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (negative, positive) = arr.take(n.toInt).partition(_ < 0)\n        negative ::: positive ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val arr1 = arr.slice(0, n.toInt)\n        val arr2 = arr.slice(n.toInt, arr.length)\n        val neg = arr1.filter(_ < 0)\n        val pos = arr1.filter(_ >= 0)\n        neg ::: pos ::: arr2",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        var result = List[Long]()\n        var i = 0\n        while (i < n) {\n            if (arr(i.toInt) < 0) {\n                result = result :+ arr(i.toInt)\n            }\n            i += 1\n        }\n        i = 0\n        while (i < n) {\n            if (arr(i.toInt) >= 0) {\n                result = result :+ arr(i.toInt)\n            }\n            i += 1\n        }\n        result",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        var negative = List[Long]()\n        var positive = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative = negative :+ arr(i)\n            else positive = positive :+ arr(i)\n        }\n        negative ::: positive",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val neg = arr.filter(_ < 0).sorted\n        val pos = arr.filter(_ >= 0).sorted\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val neg = arr.filter(x => x < 0).sorted\n        val pos = arr.filter(x => x >= 0).sorted\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val positive = arr.filter(_ > 0)\n        val negative = arr.filter(_ <= 0)\n        val positiveSorted = positive.sorted\n        val negativeSorted = negative.sorted\n        val positiveReversed = positiveSorted.reverse\n        val negativeReversed = negativeSorted.reverse\n        val negativeReversedN = negativeReversed.take(n.toInt)\n        val positiveReversedN = positiveReversed.take(n.toInt)\n        val negativeReversedNReversed = negativeReversedN.reverse\n        val positiveReversedNReversed = positiveReversedN.reverse\n        val result = negativeReversedNReversed ++ positiveReversedNReversed\n        result",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: neg.filter(_ >= 0) ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        neg.filter(_ < 0) ::: neg.filter(_ >= 0) ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos ++ arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        var i = 0\n        var j = n - 1\n        while(i < j) {\n            while(arr(i.toInt) < 0 && i < j) i += 1\n            while(arr(j.toInt) >= 0 && i < j) j -= 1\n            if(i < j) {\n                val temp = arr(i.toInt)\n                arr(i.toInt) = arr(j.toInt)\n                arr(j.toInt) = temp\n            }\n        }\n        arr",
    "        val neg = arr.filter(x => x < 0).sorted\n        val pos = arr.filter(x => x >= 0).sorted\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos ++ arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos ++ arr.drop(n.toInt)",
    "        val negative = arr.filter(_ < 0).sorted\n        val positive = arr.filter(_ >= 0).sorted\n        negative ::: positive",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.splitAt(n.toInt)\n        val negSorted = neg.sorted\n        val posSorted = pos.sorted\n        negSorted ::: posSorted",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        var result = List[Long]()\n        var negative = List[Long]()\n        var positive = List[Long]()\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative = negative :+ arr(i)\n            else positive = positive :+ arr(i)\n        }\n        result = negative ::: positive\n        result = result ::: arr.drop(n.toInt)\n        result",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos ++ arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        var negative = new ListBuffer[Long]\n        var positive = new ListBuffer[Long]\n        for (i <- 0 until n.toInt) {\n            if (arr(i) < 0) negative += arr(i)\n            else positive += arr(i)\n        }\n        negative.toList ++ positive.toList ++ arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ++ pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)",
    "        val (neg, pos) = arr.take(n.toInt).partition(_ < 0)\n        neg ::: pos ::: arr.drop(n.toInt)"
  ]
}