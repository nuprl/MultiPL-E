{
  "name": "mbpp_392_get_max_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val max = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n                    cache(n) = max\n                    max\n                }\n            }\n        }\n        getMaxSum(n)",
    "        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            return result\n        }\n        getMaxSumHelper(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val sum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = sum\n            return sum\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = result\n                    result\n                }\n            }\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new Array[Long](n.toInt + 1)\n        def getMaxSum(n : Long, cache : Array[Long]) : Long = {\n            if (n <= 0) return 0\n            if (cache(n.toInt) != 0) return cache(n.toInt)\n            val result = max(n, getMaxSum(n / 2, cache) + getMaxSum(n / 3, cache) + getMaxSum(n / 4, cache) + getMaxSum(n / 5, cache))\n            cache(n.toInt) = result\n            result\n        }\n        getMaxSum(n, cache)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }",
    "        if (n == 0) return 0\n        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            dp(i) = max(dp(i / 2) + dp(i / 3) + dp(i / 4) + dp(i / 5), i)\n        }\n        dp(n.toInt)",
    "        val cache = new HashMap[Long, Long]()\n        def getMaxSumRec(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumRec(n / 2) + getMaxSumRec(n / 3) + getMaxSumRec(n / 4) + getMaxSumRec(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        return getMaxSumRec(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val map = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (map.contains(n)) return map(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            map(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)",
    "        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }",
    "        if (n == 0) 0\n        else {\n            var max = n\n            for (i <- 2 to 5) {\n                val temp = getMaxSum(n / i)\n                if (temp > max) max = temp\n            }\n            max\n        }",
    "        var map = Map[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (map.contains(n)) map(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                map += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)",
    "        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val sum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = sum\n                sum\n            }\n        }\n        getMaxSum(n)",
    "        if (n <= 0) return 0\n        if (n == 1) return 1\n        var max = n\n        if (n % 2 == 0) max = max(max, getMaxSum(n / 2))\n        if (n % 3 == 0) max = max(max, getMaxSum(n / 3))\n        if (n % 4 == 0) max = max(max, getMaxSum(n / 4))\n        if (n % 5 == 0) max = max(max, getMaxSum(n / 5))\n        return max",
    "        var cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            var max = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache += (n -> max)\n            return max\n        }\n        return getMaxSum(n)"
  ]
}