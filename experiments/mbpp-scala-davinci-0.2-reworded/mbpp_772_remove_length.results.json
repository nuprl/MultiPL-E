{
  "name": "mbpp_772_remove_length",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val filtered_words = words.filter(word => word.length != K)\n        return filtered_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var res = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                res += word + \" \"\n            }\n        }\n        res.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                var j = i + 1\n                while (j < str.length && str(j) != ' ') {\n                    j += 1\n                }\n                if (j - i - 1 == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                }\n                else {\n                    i = j\n                }\n            }\n            else {\n                i += 1\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6c89z7a1.scala:28)\n\tat Problem.main(tmp6c89z7a1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbh1mhza5.scala:16)\n\tat Problem.main(tmpbh1mhza5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isLetter) {\n                var j = i + 1\n                while (j < str.length && str(j).isLetter) {\n                    j += 1\n                }\n                if (j - i == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                    i -= 1\n                }\n                else i = j\n            }\n            else i += 1\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.removeLength(tmpvrqkzqut.scala:9)\n\tat Problem$.main(tmpvrqkzqut.scala:25)\n\tat Problem.main(tmpvrqkzqut.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var result = \"\"\n        for (word <- test_str.split(\" \")) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        return result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbh1mhza5.scala:16)\n\tat Problem.main(tmpbh1mhza5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(word => word.length != K)\n        new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(word => word.length != K)\n        new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgs8e3smd.scala:17)\n\tat Problem.main(tmpgs8e3smd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str_arr = test_str.split(\" \")\n        var new_str = \"\"\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).length != K) {\n                new_str += str_arr(i) + \" \"\n            }\n        }\n        new_str.trim()\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder()\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 to str.length - 1) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz6cvnuhg.scala:16)\n\tat Problem.main(tmpz6cvnuhg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val filtered = words.filter(x => x.length != K)\n        filtered.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = \"\"\n        var words = test_str.split(\" \")\n        for (i <- 0 until words.length) {\n            if (words(i).length != K) {\n                str += words(i) + \" \"\n            }\n        }\n        return str.trim()\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(x => x.length != K)\n        new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                var j = i + 1\n                while (j < str.length && str(j) != ' ') {\n                    j += 1\n                }\n                if (j - i - 1 == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                }\n                else {\n                    i = j\n                }\n            }\n            else {\n                i += 1\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6c89z7a1.scala:28)\n\tat Problem.main(tmp6c89z7a1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        test_str.split(\" \").filter(x => x.length != K).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgo5386nn.scala:17)\n\tat Problem.main(tmpgo5386nn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str_arr = test_str.split(\" \")\n        var new_str = \"\"\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).length != K) {\n                new_str += str_arr(i) + \" \"\n            }\n        }\n        return new_str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt9arjofr.scala:16)\n\tat Problem.main(tmpt9arjofr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        for (i <- 0 to str.length - 1) {\n            if (str(i).toString.length == K) {\n                str = str.replace(str(i).toString, \"\")\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx5s8ikt8.scala:15)\n\tat Problem.main(tmpx5s8ikt8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var new_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                new_str += str(i) + \" \"\n            }\n        }\n        return new_str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz95wdt5j.scala:16)\n\tat Problem.main(tmpz95wdt5j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgs8e3smd.scala:17)\n\tat Problem.main(tmpgs8e3smd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgs8e3smd.scala:17)\n\tat Problem.main(tmpgs8e3smd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgs8e3smd.scala:17)\n\tat Problem.main(tmpgs8e3smd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(x => x.length != K)\n        new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        return result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpefd5gsfq.scala:16)\n\tat Problem.main(tmpefd5gsfq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while(i < str.length) {\n            if(str.substring(i, i + K).length == K) {\n                str = str.substring(0, i) + str.substring(i + K)\n            }\n            else i += 1\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3dvh_c0n.scala:9:32 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m(str.substring(i, i + K).length == K) {\n\u001b[31m\u001b[31m  |\u001b[0m                                ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    Long\n\u001b[31m  |\u001b[0m                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3dvh_c0n.scala:10:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                str = str.substring(\u001b[31m0\u001b[0m, i) + str.substring(i + K)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgs8e3smd.scala:17)\n\tat Problem.main(tmpgs8e3smd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgs8e3smd.scala:17)\n\tat Problem.main(tmpgs8e3smd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbh1mhza5.scala:16)\n\tat Problem.main(tmpbh1mhza5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while(i < str.length) {\n            if(str(i) == ' ') {\n                var j = i + 1\n                while(j < str.length && str(j) != ' ') {\n                    j += 1\n                }\n                if(j - i - 1 == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                }\n                else {\n                    i = j\n                }\n            }\n            else {\n                i += 1\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkr609u2l.scala:28)\n\tat Problem.main(tmpkr609u2l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val str_arr = test_str.split(\" \")\n        val new_str = str_arr.filter(x => x.length != K)\n        new_str.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgs8e3smd.scala:17)\n\tat Problem.main(tmpgs8e3smd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var res = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length() != K) {\n                res += str(i) + \" \"\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphiaoyt36.scala:16)\n\tat Problem.main(tmphiaoyt36.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val str_arr = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).length != K) {\n                result += str_arr(i) + \" \"\n            }\n        }\n        return result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(word => word.length != K)\n        new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        for (i <- 0 until str.length) {\n            if (str(i).isLetter) {\n                var count = 0\n                var j = i\n                while (j < str.length && str(j).isLetter) {\n                    count += 1\n                    j += 1\n                }\n                if (count == K) {\n                    str = str.substring(0, i) + str.substring(j, str.length)\n                    i -= 1\n                }\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7mq2azfn.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    i -= \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value -= is not a member of Int - did you mean i.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 to str.length - 1) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz6cvnuhg.scala:16)\n\tat Problem.main(tmpz6cvnuhg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(x => x.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(x => x.length != K)\n        return new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var new_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                new_str += str(i) + \" \"\n            }\n        }\n        return new_str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz95wdt5j.scala:16)\n\tat Problem.main(tmpz95wdt5j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(x => x.length != K).mkString(\" \")\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(x => x.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(x => x.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val str_arr = test_str.split(\" \")\n        val str_arr_new = str_arr.filter(x => x.length != K)\n        str_arr_new.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isLetter) {\n                var j = i\n                while (j < str.length && str(j).isLetter) j += 1\n                if (j - i == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                    i = 0\n                } else i = j\n            } else i += 1\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpehz4_xgh.scala:21)\n\tat Problem.main(tmpehz4_xgh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var words = str.split(\" \")\n        for (i <- 0 until words.length) {\n            if (words(i).length == K) {\n                str = str.replace(words(i), \"\")\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq8hf7aoh.scala:16)\n\tat Problem.main(tmpq8hf7aoh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder()\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString()\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcwsjtsne.scala:16)\n\tat Problem.main(tmpcwsjtsne.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val filteredWords = words.filter(word => word.length != K)\n        filteredWords.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder()\n        for (word <- words) {\n            if (word.length() != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString().trim()\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                var j = i + 1\n                while (j < str.length && str(j) != ' ') j += 1\n                if (j - i - 1 == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                    i = 0\n                }\n                else i = j\n            }\n            else i += 1\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_d0kgt63.scala:23)\n\tat Problem.main(tmp_d0kgt63.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val res = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                res.append(word)\n                res.append(\" \")\n            }\n        }\n        res.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppvp_2f1m.scala:17)\n\tat Problem.main(tmppvp_2f1m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var result = \"\"\n        for (word <- test_str.split(\" \")) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpua17n90z.scala:15)\n\tat Problem.main(tmpua17n90z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.substring(0, result.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        test_str.split(\" \").filter(x => x.length != K).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(word => word.length != K)\n        new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val res = new StringBuilder()\n        for (word <- words) {\n            if (word.length != K) {\n                res.append(word + \" \")\n            }\n        }\n        res.toString()\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_1uw4mva.scala:16)\n\tat Problem.main(tmp_1uw4mva.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str_arr = test_str.split(\" \")\n        var new_str = \"\"\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).length != K) {\n                new_str += str_arr(i) + \" \"\n            }\n        }\n        return new_str.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim()\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(word => word.length != K)\n        return new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123701,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgs8e3smd.scala:17)\n\tat Problem.main(tmpgs8e3smd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var result = \"\"\n        var words = test_str.split(\" \")\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        return result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        test_str.split(\" \").filter(x => x.length != K).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val res = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                res.append(word + \" \")\n            }\n        }\n        res.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123701,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                var j = i\n                while (j < str.length && str(j) != ' ') {\n                    j += 1\n                }\n                if (j - i - 1 == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                }\n                i = j\n            }\n            i += 1\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6ueh9ht.scala:24)\n\tat Problem.main(tmpw6ueh9ht.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length() != K) {\n                result += word + \" \"\n            }\n        }\n        return result.trim()\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgs8e3smd.scala:17)\n\tat Problem.main(tmpgs8e3smd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                var j = i + 1\n                var count = 0\n                while (j < str.length && str(j) != ' ') {\n                    count += 1\n                    j += 1\n                }\n                if (count == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                    i -= 1\n                }\n            }\n            i += 1\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123701,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp670jk1vp.scala:26)\n\tat Problem.main(tmp670jk1vp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim()\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder()\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123701,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqerlqis1.scala:17)\n\tat Problem.main(tmpqerlqis1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(x => x.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 to str.length - 1) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz6cvnuhg.scala:16)\n\tat Problem.main(tmpz6cvnuhg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        for (i <- 0 until K) {\n            str = str.replaceAll(\"\\\\b\\\\w{\" + K + \"}\\\\b\", \"\")\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_68wnzf.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until K) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (K : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbh1mhza5.scala:16)\n\tat Problem.main(tmpbh1mhza5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length() != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result.trim()\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123701,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(x => x.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(x => x.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.substring(0, result.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.substring(0, result.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) result += word + \" \"\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val filtered_words = words.filter(x => x.length != K)\n        filtered_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123701,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var result = \"\"\n        for (word <- test_str.split(\" \")) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        return result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var result = new StringBuilder\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                result.append(str(i))\n                result.append(\" \")\n            }\n        }\n        return result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123701,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdnbse64q.scala:17)\n\tat Problem.main(tmpdnbse64q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(x => x.length != K)\n        new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpefd5gsfq.scala:16)\n\tat Problem.main(tmpefd5gsfq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(word => word.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        val words = str.split(\" \")\n        for (word <- words) {\n            if (word.length == K) {\n                str = str.replace(word, \"\")\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9zlltu9d.scala:16)\n\tat Problem.main(tmp9zlltu9d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) result.append(word + \" \")\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val str_arr = test_str.split(\" \")\n        val str_arr_new = str_arr.filter(x => x.length != K)\n        return str_arr_new.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                var j = i + 1\n                var count = 0\n                while (j < str.length && str(j) != ' ') {\n                    count += 1\n                    j += 1\n                }\n                if (count == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                    i -= 1\n                }\n            }\n            i += 1\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123701,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp670jk1vp.scala:26)\n\tat Problem.main(tmp670jk1vp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str_arr = test_str.split(\" \")\n        var result = new StringBuilder\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).length != K) {\n                result.append(str_arr(i) + \" \")\n            }\n        }\n        return result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnxhrn4iv.scala:16)\n\tat Problem.main(tmpnxhrn4iv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                var j = i + 1\n                while (j < str.length && str(j) != ' ') {\n                    j += 1\n                }\n                if (j - i - 1 == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                }\n                else {\n                    i = j\n                }\n            }\n            else {\n                i += 1\n            }\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6c89z7a1.scala:28)\n\tat Problem.main(tmp6c89z7a1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpefd5gsfq.scala:16)\n\tat Problem.main(tmpefd5gsfq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var result = \"\"\n        val words = test_str.split(\" \")\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = words.filter(x => x.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123691,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word)\n                result.append(\" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx90z3slc.scala:16)\n\tat Problem.main(tmpx90z3slc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ' ') {\n                var j = i + 1\n                var count = 0\n                while (j < str.length && str(j) != ' ') {\n                    count += 1\n                    j += 1\n                }\n                if (count == K) {\n                    str = str.substring(0, i) + str.substring(j)\n                }\n            }\n            i += 1\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzp_1khyj.scala:25)\n\tat Problem.main(tmpzp_1khyj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val str_arr = test_str.split(\" \")\n        var result_str = \"\"\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).length != K) {\n                result_str += str_arr(i) + \" \"\n            }\n        }\n        return result_str\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpil5u9zrp.scala:16)\n\tat Problem.main(tmpil5u9zrp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = for (word <- words if word.length != K) yield word\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val result = new StringBuilder\n        for (word <- words) {\n            if (word.length != K) {\n                result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(x => x.length != K)\n        new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(word => word.length != K)\n        new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var new_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                new_str += str(i) + \" \"\n            }\n        }\n        return new_str.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(x => x.length != K)\n        new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val str_arr = test_str.split(\" \")\n        val result = str_arr.filter(x => x.length != K)\n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        var str = test_str.split(\" \")\n        var result = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).length != K) {\n                result += str(i) + \" \"\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbh1mhza5.scala:16)\n\tat Problem.main(tmpbh1mhza5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        val new_words = words.filter(word => word.length != K)\n        new_words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n        val words = test_str.split(\" \")\n        var result = \"\"\n        for (word <- words) {\n            if (word.length != K) {\n                result += word + \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n",
      "timestamp": 1665510442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}