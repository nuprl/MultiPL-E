{
  "name": "mbpp_583_catalan_number",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (i + num) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppqbjp01n.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvz6ejiig.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val factorial = (1 to num.toInt).foldLeft(1)(_ * _)\n        factorial / (factorial / (num + 1) * factorial / (num - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbattj757.scala:10)\n\tat Problem.main(tmpbattj757.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def catalanNumberHelper(num : Long) : Long = {\n            if (num == 0) 1\n            else if (cache.contains(num)) cache(num)\n            else {\n                var sum = 0L\n                for (i <- 0 until num) {\n                    sum += catalanNumberHelper(i) * catalanNumberHelper(num - i - 1)\n                }\n                cache += (num -> sum)\n                sum\n            }\n        }\n        catalanNumberHelper(num)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyv10a25k.scala:12:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (num : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        for (i <- 1 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def catalanNumberHelper(num : Long) : Long = {\n            if (num == 0) 1\n            else if (cache.contains(num)) cache(num)\n            else {\n                var result = 0L\n                for (i <- 0L until num) {\n                    result += catalanNumberHelper(i) * catalanNumberHelper(num - i - 1)\n                }\n                cache += (num -> result)\n                result\n            }\n        }\n        catalanNumberHelper(num)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 1 to num.toInt) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzvgt5ag1.scala:13)\n\tat Problem.main(tmpzvgt5ag1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (i + num) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppqbjp01n.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1 to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwzaqcvsm.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0fkx8dt.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = new Array[Long](num.toInt + 1)\n        dp(0) = 1\n        for (i <- 1 to num.toInt) {\n            dp(i) = 0\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0fkx8dt.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8cf7i7sm.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var res = 1L\n        for (i <- 2 to num) {\n            res = res * (num + i) / i\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe3s3dzox.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result = 0L\n        for (i <- 0 until num) {\n            result += catalanNumber(i) * catalanNumber(num - i - 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5vhl_u13.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result : Long = 0\n            for (i <- 0 to num - 1) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7cjtfuy1.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result = 0L\n            for (i <- 0 to num - 1) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmput_b152r.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result = 0L\n            for (i <- 0 to num - 1) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmput_b152r.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 0L\n        if (num == 0) return 1\n        for (i <- 0 until num) {\n            result += catalanNumber(i) * catalanNumber(num - i - 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqnrtx58.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 2 to num) {\n            result = result * (i + num) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkjjvwko8.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.fill(num.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to num.toInt) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        def catalanNumber(num : Long, cache : Array[Long]) : Long = {\n            if (cache(num.toInt) != 0) cache(num.toInt)\n            else {\n                var sum = 0L\n                for (i <- 0 to num - 1) {\n                    sum += catalanNumber(i, cache) * catalanNumber(num - i - 1, cache)\n                }\n                cache(num.toInt) = sum\n                sum\n            }\n        }\n        val cache = Array.fill(num.toInt + 1)(0L)\n        cache(0) = 1\n        catalanNumber(num, cache)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqmc8cmku.scala:10:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        def factorial(num : Long) : Long = {\n            if (num == 0) 1\n            else num * factorial(num - 1)\n        }\n        factorial(2 * num) / (factorial(num + 1) * factorial(num))\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3768e0n_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 to i - 1) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var catalan : Array[Long] = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 to i - 1) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 0L until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.fill(num.toInt + 1)(0L)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 until num) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_icljnt7.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 until num) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_icljnt7.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 until num) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_icljnt7.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1yxw1vw.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3768e0n_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzfmm7hrj.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvz6ejiig.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val n = num\n        val dp = Array.fill(n + 1)(0L)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to n) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(n)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0kjm5lyy.scala:7:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdp\u001b[0m = Array.fill(n + \u001b[31m1\u001b[0m)(\u001b[31m0L\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    Long\n\u001b[31m  |\u001b[0m                            Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0kjm5lyy.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to n) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (n : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0kjm5lyy.scala:15:11 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        dp(n)\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           Found:    (n : Long)\n\u001b[31m   |\u001b[0m           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result : Long = 0\n            for (i <- 0 to num - 1) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7cjtfuy1.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 0 until num) {\n            result *= (2 * num - i)\n            result /= (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2lindj3o.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0fkx8dt.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 until num) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_icljnt7.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = Array.ofDim[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 2 to num) {\n            result = result * (i + num) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp62dp5ueo.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) result = result * (2 * num - i + 1) / i\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.ofDim[Long](num.toInt + 1)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result = 0L\n            for (i <- 0 to num - 1) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmput_b152r.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 0L until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var dp = new Array[Long](num.toInt + 1)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            dp(i) = 0\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0fkx8dt.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result : Long = 0\n            for (i <- 0 until num) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_wmp87_.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var sum = 0L\n        for (i <- 0 to num - 1) {\n            sum += catalanNumber(i) * catalanNumber(num - i - 1)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpru_85k1s.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    Long\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcqz6j077.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 0\n        for (i <- 0 to num - 1) {\n            result += catalanNumber(i) * catalanNumber(num - 1 - i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqek7e7jt.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    Long\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = Array.fill(num.toInt + 1)(0L)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var sum = 0L\n        for (i <- 0 until num) {\n            sum += catalanNumber(i) * catalanNumber(num - i - 1)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmaw0jwtu.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        def factorial(num : Long) : Long = {\n            if (num == 0) 1\n            else num * factorial(num - 1)\n        }\n        factorial(2 * num) / (factorial(num + 1) * factorial(num))\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1yxw1vw.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var catalan : Long = 1\n        for (i <- 0 until num) {\n            catalan = catalan * (2 * num - i) / (i + 1)\n        }\n        catalan / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwt1qkizo.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3768e0n_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0fkx8dt.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def catalanNumber(num : Long) : Long = {\n            if (num == 0) return 1\n            if (cache.contains(num)) return cache(num)\n            var result = 0L\n            for (i <- 0L until num) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            cache(num) = result\n            result\n        }\n        catalanNumber(num)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result = 0L\n        for (i <- 0 to num - 1) {\n            result += catalanNumber(i) * catalanNumber(num - i - 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnlyqpt_e.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    Long\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvz6ejiig.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8cf7i7sm.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3768e0n_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1 to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_el3sagv.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for(i <- 0 to num) {\n            result *= (2 * num - i)\n            result /= (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl87953gv.scala:7:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (num : Long)\n\u001b[31m  |\u001b[0m                      Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 1 to num.toInt) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvz6ejiig.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def catalanNumber(num : Long) : Long = {\n            if (num == 0) 1\n            else if (cache.contains(num)) cache(num)\n            else {\n                var sum = 0L\n                for (i <- 0 until num) {\n                    sum += catalanNumber(i) * catalanNumber(num - i - 1)\n                }\n                cache += (num -> sum)\n                sum\n            }\n        }\n        catalanNumber(num)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpauze_rjc.scala:12:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (num : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 0\n        for (i <- 0 until num) {\n            result += catalanNumber(i) * catalanNumber(num - i - 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv296a_vv.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzfmm7hrj.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptp1ymw5k.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzfmm7hrj.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.fill(num.toInt + 1)(0L)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result : Long = 0\n            for (i <- 0 until num) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_wmp87_.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.fill(num.toInt + 1)(0L)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8cf7i7sm.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result *= (num + i)\n            result /= i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0L until num) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.ofDim[Long](num.toInt + 1)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        def factorial(num : Long) : Long = {\n            if (num == 0) 1 else num * factorial(num - 1)\n        }\n        factorial(2 * num) / (factorial(num + 1) * factorial(num))\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1 to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_el3sagv.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1yxw1vw.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8cf7i7sm.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = Array.ofDim[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6zncies8.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 until num) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_icljnt7.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val n = num.toInt\n        var result = 1L\n        for (i <- 1 to n) {\n            result = result * (n + i) / i\n        }\n        result / (n + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var catalan : Array[Long] = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - 1 - i)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxkkhkwm7.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 0L to num) {\n            result *= (2 * num - i)\n            result /= (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8fvze9p6.scala:14)\n\tat Problem.main(tmp8fvze9p6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3768e0n_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.fill(num.toInt + 1)(0L)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3768e0n_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = Array.fill(num.toInt + 1)(0L)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 0 until num) {\n            result = result * (num + i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphuhl4zhj.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result *= (num + i)\n            result /= i\n        }\n        result /= (num + 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbjcjs871.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = Array.fill(num.toInt + 1)(0L)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.fill(num.toInt + 1)(0L)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 0\n        for (i <- 0 to num - 1) {\n            result += catalanNumber(i) * catalanNumber(num - i - 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbngabfw.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    Long\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcqz6j077.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0fkx8dt.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        def factorial(num : Long) : Long = {\n            if (num == 0) 1\n            else num * factorial(num - 1)\n        }\n        factorial(2 * num) / (factorial(num + 1) * factorial(num))\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0fkx8dt.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = Array.fill(num.toInt + 1)(0L)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                cache(i) += cache(j) * cache(i - j - 1)\n            }\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 0\n        for (i <- 0 until num) {\n            result += catalanNumber(i) * catalanNumber(num - i - 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv296a_vv.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcqz6j077.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var catalan : Array[Long] = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        factorial(2 * num) / (factorial(num + 1) * factorial(num))\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 until num) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_icljnt7.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvz6ejiig.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1yxw1vw.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (i + num) / i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyx4a2am5.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result : Long = 0\n            for (i <- 0 until num) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_wmp87_.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result *= (num + i)\n            result /= i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo51wfdjs.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result : Long = 0\n            for (i <- 0 to num - 1) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7cjtfuy1.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1yxw1vw.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvz6ejiig.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 0L until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.ofDim[Long](num.toInt + 1)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            dp(i) = 0\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result : Long = 0\n            for (i <- 0 until num) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_wmp87_.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += cache(j) * cache(i - 1 - j)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result : Long = 1\n            for (i <- 1 to num) {\n                result = result * (num + i) / i\n            }\n            result / (num + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122676,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp6gke0f4.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (num : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val factorial = (1 to num).product\n        val factorial2 = (1 to 2 * num).product\n        val factorial3 = (1 to num + 1).product\n        factorial2 / (factorial3 * factorial)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd71l4ihs.scala:6:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactorial\u001b[0m = (\u001b[31m1\u001b[0m to num).product\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd71l4ihs.scala:7:31 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactorial2\u001b[0m = (\u001b[31m1\u001b[0m to \u001b[31m2\u001b[0m * num).product\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               Found:    Long\n\u001b[31m  |\u001b[0m                               Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd71l4ihs.scala:8:31 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfactorial3\u001b[0m = (\u001b[31m1\u001b[0m to num + \u001b[31m1\u001b[0m).product\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               Found:    Long\n\u001b[31m  |\u001b[0m                               Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0fkx8dt.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3768e0n_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3768e0n_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1yxw1vw.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 until num) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_icljnt7.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = new Array[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += catalan(j) * catalan(i - j - 1)\n            }\n            catalan(i) = sum\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.fill(num.toInt + 1)(0L)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result : Long = 0\n            for (i <- 0 until num) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_wmp87_.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 2L to num) {\n            result = result * (2 * num - i + 1) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpidhd2l_x.scala:13)\n\tat Problem.main(tmpidhd2l_x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var dp = new Array[Long](num.toInt + 1)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            dp(i) = 0\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 0L until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val catalan = Array.fill(num.toInt + 1)(0L)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var catalan = Array.ofDim[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1yxw1vw.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var res : Long = 1\n        for (i <- 1 to num) res = res * (num + i) / i\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevk4j5dj.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) res = res * (num + i) / i\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzfmm7hrj.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.ofDim[Long](num.toInt + 1)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            dp(i) = 0\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val factorial = (1 to num.toInt).toList.foldLeft(1)(_ * _)\n        factorial / (factorial / (num + 1) * factorial / (num - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5mze0rfi.scala:10)\n\tat Problem.main(tmp5mze0rfi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var catalan = Array.ofDim[Long](num.toInt + 1)\n        catalan(0) = 1\n        catalan(1) = 1\n        for (i <- 2 to num.toInt) {\n            catalan(i) = 0\n            for (j <- 0 until i) {\n                catalan(i) += catalan(j) * catalan(i - j - 1)\n            }\n        }\n        catalan(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvz6ejiig.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = Array.fill(num.toInt + 1)(0L)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                cache(i) += cache(j) * cache(i - j - 1)\n            }\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - j - 1)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val dp = Array.fill(num.toInt + 1)(0L)\n        dp(0) = 1\n        dp(1) = 1\n        for (i <- 2 to num.toInt) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 0\n        for (i <- 0 until num) {\n            result += catalanNumber(i) * catalanNumber(num - i - 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv296a_vv.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1yxw1vw.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (i + num) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppqbjp01n.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 0L until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        val cache = new Array[Long](num.toInt + 1)\n        cache(0) = 1\n        cache(1) = 1\n        for (i <- 2 to num.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += cache(j) * cache(i - 1 - j)\n            }\n            cache(i) = sum\n        }\n        cache(num.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result *= (num + i)\n            result /= i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo51wfdjs.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result : Long = 0\n            for (i <- 0 to num - 1) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7cjtfuy1.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3768e0n_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result : Long = 1\n        for (i <- 1 to num) {\n            result *= (num + i)\n            result /= i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpid9izixe.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 2 to num) {\n            result = result * (num + i) / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvz6ejiig.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m2\u001b[0m to num) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (num : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 1L to num) {\n            result = result * (num + i) / i\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1665509990,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var result : Long = 0\n            for (i <- 0 to num - 1) {\n                result += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122655,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7cjtfuy1.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result = 0L\n        for (i <- 0 until num) {\n            result += catalanNumber(i) * catalanNumber(num - i - 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5vhl_u13.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 until num) {\n                sum += catalanNumber(i) * catalanNumber(num - i - 1)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_icljnt7.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (num : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result = 1L\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcqz6j077.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 0 until num) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1yxw1vw.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) return 1\n        var result = 0L\n        for (i <- 0 until num) {\n            result += catalanNumber(i) * catalanNumber(num - i - 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5vhl_u13.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until num) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (num : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        if (num == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to num - 1) {\n                sum += catalanNumber(i) * catalanNumber(num - 1 - i)\n            }\n            sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxkkhkwm7.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    Long\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n        var result : Long = 1\n        for (i <- 0 to num - 1) {\n            result = result * (2 * num - i) / (i + 1)\n        }\n        result / (num + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
      "timestamp": 1666122677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptbctkaek.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to num - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    Long\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}