{
  "name": "mbpp_130_max_occurrences",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the item with maximum frequency in a given list.\n    def maxOccurrences(nums : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxOccurrences((List[Long](2l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 5l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 1l.toLong, 2l.toLong))) == (2l));\n    assert(maxOccurrences((List[Long](2l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 7l.toLong, 9l.toLong, 15l.toLong, 14l.toLong, 10l.toLong, 12l.toLong, 13l.toLong, 16l.toLong, 18l.toLong))) == (8l));\n    assert(maxOccurrences((List[Long](10l.toLong, 20l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 90l.toLong, 80l.toLong, 50l.toLong, 30l.toLong, 20l.toLong, 50l.toLong, 10l.toLong))) == (20l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) {\n                map(num) += 1\n            } else {\n                map(num) = 1\n            }\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        nums.groupBy(identity).mapValues(_.size).maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        nums.foreach(x => map(x) = map.getOrElse(x, 0) + 1)\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            map(num) = map.getOrElse(num, 0) + 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val freq = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (freq.contains(num)) freq(num) += 1\n            else freq(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- freq) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1"
  ]
}