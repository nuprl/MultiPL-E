{
  "name": "mbpp_130_max_occurrences",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the item with maximum frequency in a given list.\n    def maxOccurrences(nums : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxOccurrences((List[Long](2l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 5l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 1l.toLong, 2l.toLong))) == (2l));\n    assert(maxOccurrences((List[Long](2l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 7l.toLong, 9l.toLong, 15l.toLong, 14l.toLong, 10l.toLong, 12l.toLong, 13l.toLong, 16l.toLong, 18l.toLong))) == (8l));\n    assert(maxOccurrences((List[Long](10l.toLong, 20l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 90l.toLong, 80l.toLong, 50l.toLong, 30l.toLong, 20l.toLong, 50l.toLong, 10l.toLong))) == (20l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) {\n                map(num) += 1\n            } else {\n                map(num) = 1\n            }\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        nums.groupBy(identity).mapValues(_.size).maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        nums.foreach(x => map(x) = map.getOrElse(x, 0) + 1)\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            map(num) = map.getOrElse(num, 0) + 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val freq = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (freq.contains(num)) freq(num) += 1\n            else freq(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- freq) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1 else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        var map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (n <- nums) {\n            if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (n <- map.keys) {\n            if (map(n) > max) {\n                max = map(n)\n                maxNum = n\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val m = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (m.contains(num)) m(num) += 1\n            else m(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- m) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        var map = Map[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        var map = Map[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val freq = nums.groupBy(identity).mapValues(_.size)\n        freq.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (!map.contains(num)) map(num) = 1\n            else map(num) += 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val freq = new HashMap[Long, Int]()\n        for (n <- nums) {\n            if (freq.contains(n)) freq(n) += 1\n            else freq(n) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((n, f) <- freq) {\n            if (f > max) {\n                max = f\n                maxNum = n\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = Map[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val max = map.values.max\n        for ((num, count) <- map) if (count == max) return num\n        return -1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxKey = 0L\n        for ((key, value) <- map) {\n            if (value > max) {\n                max = value\n                maxKey = key\n            }\n        }\n        maxKey",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (i <- nums) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var max = 0\n        var maxNum = 0L\n        for (i <- map) {\n            if (i._2 > max) {\n                max = i._2\n                maxNum = i._1\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        var map = Map[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        nums.foreach(num => {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        })\n        val max = map.values.max\n        map.filter(pair => pair._2 == max).keys.toList.sorted.head",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val m = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (m.contains(num)) m(num) += 1\n            else m(num) = 1\n        }\n        val max = m.values.max\n        for ((num, count) <- m) if (count == max) return num\n        return -1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val freq = new HashMap[Long, Long]\n        for (n <- nums) {\n            if (freq.contains(n)) freq(n) += 1\n            else freq(n) = 1\n        }\n        var max = 0L\n        for (n <- freq.keys) {\n            if (freq(n) > max) max = freq(n)\n        }\n        max",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        var map = Map[Long, Int]()\n        for (i <- nums) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        var max = 0\n        var maxNum = 0L\n        for (i <- map) {\n            if (i._2 > max) {\n                max = i._2\n                maxNum = i._1\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val freq = nums.groupBy(identity).mapValues(_.size)\n        val max = freq.values.max\n        freq.filter(_._2 == max).keys.min",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val max = map.values.max\n        for (num <- map.keys) {\n            if (map(num) == max) return num\n        }\n        return -1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val max = map.maxBy(_._2)\n        max._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        var map = Map[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1 else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) {\n                map(num) += 1\n            } else {\n                map(num) = 1\n            }\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            val count = map.getOrElse(num, 0)\n            map(num) = count + 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            val count = map.getOrElse(num, 0)\n            map.put(num, count + 1)\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.toList.sortBy(_._2).last._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        var map = Map[Long, Long]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (key <- map.keys) {\n            if (map(key) > max) max = map(key)\n        }\n        max",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        var map = Map[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        val max = map.values.max\n        for ((num, count) <- map) if (count == max) return num\n        -1",
    "        var map = Map[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map += num -> 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val freq = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (freq.contains(num)) freq(num) += 1\n            else freq(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- freq) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var maxNum = 0L\n        var maxCount = 0\n        for ((num, count) <- map) {\n            if (count > maxCount) {\n                maxNum = num\n                maxCount = count\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1 else map(num) = 1\n        }\n        val max = map.values.max\n        for (num <- map.keys) {\n            if (map(num) == max) return num\n        }\n        return -1",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) {\n                map(num) += 1\n            } else {\n                map(num) = 1\n            }\n        }\n        var max = 0L\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            val count = map.getOrElse(num, 0)\n            map.put(num, count + 1)\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1 else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (i <- nums) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var max = 0L\n        for (i <- map.keys) {\n            if (map(i) > max) max = map(i)\n        }\n        max",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) {\n                map(num) += 1\n            } else {\n                map(num) = 1\n            }\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.toList.sortWith((a, b) => a._2 > b._2).head._1",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val freq = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (freq.contains(num)) freq(num) += 1\n            else freq(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- freq) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for ((num, count) <- map) {\n            if (count > max) {\n                max = count\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        map.maxBy(_._2)._1",
    "        val map = new HashMap[Long, Int]\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0\n        var maxNum = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) {\n                max = map(num)\n                maxNum = num\n            }\n        }\n        maxNum",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var max = 0L\n        for (num <- map.keys) {\n            if (map(num) > max) max = map(num)\n        }\n        max"
  ]
}