{
  "name": "mbpp_754_extract_index_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        if (l1.isEmpty || l2.isEmpty || l3.isEmpty) return List()\n        if (l1.head == l2.head && l2.head == l3.head) return l1.head :: extractIndexList(l1.tail, l2.tail, l3.tail)\n        else return extractIndexList(l1.tail, l2.tail, l3.tail)",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        var minSize = min(l1.size, min(l2.size, l3.size))\n        for (i <- 0 until minSize) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result"
  ]
}