{
  "name": "mbpp_754_extract_index_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        if (l1.isEmpty || l2.isEmpty || l3.isEmpty) return List()\n        if (l1.head == l2.head && l2.head == l3.head) return l1.head :: extractIndexList(l1.tail, l2.tail, l3.tail)\n        else return extractIndexList(l1.tail, l2.tail, l3.tail)",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        var minSize = min(l1.size, min(l2.size, l3.size))\n        for (i <- 0 until minSize) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                l += l1(i)\n            }\n        }\n        l",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        if (l1.length == l2.length && l2.length == l3.length) {\n            for (i <- 0 until l1.length) {\n                if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                    result = result :+ l1(i)\n                }\n            }\n        }\n        result",
    "        var result = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result += l1(i)\n            }\n        }\n        result.toList",
    "        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val minLength = min(min(l1.length, l2.length), l3.length)\n        val commonElements = new ListBuffer[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                commonElements += l1(i)\n            }\n        }\n        commonElements.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l1_set = l1.toSet\n        val l2_set = l2.toSet\n        val l3_set = l3.toSet\n        val l1_l2 = l1_set.intersect(l2_set)\n        val l1_l2_l3 = l1_l2.intersect(l3_set)\n        val l1_l2_l3_list = l1_l2_l3.toList\n        val l1_l2_l3_list_sorted = l1_l2_l3_list.sorted\n        val l1_l2_l3_list_sorted_distinct = l1_l2_l3_list_sorted.distinct\n        val l1_l2_l3_list_sorted_distinct_index = l1_l2_l3_list_sorted_distinct.map(l1.indexOf(_))\n        l1_l2_l3_list_sorted_distinct_index",
    "        val l1l2 = l1.zip(l2)\n        val l1l2l3 = l1l2.zip(l3)\n        val l1l2l3_filtered = l1l2l3.filter(x => x._1._1 == x._1._2 && x._1._1 == x._2)\n        l1l2l3_filtered.map(x => x._1._1)",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val commonSet = l1Set.intersect(l2Set).intersect(l3Set)\n        if (commonSet.size == 0) {\n            return \"No common elements\"\n        }\n        val commonList = commonSet.toList\n        val commonListIndex = commonList.map(x => l1.indexOf(x))\n        return commonListIndex",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l = l :+ l1(i)\n        }\n        return l",
    "        var l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        if (l.isEmpty) \"No common elements\"\n        else l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val common = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) common += l1(i)\n        }\n        common.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        if (l1.isEmpty || l2.isEmpty || l3.isEmpty) return List()\n        if (l1.head == l2.head && l2.head == l3.head) return l1.head :: extractIndexList(l1.tail, l2.tail, l3.tail)\n        if (l1.head <= l2.head && l1.head <= l3.head) return extractIndexList(l1.tail, l2, l3)\n        if (l2.head <= l1.head && l2.head <= l3.head) return extractIndexList(l1, l2.tail, l3)\n        return extractIndexList(l1, l2, l3.tail)",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList",
    "        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val common = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                common += l1(i)\n            }\n        }\n        common.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var indexList = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) indexList += i\n        }\n        indexList.toList",
    "        var result = List[Long]()\n        if (l1.length == 0 || l2.length == 0 || l3.length == 0) return result\n        var i = 0\n        while (i < l1.length && i < l2.length && i < l3.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n            i += 1\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                l += l1(i)\n            }\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val m = scala.collection.mutable.Map[Int, List[Long]]()\n        for (i <- 0 until l1.length) {\n            if (l2.length > i && l3.length > i) {\n                if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                    m(i) = List(l1(i), l2(i), l3(i))\n                }\n            }\n        }\n        m.values.toList",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result = result :+ l1(i)\n        }\n        return result",
    "        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val result = new ListBuffer[Long]\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        if (l1.length != l2.length || l2.length != l3.length) {\n            return \"The lists are not of the same length\"\n        }\n        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result += l1(i)\n            }\n        }\n        result.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = l1(i) :: result\n        }\n        result.reverse",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = l1(i) :: result\n        }\n        result",
    "        var result = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._1 == x._3).map(x => x._1)\n        if (l.isEmpty) \"No common elements\"\n        else l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        if (l1.length != l2.length || l2.length != l3.length) {\n            return \"Lists are not of equal length\"\n        }\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result",
    "        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l2(i) == l3(i)) l = l :+ l2(i)\n        }\n        l",
    "        var result = List[Long]()\n        if (l1.length > l2.length && l1.length > l3.length) {\n            for (i <- 0 until l1.length) {\n                if (l2.length > i && l3.length > i) {\n                    if (l1(i) == l2(i) && l1(i) == l3(i)) result = result :+ l1(i)\n                }\n            }\n        } else if (l2.length > l1.length && l2.length > l3.length) {\n            for (i <- 0 until l2.length) {\n                if (l1.length > i && l3.length > i) {\n                    if (l2(i) == l1(i) && l2(i) == l3(i)) result = result :+ l2(i)\n                }\n            }\n        } else if (l3.length > l1.length && l3.length > l2.length) {\n            for (i <- 0 until l3.length) {\n                if (l1.length > i && l2.length > i) {\n                    if (l3(i) == l1(i) && l3(i) == l2(i)) result = result :+ l3(i)\n                }\n            }\n        }\n        result",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = l1.zip(l2).zip(l3).filter(x => x._1._1 == x._1._2 && x._1._2 == x._2).map(x => x._1._1)\n        if (l.length == 0) \"No common elements\" else l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, min(l2.length, l3.length))) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, min(l2.length, l3.length))) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val list = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) list += l1(i)\n        }\n        list.toList",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        val min = min(min(l1.length, l2.length), l3.length)\n        for (i <- 0 until min) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val common = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) common += l1(i)\n        }\n        common.toList",
    "        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ArrayBuffer[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val minLength = min(l1.length, min(l2.length, l3.length))\n        val list = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) list += l1(i)\n        }\n        list",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        var index = 0\n        while (index < l1.length && index < l2.length && index < l3.length) {\n            if (l1(index) == l2(index) && l2(index) == l3(index)) {\n                result = result :+ l1(index)\n            }\n            index += 1\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = l1.zip(l2).zip(l3).filter(x => x._1._1 == x._1._2 && x._1._1 == x._2).map(x => x._1._1)\n        if (l.isEmpty) \"No common elements\" else l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val minLength = min(min(l1.length, l2.length), l3.length)\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        var result = List[Long]()\n        var i = 0\n        while (i < l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n            i += 1\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to min(l1.length, l2.length, l3.length) - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result",
    "        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        if (l.isEmpty) \"No common elements\"\n        else l",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l",
    "        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList",
    "        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l"
  ]
}