{
  "name": "mbpp_608_bell_Number",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find nth bell number.\n    def bellNumber(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(bellNumber((2l)) == (2l));\n    assert(bellNumber((3l)) == (5l));\n    assert(bellNumber((4l)) == (15l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i) = dp(i - 1)\n            for (j <- i - 1 to 1 by -1) {\n                dp(j) += dp(j - 1)\n            }\n        }\n        dp(n.toInt)",
    "        var bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val table = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        table(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            table(i)(0) = table(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                table(i)(j) = table(i - 1)(j - 1) + table(i)(j - 1)\n            }\n        }\n        table(n.toInt)(0)",
    "        if (n == 0) return 1\n        var bell : Array[Long] = new Array[Long](n.toInt + 1)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i) = 0\n            for (j <- 0 until i) {\n                bell(i) += bell(j) * bell(i - j - 1)\n            }\n        }\n        return bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to i) {\n                if (j == 0) dp(i)(j) = 1\n                else if (i == j) dp(i)(j) = 1\n                else dp(i)(j) = dp(i - 1)(j - 1) + dp(i - 1)(j) * j\n            }\n        }\n        dp(n.toInt)(n.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                dp(i)(j) = dp(i - 1)(j - 1) + dp(i)(j - 1)\n            }\n        }\n        dp(n.toInt)(0)",
    "        if (n == 0) return 1\n        var bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        var bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        var bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * comb(i - 1, j)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                dp(i)(j) = dp(i - 1)(j - 1) + dp(i)(j - 1)\n            }\n        }\n        dp(n.toInt)(0)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                dp(i)(j) = dp(i - 1)(j - 1) + dp(i)(j - 1)\n            }\n        }\n        dp(n.toInt)(0)",
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        var b = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        b(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            b(i)(0) = b(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                b(i)(j) = b(i - 1)(j - 1) + b(i)(j - 1)\n            }\n        }\n        b(n.toInt)(0)"
  ]
}