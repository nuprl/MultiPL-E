{
  "name": "mbpp_741_all_Characters_Same",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether all the characters are same or not.\n    def allCharactersSame(s : String) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(allCharactersSame((\"python\")) == (false));\n    assert(allCharactersSame((\"aaa\")) == (true));\n    assert(allCharactersSame((\"data\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        s.length match {\n            case 0 => true\n            case 1 => true\n            case _ => {\n                val first = s.charAt(0)\n                s.forall(c => c == first)\n            }\n        }",
    "        s.toCharArray.distinct.length == 1",
    "        if (s.length == 0) return true\n        var c = s(0)\n        for (i <- 1 until s.length) {\n            if (s(i) != c) return false\n        }\n        return true",
    "        s.distinct.length == 1",
    "        s.toList.distinct.length == 1",
    "        if (s.length == 1) return true\n        if (s.length == 0) return false\n        if (s.charAt(0) == s.charAt(1)) return allCharactersSame(s.substring(1))\n        return false",
    "        for (i <- 0 until s.length - 1) {\n            if (s(i) != s(i + 1)) return false\n        }\n        return true",
    "        if (s.length == 0) return true\n        var c = s(0)\n        for (i <- 1 until s.length) {\n            if (s(i) != c) return false\n        }\n        return true",
    "        s.distinct.length == 1",
    "        if (s.length == 0) return true\n        val first = s.charAt(0)\n        for (i <- 1 until s.length) {\n            if (s.charAt(i) != first) return false\n        }\n        return true",
    "        if (s.length == 0) return true\n        var c = s(0)\n        for (i <- 1 until s.length) {\n            if (s(i) != c) return false\n        }\n        return true",
    "        var same = true\n        for (i <- 0 until s.length - 1) {\n            if (s(i) != s(i + 1)) {\n                same = false\n            }\n        }\n        return same",
    "        s.toCharArray.distinct.length == 1",
    "        var i = 0\n        while (i < s.length - 1) {\n            if (s(i) != s(i + 1)) return false\n            i += 1\n        }\n        return true",
    "        s.length match {\n            case 0 => true\n            case 1 => true\n            case _ => {\n                val first = s.charAt(0)\n                val rest = s.substring(1)\n                if (first == rest.charAt(0)) allCharactersSame(rest) else false\n            }\n        }",
    "        if (s.length == 0) return true\n        for (i <- 1 until s.length) {\n            if (s(i) != s(0)) return false\n        }\n        return true",
    "        if (s.length == 0) return true\n        val c = s(0)\n        for (i <- 1 until s.length) {\n            if (s(i) != c) return false\n        }\n        return true",
    "        val firstChar = s(0)\n        s.forall(c => c == firstChar)",
    "        if (s.length == 0) return false\n        var c = s(0)\n        for (i <- 1 until s.length) {\n            if (c != s(i)) return false\n        }\n        return true",
    "        s.toList.distinct.length == 1"
  ]
}