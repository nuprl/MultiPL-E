{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while(c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = a ^ b\n        var count = 0\n        while (diff != 0) {\n            diff &= (diff - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        for (i <- 0 to 63) {\n            if (((a >> i) & 1) != ((b >> i) & 1)) count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var x = a ^ b\n        var count = 0\n        while (x > 0) {\n            count += x & 1\n            x >>= 1\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi5iz0g5i.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += x & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var x = a ^ b\n        while (x != 0) {\n            x &= (x - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            count += c & 1\n            c >>= 1\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpydisq9us.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c : Long = a ^ b\n        var count : Int = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpioq6gb4p.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val diff = a ^ b\n        return (diff & (diff - 1)) == 0\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        for (i <- 0 to 63) {\n            if ((a & (1L << i)) != (b & (1L << i))) count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        val count = c.toBinaryString.count(_ == '1')\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if (c % 2 == 1) count += 1\n            c /= 2\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        for (i <- 0 to 63) {\n            if ((a & (1L << i)) != (b & (1L << i))) count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        if (c == 0) return false\n        while (c % 2 == 0) c /= 2\n        if (c == 1) return true\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmt42zvdm.scala:8:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (c % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) c /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     value /= is not a member of Long - did you mean c.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var x = a ^ b\n        var count = 0\n        while (x != 0) {\n            x = x & (x - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var x = a ^ b\n        while (x > 0) {\n            count += 1\n            x &= x - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = 0\n        var c = a ^ b\n        while (c > 0) {\n            diff += c & 1\n            c >>= 1\n        }\n        return diff == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy3vpxrk6.scala:9:17 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            diff += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var x = a ^ b\n        var count = 0\n        while (x > 0) {\n            if ((x & 1) == 1) count += 1\n            x >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            count += c & 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1u88dxw5.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpev9ttcqq.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = a ^ b\n        var count = 0\n        while (diff != 0) {\n            if ((diff & 1) == 1) count += 1\n            diff = diff >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        if (c == 0) return false\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5wl_q9jk.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            c >>= \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value >>= is not a member of Long - did you mean c.>=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) {\n                count += 1\n            }\n            c = c >> 1\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var xor = a ^ b\n        var count = 0\n        while (xor != 0) {\n            count += 1\n            xor &= xor - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            count += (c & 1)\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpam3ylkz5.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (c & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val xor = a ^ b\n        val count = xor.toBinaryString.count(_ == '1')\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += c & 1\n            c >>= 1\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl1vqn7jw.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        val count = c.toBinaryString.count(_ == '1')\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpev9ttcqq.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        val d = c & (c - 1)\n        return d == 0\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c != 0) {\n            c &= c - 1\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        return (c & (c - 1)) == 0\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var x = a ^ b\n        var count = 0\n        while (x > 0) {\n            x = x & (x - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var x = a ^ b\n        var count = 0\n        while (x != 0) {\n            if ((x & 1) == 1) count += 1\n            x >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var x = a ^ b\n        var count = 0\n        while (x != 0) {\n            x = x & (x - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            count += c & 1\n            c >>= 1\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpydisq9us.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = a ^ b\n        var count = 0\n        while (diff > 0) {\n            if ((diff & 1) == 1) count += 1\n            diff >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var xor = a ^ b\n        var count = 0\n        while (xor > 0) {\n            count += (xor & 1)\n            xor >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp18p0y0e6.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (xor & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        var count = 0\n        for (i <- 0 until 64) {\n            if ((c & (1L << i)) != 0) count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var x = a ^ b\n        while (x > 0) {\n            count += 1\n            x &= x - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpioq6gb4p.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c != 0) {\n            count += 1\n            c &= (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var xor = a ^ b\n        var count = 0\n        while (xor > 0) {\n            count += xor & 1\n            xor >>= 1\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6xf4huh7.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += xor & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        c != 0 && (c & (c - 1)) == 0\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3hlnr2gt.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            c >>= \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value >>= is not a member of Long - did you mean c.>=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpioq6gb4p.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if (c % 2 == 1) count += 1\n            c /= 2\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpioq6gb4p.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpioq6gb4p.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpev9ttcqq.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = a ^ b\n        var count = 0\n        while (diff != 0) {\n            if ((diff & 1) == 1) count += 1\n            diff = diff >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c &= c - 1\n            count += 1\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = a ^ b\n        var count = 0\n        while (diff != 0) {\n            diff = diff & (diff - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var x = a ^ b\n        var count = 0\n        while (x != 0) {\n            x = x & (x - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while(c > 0) {\n            if((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        return (c & (c - 1)) == 0\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        val count = c.toBinaryString.count(_ == '1')\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var xor = a ^ b\n        var count = 0\n        while (xor != 0) {\n            count += 1\n            xor &= xor - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c > 0) {\n            count += c & 1\n            c >>= 1\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5dwvu3m_.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var xor = a ^ b\n        var count = 0\n        while (xor != 0) {\n            count += 1\n            xor = xor & (xor - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            count += c & 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1u88dxw5.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = a ^ b\n        var count = 0\n        while (diff != 0) {\n            diff = diff & (diff - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        val count = c.toBinaryString.count(_ == '1')\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        var count = 0\n        for (i <- 0 to 63) {\n            if ((c & (1L << i)) != 0) count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val x = a ^ b\n        (x & (x - 1)) == 0\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        val d = c & (c - 1)\n        d == 0\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val x = a ^ b\n        x != 0 && (x & (x - 1)) == 0\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= (c - 1)\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c > 0) {\n            count += c & 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcby31eql.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var x = a ^ b\n        var count = 0\n        while (x != 0) {\n            x = x & (x - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = a ^ b\n        var count = 0\n        while (diff != 0) {\n            count += (diff & 1)\n            diff >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2kwcin7t.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (diff & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpev9ttcqq.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = a ^ b\n        var count = 0\n        while (diff > 0) {\n            if ((diff & 1) == 1) count += 1\n            diff >>= 1\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        val c = a ^ b\n        return c != 0 && (c & (c - 1)) == 0\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) {\n                count += 1\n            }\n            c >>= 1\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += (c & 1)\n            c = c >> 1\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp9dhb_wl.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (c & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var x = a ^ b\n        var count = 0\n        while (x != 0) {\n            if ((x & 1) == 1) count += 1\n            x >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123692,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = a ^ b\n        var count = 0\n        while (diff > 0) {\n            if (diff % 2 == 1) count += 1\n            diff /= 2\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = a ^ b\n        var count = 0\n        while (diff > 0) {\n            diff = diff & (diff - 1)\n            count += 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var diff = a ^ b\n        var count = 0\n        while (diff != 0) {\n            count += 1\n            diff = diff & (diff - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c : Long = a ^ b\n        var count : Int = 0\n        while (c > 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsmq7e5ks.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while(c != 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfb6sprkh.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += c & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        if (count == 1) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var count = 0\n        var c = a ^ b\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1\n    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}